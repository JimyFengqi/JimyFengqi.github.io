<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python实现十大常用排序算法</title>
      <link href="/post/algorithm/python-shi-xian-shi-da-chang-yong-pai-xu-suan-fa/"/>
      <url>/post/algorithm/python-shi-xian-shi-da-chang-yong-pai-xu-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="排序算法基本内容"><a href="#排序算法基本内容" class="headerlink" title="排序算法基本内容"></a>排序算法基本内容</h1><p>常用的十大排序算法中最简单的五种（冒泡、选择、插入、希尔、归并）</p><p>可以分为内部排序和外部排序，内部排序是数据记录在内存中进行排序，</p><p>而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。</p><p>常见的内部排序算法有：插入排序、希尔排序、选择排序、冒泡排序、归并排序、快速排序、堆排序、基数排序等。</p><p>主要从：过程图解、算法思想、代码实现、算法分析这四个方面讲解<br><img src="/markdownImages/sort_method_description.jpg" class="lazyload placeholder" data-srcset="/markdownImages/sort_method_description.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="排序方法分析"></p><h2 id="关于时间复杂度"><a href="#关于时间复杂度" class="headerlink" title="关于时间复杂度"></a>关于时间复杂度</h2><ul><li>1.平方阶 (O(n2)) 排序 各类简单排序：直接插入、直接选择和冒泡排序。</li><li>2.线性对数阶 (O(nlog2n)) 排序 快速排序、堆排序和归并排序。</li><li>3.O(n1+§)) 排序，§ 是介于 0 和 1 之间的常数。希尔排序。</li><li>4.线性阶 (O(n)) 排序 基数排序，此外还有桶、箱排序。</li></ul><h2 id="关于稳定性"><a href="#关于稳定性" class="headerlink" title="关于稳定性"></a>关于稳定性</h2><ul><li><p>稳定的排序算法：冒泡排序、插入排序、归并排序和基数排序。</p></li><li><p>不是稳定的排序算法：选择排序、快速排序、希尔排序、堆排序。</p></li></ul><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><pre><code>n：数据规模k：“桶”的个数In-place：占用常数内存，不占用额外内存Out-place：占用额外内存</code></pre><p>稳定性：排序后 2 个相等键值的顺序和排序之前它们的顺序相同</p><h1 id="排序算法分析与实现"><a href="#排序算法分析与实现" class="headerlink" title="排序算法分析与实现"></a>排序算法分析与实现</h1><h2 id="1、冒泡排序"><a href="#1、冒泡排序" class="headerlink" title="1、冒泡排序"></a>1、冒泡排序</h2><p>冒泡排序是最简单也是最容易理解的排序方法，其原理就是重复地走访过要排序的数列，</p><p>一次比较两个元素，如果他们的顺序错误就把他们交换过来。</p><p>走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。</p><blockquote><p>这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端（升序或降序排列），</p><p>就如同碳酸饮料中二氧化碳的气泡最终会上浮到顶端一样，故名<code>冒泡排序</code>。</p></blockquote><h3 id="1-过程图解"><a href="#1-过程图解" class="headerlink" title="1.过程图解"></a>1.过程图解</h3><p><img src="/markdownImages/bubblesort.gif" class="lazyload placeholder" data-srcset="/markdownImages/bubblesort.gif" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="冒泡排序图形展示"></p><h3 id="2-算法思想"><a href="#2-算法思想" class="headerlink" title="2.算法思想"></a>2.算法思想</h3><ul><li>从第一个和第二个开始比较，如果第一个比第二个大，则交换位置，然后比较第二个和第三个，逐渐往后</li><li>经过第一轮后最大的元素已经排在最后，所以重复上述操作的话第二大的则会排在倒数第二的位置。</li><li>那重复上述操作n-1次即可完成排序，因为最后一次只有一个元素所以不需要比较</li></ul><h3 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 冒泡排序</span><span class="token keyword">def</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""冒泡排序"""</span>    <span class="token comment"># 第一层for表示循环的遍数</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 第二层for表示具体比较哪两个元素</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token comment"># 如果前面的大于后面的，则交换这两个元素的位置</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    <span class="token keyword">return</span> arr<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>bubbleSort<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-算法分析"><a href="#4-算法分析" class="headerlink" title="4.算法分析"></a>4.算法分析</h3><p>冒泡排序是一种简单直接暴力的排序算法。</p><p>为什么说它暴力？因为每一轮比较可能多个元素移动位置，而元素位置的互换是需要消耗资源的，</p><p>所以这是一种偏慢的排序算法，仅适用于对于含有<code>较少元素</code>的数列进行排序。</p><ul><li>稳定性：我们从代码中可以看出只有前一个元素大于后一个元素才可能交换位置，所以相同元素的相对顺序不可能改变，所以它是<code>稳定排序</code></li><li>比较性：因为排序时元素之间需要比较，所以是<code>比较排序</code></li><li>时间复杂度：因为它需要双层循环n*(n-1))，所以平均时间复杂度为O(n^2)</li><li>空间复杂度：只需要常数个辅助单元，所以空间复杂度为O(1)，我们把空间复杂度为O(1)的排序成为<code>原地排序（in-place）</code></li><li>记忆方法：想象成气泡，一层一层的往上变大</li></ul><h2 id="2、选择排序"><a href="#2、选择排序" class="headerlink" title="2、选择排序"></a>2、选择排序</h2><p>选择排序（Selection sort）是一种简单直观的排序算法。</p><p>无论什么数据进去都是 O(n²) 的时间复杂度。</p><p>所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。</p><p>它的工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，</p><p>存放在序列的起始位置，所以称为：<code>选择排序</code></p><h3 id="1-过程图解-1"><a href="#1-过程图解-1" class="headerlink" title="1.过程图解"></a>1.过程图解</h3><p><img src="/markdownImages/selectsort.gif" class="lazyload placeholder" data-srcset="/markdownImages/selectsort.gif" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="选择排序图形展示"></p><h3 id="2-算法思想-1"><a href="#2-算法思想-1" class="headerlink" title="2.算法思想"></a>2.算法思想</h3><ul><li>设第一个元素为比较元素，依次和后面的元素比较，比较完所有元素找到最小（大）的元素，将它和第一个元素互换</li><li>重复上述操作，我们找出第二小（大）的元素和第二个位置的元素互换，以此类推找出剩余最小元素将它换到前面，即完成排序</li></ul><h3 id="3-代码实现-1"><a href="#3-代码实现-1" class="headerlink" title="3.代码实现"></a>3.代码实现</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">selection_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""选择排序"""</span>    <span class="token comment"># 第一层for表示循环选择的遍数</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 将起始元素设为最小元素</span>        min_index <span class="token operator">=</span> i        <span class="token comment"># 第二层for表示最小元素和后面的元素逐个比较</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token comment"># 如果当前元素比最小元素小，则把当前元素角标记为最小元素角标</span>                min_index <span class="token operator">=</span> j        <span class="token comment"># 查找一遍后将最小元素与起始元素互换</span>        arr<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span>    <span class="token keyword">return</span> arr<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">]</span>    selection_sort<span class="token punctuation">(</span>li<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外一种写法,它和冒泡法类似</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 选择排序</span><span class="token keyword">def</span> <span class="token function">selectSort</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> li<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                li<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>li<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>li<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">]</span>    selectSort<span class="token punctuation">(</span>li<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-算法分析-1"><a href="#4-算法分析-1" class="headerlink" title="4.算法分析"></a>4.算法分析</h3><p><code>选择排序</code>和<code>冒泡排序</code>很类似，但是选择排序每轮比较只会有一次交换，</p><p>而冒泡排序会有多次交换，交换次数比冒泡排序少，就减少cpu的消耗，</p><p>所以在数据量小的时候可以用选择排序，实际适用的场合非常少。</p><ul><li>比较性：因为排序时元素之间需要比较，所以是<code>比较排序</code></li><li>稳定性：因为存在任意位置的两个元素交换，比如[5, 8, 5, 2]，<br>第一个5会和2交换位置，所以改变了两个5原来的相对顺序，所以为<code>不稳定排序</code>。</li><li>时间复杂度：我们看到选择排序同样是双层循环n*(n-1))，所以时间复杂度也为：O(n^2)</li><li>空间复杂度：只需要常数个辅助单元，所以空间复杂度也为O(1)</li><li>记忆方法：选择对象要先选最小的</li></ul><h3 id="3、插入排序"><a href="#3、插入排序" class="headerlink" title="3、插入排序"></a>3、插入排序</h3><p>插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。</p><p>它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p><p>代码实现虽然没有冒泡排序和选择排序那么简单粗暴，但它的原理应该是最容易理解的了，因为只要联想到打扑克时的排序就好了</p><h3 id="1-过程图解-2"><a href="#1-过程图解-2" class="headerlink" title="1.过程图解"></a>1.过程图解</h3><p><img src="/markdownImages/insertsort.gif" class="lazyload placeholder" data-srcset="/markdownImages/insertsort.gif" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="插入排序图形展示"></p><h3 id="2-算法思想-2"><a href="#2-算法思想-2" class="headerlink" title="2.算法思想"></a>2.算法思想</h3><ul><li>1.从第二个元素开始和前面的元素进行比较，如果前面的元素比当前元素大，则将前面元素 后移，当前元素依次往前，直到找到比它小或等于它的元素插入在其后面然后</li><li>2.选择第三个元素，重复上述操作，进行插入</li><li>3.依次选择到最后一个元素，插入后即完成所有排序</li></ul><h3 id="3-代码实现-2"><a href="#3-代码实现-2" class="headerlink" title="3.代码实现"></a>3.代码实现</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">insertion_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""插入排序"""</span>    <span class="token comment"># 第一层for表示循环插入的遍数</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">## 倒序取从下标i的元素开始到下标0</span>                <span class="token keyword">if</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment">## 如果当前数值大于前一个数值，退出</span>                    <span class="token keyword">break</span>    <span class="token keyword">return</span> arr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-算法分析-2"><a href="#4-算法分析-2" class="headerlink" title="4.算法分析"></a>4.算法分析</h3><blockquote><p>插入排序的适用场景：一个新元素需要插入到一组已经是有序的数组中，或者是一组基本有序的数组排序.</p></blockquote><ul><li><ol><li>比较性：排序时元素之间需要比较，所以为<code>比较排序</code></li></ol></li><li><ol start="2"><li>稳定性：从代码我们可以看出只有比较元素大于当前元素，比较元素才会往后移动，所以相同元素是不会改变相对顺序</li></ol></li><li><ol start="3"><li>时间复杂度：插入排序同样需要两次循坏一个一个比较，故时间复杂度也为<code>O(n^2)</code></li></ol></li><li><ol start="4"><li>空间复杂度：只需要常数个辅助单元，所以空间复杂度也为<code>O(1)</code></li></ol></li><li><ol start="5"><li>记忆方法：想象成在书架中插书：先找到相应位置，将后面的书往后推，再将书插入</li></ol></li></ul><h2 id="4、希尔排序"><a href="#4、希尔排序" class="headerlink" title="4、希尔排序"></a>4、希尔排序</h2><p>希尔排序(Shell’s Sort)是插入排序的一种又称“缩小增量(间隔)排序”（Diminishing Increment Sort），</p><p>是<code>插入排序</code>算法的一种更高效的改进版本，基于·插入排序·的以下两点性质而提出改进方法的：</p><ul><li>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；</li><li>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位</li></ul><p>它与插入排序的不同之处在于，它会优先比较距离较远的元素，该方法因D.L.Shell于1959年提出而得名。</p><p>希尔排序的基本思想是：</p><p>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，</p><p>待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。</p><h3 id="1-过程图解-3"><a href="#1-过程图解-3" class="headerlink" title="1.过程图解"></a>1.过程图解</h3><p><img src="/markdownImages/shellsort.jpg" class="lazyload placeholder" data-srcset="/markdownImages/shellsort.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="希尔排序图形展示"></p><h3 id="2-算法思想-3"><a href="#2-算法思想-3" class="headerlink" title="2.算法思想"></a>2.算法思想</h3><p>希尔排序的整体思想是将固定间隔的几个元素之间排序，然后再缩小这个间隔。这样到最后数列就成为了<code>基本有序数列</code>，</p><p>而前面我们讲过<code>插入排序</code>对基本有序数列排序效果较好。</p><ul><li><ol><li>计算一个增量（间隔）值 </li></ol></li><li><ol start="2"><li>对元素进行增量元素进行比较，比如增量值为7，那么就对0,7,14,21…个元素进行插入排序</li></ol></li><li><ol start="3"><li>然后对1,8,15…进行排序，依次递增进行排序 </li></ol></li><li><ol start="4"><li>所有元素排序完后，缩小增量比如为3，然后又重复上述第2，3步 </li></ol></li><li><ol start="5"><li>最后缩小增量至1时，数列已经基本有序，最后一遍普通插入即可</li></ol></li></ul><p>已知的最增量式是由 <code>Sedgewick</code> 提出的 (1, 5, 19, 41, 109,…)，</p><p>该步长的项来自 9 * 4^i - 9 * 2^i + 1 和 4^i - 3 * 2^i + 1 这两个算式。</p><p>这项研究也表明 <code>比较</code> 在希尔排序中是最主要的操作，而不是交换。</p><p>用这样增量式的<code>希尔排序</code>比<code>插入排序</code>和<code>堆排序</code>都要快，甚至在小数组中比<code>快速排序</code>还快，</p><p>但是在涉及大量数据时<code>希尔排序</code>还是比<code>快速排序</code>慢。</p><h3 id="3-代码实现-3"><a href="#3-代码实现-3" class="headerlink" title="3.代码实现"></a>3.代码实现</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">shell_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""希尔排序"""</span>    <span class="token comment"># 取整计算增量（间隔）值</span>    gap <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>    <span class="token keyword">while</span> gap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token comment"># 从增量值开始遍历比较</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>gap<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            j <span class="token operator">=</span> i            current <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token comment"># 元素与他同列的前面的每个元素比较，如果比前面的小则互换</span>            <span class="token keyword">while</span> j <span class="token operator">-</span> gap <span class="token operator">>=</span> <span class="token number">0</span> <span class="token keyword">and</span> current <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span><span class="token punctuation">:</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span>                j <span class="token operator">-=</span> gap            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> current        <span class="token comment"># 缩小增量（间隔）值</span>        gap <span class="token operator">//=</span> <span class="token number">2</span>    <span class="token keyword">return</span> arr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-算法分析-3"><a href="#4-算法分析-3" class="headerlink" title="4.算法分析"></a>4.算法分析</h3><ul><li><p>1.比较性：排序时元素之间需要比较，所以为<code>比较排序</code></p></li><li><p>2.稳定性：因为希尔排序是间隔的插入，所以存在相同元素相对顺序被打乱，所以是<code>不稳定排序</code></p></li><li><p>3.时间复杂度： 最坏时间复杂度O(n^2)平均复杂度为<code>O(n^1.3)</code></p></li><li><p>4.空间复杂度：只需要常数个辅助单元，所以空间复杂度也为<code>O(1)</code></p></li><li><p>5.记忆方法：插入排序是每轮都是一小步，希尔排序是先大步后小步，它第一个突破O(n2)的排序算法。</p><p>联想起阿姆斯特朗登月之后说：这是我个人一小步，却是人类迈出的一大步。</p></li></ul><h2 id="5、归并排序"><a href="#5、归并排序" class="headerlink" title="5、归并排序"></a>5、归并排序</h2><p>归并排序（MERGE-SORT）是建立在归并操作上的一种有效的排序算法,</p><p>该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。</p><blockquote><p>归并排序适用于子序列有序的数据排序。</p></blockquote><h3 id="1-过程图解-4"><a href="#1-过程图解-4" class="headerlink" title="1.过程图解"></a>1.过程图解</h3><p><img src="/markdownImages/mergesort.gif" class="lazyload placeholder" data-srcset="/markdownImages/mergesort.gif" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="归并排序动画展示"></p><h3 id="2-算法思想-4"><a href="#2-算法思想-4" class="headerlink" title="2.算法思想"></a>2.算法思想</h3><p><img src="/markdownImages/mergesort.jpg" class="lazyload placeholder" data-srcset="/markdownImages/mergesort.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="归并排序图形展示"><br>从上图看分解后的数列很像一个二叉树。</p><ul><li>使用递归将源数列使用二分法分成多个子列</li><li>申请空间将两个子列排序合并然后返回</li><li>将所有子列一步一步合并最后完成排序</li></ul><h3 id="3-代码实现-4"><a href="#3-代码实现-4" class="headerlink" title="3.代码实现"></a>3.代码实现</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""归并排序"""</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> arr    <span class="token comment"># 使用二分法将数列分两个</span>    mid <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>    left <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token punctuation">:</span>mid<span class="token punctuation">]</span>    right <span class="token operator">=</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token comment"># 使用递归运算</span>    <span class="token keyword">return</span> marge<span class="token punctuation">(</span>merge_sort<span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> merge_sort<span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">marge</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""排序合并两个数列"""</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment"># 两个数列都有值</span>    <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">and</span> <span class="token builtin">len</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token comment"># 左右两个数列第一个最小放前面</span>        <span class="token keyword">if</span> left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>left<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>right<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 只有一个数列中还有值，直接添加</span>    result <span class="token operator">+=</span> left    result <span class="token operator">+=</span> right    <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-算法分析-4"><a href="#4-算法分析-4" class="headerlink" title="4.算法分析"></a>4.算法分析</h3><ul><li><p>1.比较性：排序时元素之间需要比较，所以为<code>比较排序</code></p></li><li><p>2.稳定性：我们从代码中可以看到当左边的元素小于等于右边的元素就把左边的排前面，</p><p>  而原本左边的就是在前面，所以相同元素的相对顺序不变，故为<code>稳定排序</code></p></li><li><p>3.时间复杂度： 复杂度为<code>O(nlog^n)</code></p></li><li><p>4.空间复杂度：在合并子列时需要申请临时空间，而且空间大小随数列的大小而变化，所以空间复杂度为<code>O(n)</code></p></li><li><p>5.记忆方法：所谓归并肯定是要先分解，再合并</p></li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这五种排序是比较简单的排序，家必须理解&amp;记住它们的算法原理，<br>因为代码是永远记不住的，只要记住原理你就能用伪代码实现。</p><h2 id="6、快速排序"><a href="#6、快速排序" class="headerlink" title="6、快速排序"></a>6、快速排序</h2><p>快速排序是由东尼·霍尔所发展的一种排序算法。在平均状况下，排序 n 个项目要 Ο(nlogn) 次比较。</p><p>在最坏状况下则需要 Ο(n2) 次比较，但这种状况并不常见。</p><p>事实上，快速排序通常明显比其他 Ο(nlogn) 算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来。</p><p>快速排序使用分治法（Divide and conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。</p><p>快速排序又是一种分而治之思想在排序算法上的典型应用。本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法。</p><p>快速排序的名字起的是简单粗暴，因为一听到这个名字你就知道它存在的意义，就是快，而且效率高！它是处理大数据最快的排序算法之一了。</p><p>虽然 Worst Case 的时间复杂度达到了 O(n²)，但是人家就是优秀，在大多数情况下都比平均时间复杂度为 O(n logn) 的排序算法表现要更好，</p><p>可是这是为什么呢，我也不知道。好在我的强迫症又犯了，查了 N 多资料终于在《算法艺术与信息学竞赛》上找到了满意的答案：</p><p>快速排序的最坏运行情况是 O(n²)，比如说顺序数列的快排。但它的平摊期望时间是 O(nlogn)，且 O(nlogn) 记号中隐含的常数因子很小，</p><p>比复杂度稳定等于 O(nlogn) 的归并排序要小很多。所以，对绝大多数顺序性较弱的随机数列而言，快速排序总是优于归并排序。</p><h3 id="1-过程图解-5"><a href="#1-过程图解-5" class="headerlink" title="1.过程图解"></a>1.过程图解</h3><p><img src="/markdownImages/quicksort.gif" class="lazyload placeholder" data-srcset="/markdownImages/quicksort.gif" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="快速排序图形展示"></p><h3 id="2-算法思想-5"><a href="#2-算法思想-5" class="headerlink" title="2. 算法思想"></a>2. 算法思想</h3><ul><li>从数列中挑出一个元素，称为 “基准”（pivot）;</li><li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。</li><li>在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li><li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序；</li></ul><p>递归的最底部情形，是数列的大小是零或一，也就是永远都已经被排序好了。</p><p>虽然一直递归下去，但是这个算法总会退出，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。</p><h3 id="3-代码实现-5"><a href="#3-代码实现-5" class="headerlink" title="3.代码实现"></a>3.代码实现</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 快速排序：最快的n*logN</span><span class="token keyword">def</span> <span class="token function">qiuckSort</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">list</span>    pivot <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    left <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">if</span> i <span class="token operator">&lt;=</span> pivot<span class="token punctuation">]</span>    right <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">if</span> i <span class="token operator">></span> pivot<span class="token punctuation">]</span>    finallyList <span class="token operator">=</span> qiuckSort<span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">[</span>pivot<span class="token punctuation">]</span> <span class="token operator">+</span> qiuckSort<span class="token punctuation">(</span>right<span class="token punctuation">)</span>    <span class="token keyword">return</span> finallyList<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-算法分析-5"><a href="#4-算法分析-5" class="headerlink" title="4.算法分析"></a>4.算法分析</h3><ul><li><p>1.比较性：排序时元素之间需要比较，所以为<code>比较排序</code></p></li><li><p>2.稳定性：我们从代码中可以看到当剩余数列中元素小于等于基准元素的，就把他们放到基准元素前面重新排列，</p><p>  剩余数列中元素大于基准元素的，就把他们放到基准元素后面面重新排列，故为<code>不稳定排序</code></p></li><li><p>3.时间复杂度： 复杂度为<code>O(n*logN)</code></p></li><li><p>4.空间复杂度：复杂度为<code>O(n)</code></p></li><li><p>5.记忆方法：比我大的往前站，比我小的往后站，你们自己再按照我的规矩重新排一下， 有点像军训排队</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>主题介绍-侧边栏功能</title>
      <link href="/post/ben-zhan-jie-shao/zhu-ti-jie-shao-ce-bian-lan-gong-neng/"/>
      <url>/post/ben-zhan-jie-shao/zhu-ti-jie-shao-ce-bian-lan-gong-neng/</url>
      
        <content type="html"><![CDATA[<blockquote><p>首页侧边栏支持的版本为 v2.6.0+</p></blockquote><h1 id="默认的侧边栏"><a href="#默认的侧边栏" class="headerlink" title="默认的侧边栏"></a>默认的侧边栏</h1><p>在主题的<code>config.yml</code>文件中配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># sidebar侧边栏</span><span class="token key atrule">sidebar</span><span class="token punctuation">:</span>  <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">position</span><span class="token punctuation">:</span> left <span class="token comment"># left right</span>  <span class="token key atrule">widget_library</span><span class="token punctuation">:</span>    <span class="token key atrule">side_blogger</span><span class="token punctuation">:</span>      <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">avatar</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//api.btstu.cn/sjtx/api.php<span class="token punctuation">?</span>lx=c1<span class="token important">&amp;format=images</span>      <span class="token key atrule">shape</span><span class="token punctuation">:</span> rectangle <span class="token comment"># circle, rectangle</span>      <span class="token key atrule">url</span><span class="token punctuation">:</span> /about/      <span class="token key atrule">title</span><span class="token punctuation">:</span> 青墨书晚风      <span class="token key atrule">subtitle</span><span class="token punctuation">:</span> 我是副标题      <span class="token key atrule">jinrishici</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># Poetry Today. You can set a string, and it will be displayed when loading fails.</span>      <span class="token key atrule">fontFammily</span><span class="token punctuation">:</span> Long Cang<span class="token punctuation">,</span>cursive      <span class="token key atrule">background</span><span class="token punctuation">:</span> <span class="token string">'#fff'</span>      <span class="token key atrule">order</span><span class="token punctuation">:</span>  <span class="token comment"># 卡片排序, 数值越小，越在上面</span>      <span class="token key atrule">social</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>rss          <span class="token key atrule">url</span><span class="token punctuation">:</span> /atom.xml        <span class="token punctuation">-</span> <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>envelope          <span class="token key atrule">url</span><span class="token punctuation">:</span> mailto<span class="token punctuation">:</span>me@xxx.com        <span class="token punctuation">-</span> <span class="token key atrule">icon</span><span class="token punctuation">:</span> fab fa<span class="token punctuation">-</span>github          <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/yuang01/hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>bamboo        <span class="token punctuation">-</span> <span class="token key atrule">icon</span><span class="token punctuation">:</span> fab fa<span class="token punctuation">-</span>qq          <span class="token key atrule">url</span><span class="token punctuation">:</span> tencent<span class="token punctuation">:</span>//AddContact/<span class="token punctuation">?</span>fromId=50<span class="token important">&amp;fromSubId=1&amp;subcmd=all&amp;uin=你的qq号码</span>    <span class="token comment"># ---------------------------------------</span>    <span class="token comment"># category widget</span>    <span class="token key atrule">side_category</span><span class="token punctuation">:</span>      <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">background</span><span class="token punctuation">:</span> <span class="token string">'#fff'</span>      <span class="token key atrule">order</span><span class="token punctuation">:</span>  <span class="token comment"># 卡片排序(widget都有)，任意数字，数字小的在上面</span>      <span class="token key atrule">header</span><span class="token punctuation">:</span>        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>folder<span class="token punctuation">-</span>open        <span class="token key atrule">icon_color</span><span class="token punctuation">:</span> <span class="token comment"># 标题字体颜色</span>        <span class="token key atrule">title</span><span class="token punctuation">:</span> 文章分类        <span class="token key atrule">url</span><span class="token punctuation">:</span> /blog/categories/    <span class="token comment"># ---------------------------------------</span>    <span class="token comment"># tagcloud widget</span>    <span class="token key atrule">side_tagcloud</span><span class="token punctuation">:</span>      <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">background</span><span class="token punctuation">:</span> <span class="token string">'#fff'</span>      <span class="token key atrule">order</span><span class="token punctuation">:</span>       <span class="token key atrule">header</span><span class="token punctuation">:</span>        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags        <span class="token key atrule">icon_color</span><span class="token punctuation">:</span>         <span class="token key atrule">title</span><span class="token punctuation">:</span> 热门标签        <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags/      <span class="token key atrule">min_font</span><span class="token punctuation">:</span> <span class="token number">14</span>      <span class="token key atrule">max_font</span><span class="token punctuation">:</span> <span class="token number">24</span>      <span class="token key atrule">color</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">start_color</span><span class="token punctuation">:</span> <span class="token string">'#999'</span>      <span class="token key atrule">end_color</span><span class="token punctuation">:</span> <span class="token string">'#555'</span>    <span class="token comment"># ---------------------------------------</span>    <span class="token comment"># recent_post widget</span>    <span class="token key atrule">side_recent_post</span><span class="token punctuation">:</span>      <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">background</span><span class="token punctuation">:</span> <span class="token string">'#fff'</span>      <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">5</span>      <span class="token key atrule">sort</span><span class="token punctuation">:</span> update <span class="token comment"># date</span>      <span class="token key atrule">order</span><span class="token punctuation">:</span>       <span class="token key atrule">header</span><span class="token punctuation">:</span>        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>book        <span class="token key atrule">icon_color</span><span class="token punctuation">:</span>         <span class="token key atrule">title</span><span class="token punctuation">:</span> 最新文章        <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags/    <span class="token comment"># ---------------------------------------</span>    <span class="token comment"># side_archives widget</span>    <span class="token key atrule">side_archives</span><span class="token punctuation">:</span>      <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> monthly <span class="token comment"># yearly or monthly      or yearly</span>      <span class="token key atrule">format</span><span class="token punctuation">:</span> MMMM YYYY <span class="token comment"># eg: YYYY年MM月     or YYYY</span>      <span class="token key atrule">timeOrder</span><span class="token punctuation">:</span> <span class="token number">-1</span> <span class="token comment"># Sort of order. 1, asc for ascending; -1, desc for descending 时间排序</span>      <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">8</span> <span class="token comment"># if set 0 will show all</span>      <span class="token key atrule">order</span><span class="token punctuation">:</span>  <span class="token comment"># widget order 卡片排序</span>      <span class="token key atrule">background</span><span class="token punctuation">:</span> <span class="token string">'#fff'</span>      <span class="token key atrule">header</span><span class="token punctuation">:</span>         <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive        <span class="token key atrule">icon_color</span><span class="token punctuation">:</span> red        <span class="token key atrule">title</span><span class="token punctuation">:</span> 归档    <span class="token comment"># ---------------------------------------</span>    <span class="token comment"># side_webinfo widget</span>    <span class="token key atrule">side_webinfo</span><span class="token punctuation">:</span>      <span class="token key atrule">background</span><span class="token punctuation">:</span> <span class="token string">'#fff'</span>      <span class="token key atrule">order</span><span class="token punctuation">:</span>       <span class="token key atrule">header</span><span class="token punctuation">:</span>         <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>chart<span class="token punctuation">-</span>line        <span class="token key atrule">title</span><span class="token punctuation">:</span> 站点信息      <span class="token key atrule">type</span><span class="token punctuation">:</span>        <span class="token key atrule">article</span><span class="token punctuation">:</span>          <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>          <span class="token key atrule">text</span><span class="token punctuation">:</span> <span class="token string">'文章数目：'</span>          <span class="token key atrule">unit</span><span class="token punctuation">:</span> <span class="token string">'篇'</span>        <span class="token key atrule">runtime</span><span class="token punctuation">:</span>          <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>          <span class="token key atrule">data</span><span class="token punctuation">:</span> <span class="token string">'2020/01/01'</span>    <span class="token comment"># 填写建站日期</span>          <span class="token key atrule">text</span><span class="token punctuation">:</span> <span class="token string">'已运行时间：'</span>          <span class="token key atrule">unit</span><span class="token punctuation">:</span> <span class="token string">'天'</span>        <span class="token key atrule">wordcount</span><span class="token punctuation">:</span>          <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>          <span class="token key atrule">text</span><span class="token punctuation">:</span> <span class="token string">'本站总字数：'</span>   <span class="token comment"># 需要启用 wordcount</span>          <span class="token key atrule">unit</span><span class="token punctuation">:</span> <span class="token string">'字'</span>        <span class="token key atrule">visitcounter</span><span class="token punctuation">:</span>          <span class="token key atrule">service</span><span class="token punctuation">:</span> busuanzi <span class="token comment"># only busuanzi</span>          <span class="token key atrule">siteuv</span><span class="token punctuation">:</span>            <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>            <span class="token key atrule">text</span><span class="token punctuation">:</span> <span class="token string">'本站访客数：'</span>            <span class="token key atrule">unit</span><span class="token punctuation">:</span> <span class="token string">'人'</span>          <span class="token key atrule">sitepv</span><span class="token punctuation">:</span>            <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>            <span class="token key atrule">text</span><span class="token punctuation">:</span> <span class="token string">'本站总访问量：'</span>            <span class="token key atrule">unit</span><span class="token punctuation">:</span> <span class="token string">'次'</span>        <span class="token key atrule">lastupd</span><span class="token punctuation">:</span>          <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>          <span class="token key atrule">friendlyShow</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment"># 更友好的时间显示</span>          <span class="token key atrule">text</span><span class="token punctuation">:</span> <span class="token string">'最后活动时间：'</span>          <span class="token key atrule">unit</span><span class="token punctuation">:</span> <span class="token string">'日'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="widget-排序"><a href="#widget-排序" class="headerlink" title="widget 排序"></a>widget 排序</h1><p>只需要配置 <code>order</code> 就行。（使用了 Flex 佈局的 order 屬性)，值越小越靠前(靠上)</p><h1 id="自定义侧边栏"><a href="#自定义侧边栏" class="headerlink" title="自定义侧边栏"></a>自定义侧边栏</h1><h2 id="创建-widget-yml"><a href="#创建-widget-yml" class="headerlink" title="创建 widget.yml"></a>创建 widget.yml</h2><p>在Hexo博客目录中的<code>source/_data</code>（如果沒有 _data 文件夾，请自行创建），创建一个文件 widget.yml</p><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># widget_library 里面的不会出现在sticky区域，也就是不会粘贴在左侧 </span><span class="token key atrule">widget_library</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">class_name</span><span class="token punctuation">:</span> test_a  <span class="token key atrule">id_name</span><span class="token punctuation">:</span> test_a  <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> 这个widget不会粘贴  <span class="token key atrule">icon</span><span class="token punctuation">:</span> fab fa<span class="token punctuation">-</span>weibo  <span class="token key atrule">icon_color</span><span class="token punctuation">:</span> <span class="token string">'#d63130'</span>  <span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//baidu.com  <span class="token key atrule">background</span><span class="token punctuation">:</span> <span class="token string">'#fff'</span>  <span class="token key atrule">html</span><span class="token punctuation">:</span> <span class="token string">'haha'</span><span class="token comment"># widget_library_sticky 里面的会出现在sticky区域，会粘贴在左侧</span><span class="token key atrule">widget_library_sticky</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">class_name</span><span class="token punctuation">:</span> testWidget    <span class="token key atrule">id_name</span><span class="token punctuation">:</span> testWidget    <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token number">-1</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> 微博热搜    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fab fa<span class="token punctuation">-</span>weibo    <span class="token key atrule">icon_color</span><span class="token punctuation">:</span> <span class="token string">'#d63130'</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//baidu.com    <span class="token key atrule">background</span><span class="token punctuation">:</span> <span class="token string">'#fff'</span>    <span class="token key atrule">html</span><span class="token punctuation">:</span> <span class="token string">'xixi'</span><span class="token comment"># home_widget里面的内容会出现在座右铭那一个栏目里面</span><span class="token key atrule">home_widget</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">class_name</span><span class="token punctuation">:</span> welcome    <span class="token key atrule">id_name</span><span class="token punctuation">:</span> welcome    <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token number">-1</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> 欢迎    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>envelope    <span class="token key atrule">icon_color</span><span class="token punctuation">:</span> blue    <span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//baidu.com    <span class="token key atrule">background</span><span class="token punctuation">:</span> <span class="token string">'#fff'</span>    <span class="token key atrule">html</span><span class="token punctuation">:</span> <span class="token string">'针不戳'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h2><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>class_name</td><td>所创建的 widget 父类 class 名</td></tr><tr><td>id_name</td><td>所创建的 widget 父类 id 名</td></tr><tr><td>order</td><td>所创建的 widget 排序 （可选）</td></tr><tr><td>name</td><td>所创建的 widget 名称</td></tr><tr><td>icon</td><td>所创建的 widget 头部的字体图标</td></tr><tr><td>icon_color</td><td>所创建的 widget 头部的字体图标的颜色</td></tr><tr><td>url</td><td>所创建的 widget 头部点击跳转的链接</td></tr><tr><td>background</td><td>所创建的 widget 的背景颜色</td></tr><tr><td>html</td><td>所创建的 widget 的相关代码</td></tr></tbody></table><p>生成的代码为</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>widget test_a<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test_a<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">order</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> #fff</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> #d63130</span><span class="token punctuation">"</span></span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>noopener<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">data-pjax-state</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fab fa-weibo fa-fw<span class="token punctuation">"</span></span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这个widget不会粘贴<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    haha  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你需要对添加的 widget 进行 UI 调整，请自行添加 css 到 inject 去。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="首页添加github日历"><a href="#首页添加github日历" class="headerlink" title="首页添加github日历"></a>首页添加github日历</h3><p>例如我在``里添加一个github日历，首先我在source文件夹下创建一个js文件<code>/githubcalendar/index.js</code>, js代码如下:</p><details cyan><summary pointer> github日历js </summary>              <div class='content'>              <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">var github_canlendar = (git_user<span class="token punctuation">,</span> git_color) =<span class="token punctuation">></span> <span class="token punctuation">&#123;</span>    var git_githubapiurl = "https<span class="token punctuation">:</span>//python<span class="token punctuation">-</span>github<span class="token punctuation">-</span>calendar<span class="token punctuation">-</span>api.vercel.app/api<span class="token punctuation">?</span>" + git_user;    var git_fixed = 'fixed';    var git_px = 'px';    var git_month = <span class="token punctuation">[</span><span class="token string">'一月'</span><span class="token punctuation">,</span> <span class="token string">'二月'</span><span class="token punctuation">,</span> <span class="token string">'三月'</span><span class="token punctuation">,</span> <span class="token string">'四月'</span><span class="token punctuation">,</span> <span class="token string">'五月'</span><span class="token punctuation">,</span> <span class="token string">'六月'</span><span class="token punctuation">,</span> <span class="token string">'七月'</span><span class="token punctuation">,</span> <span class="token string">'八月'</span><span class="token punctuation">,</span> <span class="token string">'九月'</span><span class="token punctuation">,</span> <span class="token string">'十月'</span><span class="token punctuation">,</span> <span class="token string">'十一月'</span><span class="token punctuation">,</span> <span class="token string">'十二月'</span><span class="token punctuation">]</span>;    var git_monthchange = <span class="token punctuation">[</span><span class="token punctuation">]</span>;    var git_oneyearbeforeday = '';    var git_thisday = '';    var git_amonthago = '';    var git_aweekago = '';    var git_weekdatacore = 0;    var git_datacore = 0;    var git_total = 0;    var git_datadate = '';    var git_git_data = <span class="token punctuation">[</span><span class="token punctuation">]</span>;    var git_positionplusdata = <span class="token punctuation">[</span><span class="token punctuation">]</span>;    var git_firstweek = <span class="token punctuation">[</span><span class="token punctuation">]</span>;    var git_lastweek = <span class="token punctuation">[</span><span class="token punctuation">]</span>;    var git_beforeweek = <span class="token punctuation">[</span><span class="token punctuation">]</span>;    var git_thisweekdatacore = 0;    var git_mounthbeforeday = 0;    var git_mounthfirstindex = 0;    var git_crispedges = 'crispedges';    var git_thisdayindex = 0;    var git_amonthagoindex = 0;    var git_amonthagoweek = <span class="token punctuation">[</span><span class="token punctuation">]</span>;    var git_firstdate = <span class="token punctuation">[</span><span class="token punctuation">]</span>;    var git_first2date = <span class="token punctuation">[</span><span class="token punctuation">]</span>;    var git_montharrbefore = <span class="token punctuation">[</span><span class="token punctuation">]</span>;    var git_monthindex = 0;    var retinaCanvas = (canvas<span class="token punctuation">,</span> context<span class="token punctuation">,</span> ratio) =<span class="token punctuation">></span> <span class="token punctuation">&#123;</span>        if (ratio <span class="token punctuation">></span> 1) <span class="token punctuation">&#123;</span>            var canvasWidth = canvas.width;            var canvasHeight = canvas.height;            canvas.width = canvasWidth * ratio;            canvas.height = canvasHeight * ratio;            canvas.style.width = '100%';            canvas.style.height = canvasHeight + 'px';            context.scale(ratio<span class="token punctuation">,</span> ratio);        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>;    function responsiveChart() <span class="token punctuation">&#123;</span>        var ratio = window.devicePixelRatio <span class="token punctuation">|</span><span class="token punctuation">|</span> 1        var git_tooltip_container = document.getElementById('git_tooltip_container');        var git_x = '';        var git_y = '';        var git_span1 = '';        var git_span2 = '';        var c = document.getElementById("gitcanvas");        c.style.width = '100%';        c.style.height = '';        var cmessage = document.getElementById("gitmessage");        var ctx = c.getContext("2d");        width = c.width = document.getElementById("gitcalendarcanvasbox").offsetWidth;        height = c.height = 9 * 0.96 * c.width / git_data.length;        retinaCanvas(c<span class="token punctuation">,</span>ctx<span class="token punctuation">,</span> ratio)        var linemaxwitdh = height/ 9;        var lineminwitdh = 0.8 * linemaxwitdh;        var setposition = <span class="token punctuation">&#123;</span><span class="token key atrule">x</span><span class="token punctuation">:</span> 0.02 * width<span class="token punctuation">,</span> <span class="token key atrule">y</span><span class="token punctuation">:</span> 0.025 * width<span class="token punctuation">&#125;</span>;        for (var week in git_data) <span class="token punctuation">&#123;</span>            weekdata = git_data<span class="token punctuation">[</span>week<span class="token punctuation">]</span>;            for (var day in weekdata) <span class="token punctuation">&#123;</span>                var dataitem = <span class="token punctuation">&#123;</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token key atrule">count</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token key atrule">x</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token key atrule">y</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">&#125;</span>;                git_positionplusdata.push(dataitem);                ctx.fillStyle = git_thiscolor(git_color<span class="token punctuation">,</span> weekdata<span class="token punctuation">[</span>day<span class="token punctuation">]</span>.count);                setposition.y = Math.round(setposition.y * 100) / 100;                dataitem.date = weekdata<span class="token punctuation">[</span>day<span class="token punctuation">]</span>.date;                dataitem.count = weekdata<span class="token punctuation">[</span>day<span class="token punctuation">]</span>.count;                dataitem.x = setposition.x;                dataitem.y = setposition.y;                ctx.fillRect(setposition.x<span class="token punctuation">,</span> setposition.y<span class="token punctuation">,</span> lineminwitdh<span class="token punctuation">,</span> lineminwitdh);                setposition.y = setposition.y + linemaxwitdh            <span class="token punctuation">&#125;</span>            setposition.y = 0.025 * width;            setposition.x = setposition.x + linemaxwitdh        <span class="token punctuation">&#125;</span>        if (document.body.clientWidth <span class="token punctuation">></span> 700) <span class="token punctuation">&#123;</span>            ctx.font = "600  Arial";            ctx.fillStyle = '<span class="token comment">#aaa';</span>            ctx.fillText("日"<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> 1.9 * linemaxwitdh);            ctx.fillText("二"<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> 3.9 * linemaxwitdh);            ctx.fillText("四"<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> 5.9 * linemaxwitdh);            ctx.fillText("六"<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> 7.9 * linemaxwitdh);            var monthindexlist = width / 24;            for (var index in git_monthchange) <span class="token punctuation">&#123;</span>                ctx.fillText(git_monthchange<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> monthindexlist<span class="token punctuation">,</span> 0.7 * linemaxwitdh);                monthindexlist = monthindexlist + width / 12            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        c.onmousemove = function (event) <span class="token punctuation">&#123;</span>            if (document.querySelector('.gitmessage')) <span class="token punctuation">&#123;</span>                git_tooltip_container.innerHTML = ""            <span class="token punctuation">&#125;</span>            getMousePos(c<span class="token punctuation">,</span> event)        <span class="token punctuation">&#125;</span>;        git_tooltip_container.onmousemove = function (event) <span class="token punctuation">&#123;</span>            if (document.querySelector('.gitmessage')) <span class="token punctuation">&#123;</span>                git_tooltip_container.innerHTML = ""            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>;        function getMousePos(canvas<span class="token punctuation">,</span> event) <span class="token punctuation">&#123;</span>            var rect = canvas.getBoundingClientRect();            var x = event.clientX <span class="token punctuation">-</span> rect.left * (canvas.width / rect.width);            var y = event.clientY <span class="token punctuation">-</span> rect.top * (canvas.height / rect.height);            for (var item of git_positionplusdata) <span class="token punctuation">&#123;</span>                var lenthx = x <span class="token punctuation">-</span> item.x;                var lenthy = y <span class="token punctuation">-</span> item.y;                if (0 &lt; lenthx <span class="token important">&amp;&amp;</span> lenthx &lt; lineminwitdh) <span class="token punctuation">&#123;</span>                    if (0 &lt; lenthy <span class="token important">&amp;&amp;</span> lenthy &lt; lineminwitdh) <span class="token punctuation">&#123;</span>                        git_span1 = item.date;                        git_span2 = item.count;                        git_x = event.clientX <span class="token punctuation">-</span> 100;                        git_y = event.clientY <span class="token punctuation">-</span> 60;                        html = tooltip_html(git_x<span class="token punctuation">,</span> git_y<span class="token punctuation">,</span> git_span1<span class="token punctuation">,</span> git_span2);                        append_div_gitcalendar(git_tooltip_container<span class="token punctuation">,</span> html)                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    function addlastmonth() <span class="token punctuation">&#123;</span>        if (git_thisdayindex === 0) <span class="token punctuation">&#123;</span>            thisweekcore(52);            thisweekcore(51);            thisweekcore(50);            thisweekcore(49);            thisweekcore(48);            git_thisweekdatacore += git_firstdate<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span>.count;            git_amonthago = git_firstdate<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span>.date        <span class="token punctuation">&#125;</span> else <span class="token punctuation">&#123;</span>            thisweekcore(52);            thisweekcore(51);            thisweekcore(50);            thisweekcore(49);            thisweek2core();            git_amonthago = git_first2date<span class="token punctuation">[</span>git_thisdayindex <span class="token punctuation">-</span> <span class="token number">1</span><span class="token punctuation">]</span>.date        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    function thisweek2core() <span class="token punctuation">&#123;</span>        for (var i = git_thisdayindex <span class="token punctuation">-</span> 1; i &lt; git_first2date.length; i++) <span class="token punctuation">&#123;</span>            git_thisweekdatacore += git_first2date<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.count        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    function thisweekcore(index) <span class="token punctuation">&#123;</span>        for (var item of git_data<span class="token punctuation">[</span>index<span class="token punctuation">]</span>) <span class="token punctuation">&#123;</span>            git_thisweekdatacore += item.count        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    function addlastweek() <span class="token punctuation">&#123;</span>        for (var item of git_lastweek) <span class="token punctuation">&#123;</span>            git_weekdatacore += item.count        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    function addbeforeweek() <span class="token punctuation">&#123;</span>        for (var i = git_thisdayindex; i &lt; git_beforeweek.length; i++) <span class="token punctuation">&#123;</span>            git_weekdatacore += git_beforeweek<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.count        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    function addweek(data) <span class="token punctuation">&#123;</span>        if (git_thisdayindex === 6) <span class="token punctuation">&#123;</span>            git_aweekago = git_lastweek<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.date;            addlastweek()        <span class="token punctuation">&#125;</span> else <span class="token punctuation">&#123;</span>            lastweek = data.contributions<span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span>;            git_aweekago = lastweek<span class="token punctuation">[</span>git_thisdayindex + 1<span class="token punctuation">]</span>.date;            addlastweek();            addbeforeweek()        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    fetch(git_githubapiurl).then(data =<span class="token punctuation">></span> data.json()).then(data =<span class="token punctuation">></span> <span class="token punctuation">&#123;</span>        git_data = data.contributions;        git_total = data.total;        git_first2date = git_data<span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span>;        git_firstdate = git_data<span class="token punctuation">[</span><span class="token number">47</span><span class="token punctuation">]</span>;        git_firstweek = data.contributions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>;        git_lastweek = data.contributions<span class="token punctuation">[</span><span class="token number">52</span><span class="token punctuation">]</span>;        git_beforeweek = data.contributions<span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span>;        git_thisdayindex = git_lastweek.length <span class="token punctuation">-</span> 1;        git_thisday = git_lastweek<span class="token punctuation">[</span>git_thisdayindex<span class="token punctuation">]</span>.date;        git_oneyearbeforeday = git_firstweek<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.date;        git_monthindex = git_thisday.substring(5<span class="token punctuation">,</span> 7) * 1;        git_montharrbefore = git_month.splice(git_monthindex<span class="token punctuation">,</span> 12 <span class="token punctuation">-</span> git_monthindex);        git_monthchange = git_montharrbefore.concat(git_month);        addweek(data);        addlastmonth();        var html = github_main_box(git_monthchange<span class="token punctuation">,</span> git_data<span class="token punctuation">,</span> git_user<span class="token punctuation">,</span> git_color<span class="token punctuation">,</span> git_total<span class="token punctuation">,</span> git_thisweekdatacore<span class="token punctuation">,</span> git_weekdatacore<span class="token punctuation">,</span> git_oneyearbeforeday<span class="token punctuation">,</span> git_thisday<span class="token punctuation">,</span> git_aweekago<span class="token punctuation">,</span> git_amonthago);        append_div_gitcalendar(github_container<span class="token punctuation">,</span> html);        if(document.getElementById('github_loading'))<span class="token punctuation">&#123;</span>            document.getElementById('github_loading').remove()<span class="token punctuation">&#125;</span>;        responsiveChart()    <span class="token punctuation">&#125;</span>).catch(function (error) <span class="token punctuation">&#123;</span>        console.log(error)    <span class="token punctuation">&#125;</span>);      window.addEventListener('resize'<span class="token punctuation">,</span> function () <span class="token punctuation">&#123;</span>        responsiveChart()    <span class="token punctuation">&#125;</span>)    window.addEventListener('scroll'<span class="token punctuation">,</span> function () <span class="token punctuation">&#123;</span>      if (document.querySelector('.gitmessage')) <span class="token punctuation">&#123;</span>        git_tooltip_container.innerHTML = ""    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>)    var git_thiscolor = (color<span class="token punctuation">,</span> x) =<span class="token punctuation">></span> <span class="token punctuation">&#123;</span>        if (x === 0) <span class="token punctuation">&#123;</span>            var i = parseInt(x / 2);            return color<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span> else if (x &lt; 2) <span class="token punctuation">&#123;</span>            return color<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span> else if (x &lt; 20) <span class="token punctuation">&#123;</span>            var i = parseInt(x / 2);            return color<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span> else <span class="token punctuation">&#123;</span>            return color<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>;    var tooltip_html = (x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> span1<span class="token punctuation">,</span> span2) =<span class="token punctuation">></span> <span class="token punctuation">&#123;</span>        var html = '';        <span class="token key atrule">html += '&lt;div class="gitmessage" style="top:' + y + 'px;left:' + x + 'px;position</span><span class="token punctuation">:</span> fixed;z<span class="token punctuation">-</span>index<span class="token punctuation">:</span>9999"<span class="token punctuation">></span>&lt;div class="angle<span class="token punctuation">-</span>wrapper" style="display<span class="token punctuation">:</span>block;"<span class="token punctuation">></span>&lt;span<span class="token punctuation">></span>' + span1 + '<span class="token important">&amp;nbsp;&lt;/span>&lt;span>'</span> + span2 + ' 次上传&lt;/span<span class="token punctuation">></span>&lt;/div<span class="token punctuation">></span>&lt;/div<span class="token punctuation">></span>';        return html    <span class="token punctuation">&#125;</span>;    var github_canvas_box = () =<span class="token punctuation">></span> <span class="token punctuation">&#123;</span>        <span class="token key atrule">var html = '&lt;div id="gitcalendarcanvasbox"> &lt;canvas id="gitcanvas" style="animation</span><span class="token punctuation">:</span> none;"<span class="token punctuation">></span>&lt;/canvas<span class="token punctuation">></span>&lt;/div<span class="token punctuation">></span>';        return html    <span class="token punctuation">&#125;</span>;    var github_info_box = (user<span class="token punctuation">,</span> color) =<span class="token punctuation">></span> <span class="token punctuation">&#123;</span>        var html = '';        html += '&lt;div id="git_tooltip_container"<span class="token punctuation">></span>&lt;/div<span class="token punctuation">></span>&lt;div class="contrib<span class="token punctuation">-</span>footer clearfix mt<span class="token punctuation">-</span>1 mx<span class="token punctuation">-</span>3 px<span class="token punctuation">-</span>3 pb<span class="token punctuation">-</span>1"<span class="token punctuation">></span>&lt;div class="float<span class="token punctuation">-</span>left text<span class="token punctuation">-</span>gray"<span class="token punctuation">></span>数据来源 &lt;a href="https<span class="token punctuation">:</span>//github.com/' + user + '" target="blank"<span class="token punctuation">></span>@' + user + '&lt;/a<span class="token punctuation">></span>&lt;/div<span class="token punctuation">></span>&lt;div class="contrib<span class="token punctuation">-</span>legend text<span class="token punctuation">-</span>gray"<span class="token punctuation">></span>Less &lt;ul class="legend"<span class="token punctuation">></span>&lt;li style="background<span class="token punctuation">-</span>color<span class="token punctuation">:</span>' + color<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> + '"<span class="token punctuation">></span>&lt;/li<span class="token punctuation">></span>&lt;li style="background<span class="token punctuation">-</span>color<span class="token punctuation">:</span>' + color<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> + '"<span class="token punctuation">></span>&lt;/li<span class="token punctuation">></span>&lt;li style="background<span class="token punctuation">-</span>color<span class="token punctuation">:</span>' + color<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> + '"<span class="token punctuation">></span>&lt;/li<span class="token punctuation">></span>&lt;li style="background<span class="token punctuation">-</span>color<span class="token punctuation">:</span>' + color<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> + '"<span class="token punctuation">></span>&lt;/li<span class="token punctuation">></span>&lt;li style="background<span class="token punctuation">-</span>color<span class="token punctuation">:</span>' + color<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> + '"<span class="token punctuation">></span>&lt;/li<span class="token punctuation">></span>&lt;/ul<span class="token punctuation">></span>More &lt;/div<span class="token punctuation">></span>&lt;/div<span class="token punctuation">></span>';        return html    <span class="token punctuation">&#125;</span>;    var github_main_box = (monthchange<span class="token punctuation">,</span> git_data<span class="token punctuation">,</span> user<span class="token punctuation">,</span> color<span class="token punctuation">,</span> total<span class="token punctuation">,</span> thisweekdatacore<span class="token punctuation">,</span> weekdatacore<span class="token punctuation">,</span> oneyearbeforeday<span class="token punctuation">,</span> thisday<span class="token punctuation">,</span> aweekago<span class="token punctuation">,</span> amonthago) =<span class="token punctuation">></span> <span class="token punctuation">&#123;</span>        var html = '';        var canvasbox = github_canvas_box();        var infobox = github_info_box(user<span class="token punctuation">,</span> color);        var style = github_main_style();        html += '&lt;div class="position<span class="token punctuation">-</span>relative"<span class="token punctuation">></span>&lt;div class="border py<span class="token punctuation">-</span>2 graph<span class="token punctuation">-</span>before<span class="token punctuation">-</span>activity<span class="token punctuation">-</span>overview"<span class="token punctuation">></span>&lt;div class="js<span class="token punctuation">-</span>gitcalendar<span class="token punctuation">-</span>graph mx<span class="token punctuation">-</span>md<span class="token punctuation">-</span>2 mx<span class="token punctuation">-</span>3 d<span class="token punctuation">-</span>flex flex<span class="token punctuation">-</span>column flex<span class="token punctuation">-</span>items<span class="token punctuation">-</span>end flex<span class="token punctuation">-</span>xl<span class="token punctuation">-</span>items<span class="token punctuation">-</span>center overflow<span class="token punctuation">-</span>hidden pt<span class="token punctuation">-</span>1 is<span class="token punctuation">-</span>graph<span class="token punctuation">-</span>loading graph<span class="token punctuation">-</span>canvas gitcalendar<span class="token punctuation">-</span>graph height<span class="token punctuation">-</span>full text<span class="token punctuation">-</span>center"<span class="token punctuation">></span>' + canvasbox + '&lt;/div<span class="token punctuation">></span>' + infobox + '&lt;/div<span class="token punctuation">></span>&lt;/div<span class="token punctuation">></span>';        html += '&lt;div style="display<span class="token punctuation">:</span>flex;width<span class="token punctuation">:</span>100%"<span class="token punctuation">></span>&lt;div class="contrib<span class="token punctuation">-</span>column contrib<span class="token punctuation">-</span>column<span class="token punctuation">-</span>first table<span class="token punctuation">-</span>column"<span class="token punctuation">></span>&lt;span class="text<span class="token punctuation">-</span>muted"<span class="token punctuation">></span>过去一年提交&lt;/span<span class="token punctuation">></span>&lt;span class="contrib<span class="token punctuation">-</span>number"<span class="token punctuation">></span>' + total + '&lt;/span<span class="token punctuation">></span>&lt;span class="text<span class="token punctuation">-</span>muted"<span class="token punctuation">></span>' + oneyearbeforeday + '<span class="token important">&amp;nbsp;-&amp;nbsp;'</span> + thisday + '&lt;/span<span class="token punctuation">></span>&lt;/div<span class="token punctuation">></span>&lt;div class="contrib<span class="token punctuation">-</span>column table<span class="token punctuation">-</span>column"<span class="token punctuation">></span>&lt;span class="text<span class="token punctuation">-</span>muted"<span class="token punctuation">></span>最近一月提交&lt;/span<span class="token punctuation">></span>&lt;span class="contrib<span class="token punctuation">-</span>number"<span class="token punctuation">></span>' + thisweekdatacore + '&lt;/span<span class="token punctuation">></span>&lt;span class="text<span class="token punctuation">-</span>muted"<span class="token punctuation">></span>' + amonthago + '<span class="token important">&amp;nbsp;-&amp;nbsp;'</span> + thisday + '&lt;/span<span class="token punctuation">></span>&lt;/div<span class="token punctuation">></span>&lt;div class="contrib<span class="token punctuation">-</span>column table<span class="token punctuation">-</span>column"<span class="token punctuation">></span>&lt;span class="text<span class="token punctuation">-</span>muted"<span class="token punctuation">></span>最近一周提交&lt;/span<span class="token punctuation">></span>&lt;span class="contrib<span class="token punctuation">-</span>number"<span class="token punctuation">></span>' + weekdatacore + '&lt;/span<span class="token punctuation">></span>&lt;span class="text<span class="token punctuation">-</span>muted"<span class="token punctuation">></span>' + aweekago + '<span class="token important">&amp;nbsp;-&amp;nbsp;'</span> + thisday + '&lt;/span<span class="token punctuation">></span>&lt;/div<span class="token punctuation">></span>&lt;/div<span class="token punctuation">></span>' + style;        return html    <span class="token punctuation">&#125;</span>;    var github_main_style = () =<span class="token punctuation">></span> <span class="token punctuation">&#123;</span>        style = '&lt;style<span class="token punctuation">></span><span class="token comment">#github_container&#123;text-align:center;margin:0 auto;width:100%;display:flex;display:-webkit-flex;justify-content:center;align-items:center;flex-wrap:wrap;&#125;.gitcalendar-graph text.wday,.gitcalendar-graph text.month&#123;font-size:10px;fill:#aaa;&#125;.contrib-legend&#123;text-align:right;padding:0 14px 10px 0;display:inline-block;float:right;&#125;.contrib-legend .legend&#123;display:inline-block;list-style:none;margin:0 5px;position:relative;bottom:-1px;padding:0;&#125;.contrib-legend .legend li&#123;display:inline-block;width:10px;height:10px;&#125;.text-small&#123;font-size:12px;color:#767676;&#125;.gitcalendar-graph&#123;padding:15px 0 0;text-align:center;&#125;.contrib-column&#123;text-align:center;border-left:1px solid #ddd;border-top:1px solid #ddd;font-size:11px;&#125;.contrib-column-first&#123;border-left:0;&#125;.table-column&#123;padding:10px;display:table-cell;flex:1;vertical-align:top;&#125;.contrib-number&#123;font-weight:300;line-height:1.3em;font-size:24px;display:block;&#125;.gitcalendar img.spinner&#123;width:70px;margin-top:50px;min-height:70px;&#125;.monospace&#123;text-align:center;color:#000;font-family:monospace;&#125;.monospace a&#123;color:#1D75AB;text-decoration:none;&#125;.contrib-footer&#123;font-size:11px;padding:0 10px 12px;text-align:left;width:100%;box-sizing:border-box;height:26px;&#125;.left.text-muted&#123;float:left;margin-left:9px;color:#767676;&#125;.left.text-muted a&#123;color:#4078c0;text-decoration:none;&#125;.left.text-muted a:hover,.monospace a:hover&#123;text-decoration:underline;&#125;h2.f4.text-normal.mb-3&#123;display:none;&#125;.float-left.text-gray&#123;float:left;&#125;#user-activity-overview&#123;display:none;&#125;.day-tooltip&#123;white-space:nowrap;position:absolute;z-index:99999;padding:10px;font-size:12px;color:#959da5;text-align:center;background:rgba(0,0,0,.85);border-radius:3px;display:none;pointer-events:none;&#125;.day-tooltip strong&#123;color:#dfe2e5;&#125;.day-tooltip.is-visible&#123;display:block;&#125;.day-tooltip:after&#123;position:absolute;bottom:-10px;left:50%;width:5px;height:5px;box-sizing:border-box;margin:0 0 0 -5px;content:" ";border:5px solid transparent;border-top-color:rgba(0,0,0,.85)&#125;.position-relative&#123;width:100%;&#125;@media screen and (max-width:650px)&#123;.contrib-column&#123;display:none&#125;&#125;.angle-wrapper&#123;z-index:9999;display:inline;width:200px;height:40px;position:relative;padding:5px 0;background:rgba(0,0,0,0.8);border-radius:8px;text-align:center;color:white;&#125;.angle-box&#123;position:fixed;padding:10px&#125;.angle-wrapper span&#123;padding-bottom:1em;&#125;.angle-wrapper:before&#123;content:"";width:0;height:0;border:10px solid transparent;border-top-color:rgba(0,0,0,0.8);position:absolute;left:47.5%;top:100%;&#125;&lt;/style>';</span>        return style    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>;var append_div_gitcalendar = (parent<span class="token punctuation">,</span> text) =<span class="token punctuation">></span> <span class="token punctuation">&#123;</span>    if (typeof text === 'string') <span class="token punctuation">&#123;</span>        var temp = document.createElement('div');        temp.innerHTML = text;        var frag = document.createDocumentFragment();        while (temp.firstChild) <span class="token punctuation">&#123;</span>            frag.appendChild(temp.firstChild)        <span class="token punctuation">&#125;</span>        parent.appendChild(frag)    <span class="token punctuation">&#125;</span> else <span class="token punctuation">&#123;</span>        parent.appendChild(text)    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>;var loading_git = (color) =<span class="token punctuation">></span> <span class="token punctuation">&#123;</span>    <span class="token key atrule">loading = '&lt;div id="github_loading" style="width:10%;height:100%;margin:0 auto;display</span><span class="token punctuation">:</span> block"<span class="token punctuation">></span>&lt;svg xmlns="http<span class="token punctuation">:</span>//www.w3.org/2000/svg" xmlns<span class="token punctuation">:</span>xlink="http<span class="token punctuation">:</span>//www.w3.org/1999/xlink"  viewBox="0 0 50 50" style="enable<span class="token punctuation">-</span>background<span class="token punctuation">:</span>new 0 0 50 50" xml<span class="token punctuation">:</span>space="preserve"<span class="token punctuation">></span>&lt;path fill="' + color + '" d="M25.251<span class="token punctuation">,</span>6.461c<span class="token punctuation">-</span><span class="token number">10.318</span><span class="token punctuation">,</span>0<span class="token punctuation">-</span><span class="token number">18.683</span><span class="token punctuation">,</span>8.365<span class="token punctuation">-</span><span class="token number">18.683</span><span class="token punctuation">,</span>18.683h4.068c0<span class="token punctuation">-</span><span class="token number">8.071</span><span class="token punctuation">,</span>6.543<span class="token punctuation">-</span><span class="token number">14.615</span><span class="token punctuation">,</span>14.615<span class="token punctuation">-</span>14.615V6.461z" transform="rotate(275.098 25 25)"<span class="token punctuation">></span>&lt;animateTransform attributeType="xml" attributeName="transform" type="rotate" from="0 25 25" to="360 25 25" dur="0.6s" repeatCount="indefinite"<span class="token punctuation">></span>&lt;/animateTransform<span class="token punctuation">></span>&lt;/path<span class="token punctuation">></span>&lt;/svg<span class="token punctuation">></span>&lt;/div<span class="token punctuation">></span>';    return loading<span class="token punctuation">&#125;</span>;(function()<span class="token punctuation">&#123;</span>    var git_user = 'yuang01'; // 这里更改为你的github 用户名    var github_container = document.getElementById('github_container');    var github_loading = document.getElementById('github_loading');    var git_purple = <span class="token punctuation">[</span><span class="token string">'#ebedf0'</span><span class="token punctuation">,</span> <span class="token string">'#fdcdec'</span><span class="token punctuation">,</span> <span class="token string">'#fc9bd9'</span><span class="token punctuation">,</span> <span class="token string">'#fa6ac5'</span><span class="token punctuation">,</span> <span class="token string">'#f838b2'</span><span class="token punctuation">,</span> <span class="token string">'#f5089f'</span><span class="token punctuation">,</span> <span class="token string">'#c4067e'</span><span class="token punctuation">,</span> <span class="token string">'#92055e'</span><span class="token punctuation">,</span> <span class="token string">'#540336'</span><span class="token punctuation">,</span> <span class="token string">'#48022f'</span><span class="token punctuation">,</span> <span class="token string">'#30021f'</span><span class="token punctuation">,</span><span class="token punctuation">]</span>;    var git_green = <span class="token punctuation">[</span><span class="token string">'#ebedf0'</span><span class="token punctuation">,</span> <span class="token string">'#f0fff4'</span><span class="token punctuation">,</span> <span class="token string">'#dcffe4'</span><span class="token punctuation">,</span> <span class="token string">'#bef5cb'</span><span class="token punctuation">,</span> <span class="token string">'#85e89d'</span><span class="token punctuation">,</span> <span class="token string">'#34d058'</span><span class="token punctuation">,</span> <span class="token string">'#28a745'</span><span class="token punctuation">,</span> <span class="token string">'#22863a'</span><span class="token punctuation">,</span> <span class="token string">'#176f2c'</span><span class="token punctuation">,</span> <span class="token string">'#165c26'</span><span class="token punctuation">,</span> <span class="token string">'#144620'</span><span class="token punctuation">]</span>;    var git_blue = <span class="token punctuation">[</span><span class="token string">'#ebedf0'</span><span class="token punctuation">,</span> <span class="token string">'#f1f8ff'</span><span class="token punctuation">,</span> <span class="token string">'#dbedff'</span><span class="token punctuation">,</span> <span class="token string">'#c8e1ff'</span><span class="token punctuation">,</span> <span class="token string">'#79b8ff'</span><span class="token punctuation">,</span> <span class="token string">'#2188ff'</span><span class="token punctuation">,</span> <span class="token string">'#0366d6'</span><span class="token punctuation">,</span> <span class="token string">'#005cc5'</span><span class="token punctuation">,</span> <span class="token string">'#044289'</span><span class="token punctuation">,</span> <span class="token string">'#032f62'</span><span class="token punctuation">,</span> <span class="token string">'#05264c'</span><span class="token punctuation">,</span><span class="token punctuation">]</span>;    var git_color = git_green;    if (github_container) <span class="token punctuation">&#123;</span>      append_div_gitcalendar(github_container<span class="token punctuation">,</span> loading_git(git_color<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>));      github_canlendar(git_user<span class="token punctuation">,</span> git_color)    <span class="token punctuation">&#125;</span> else <span class="token punctuation">&#123;</span>      console.log('nonono');    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>)()    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>              </div>            </details><p>将 270行的<code>git_user</code>改为你自己的用户名<br>然后在 自定义侧边栏的home_widget(_data/widget.yaml文件)中写入以下内容:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">home_widget</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">class_name</span><span class="token punctuation">:</span> my_github_container    <span class="token key atrule">id_name</span><span class="token punctuation">:</span> my_github_container    <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token number">-1</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> 测试日历    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>envelope    <span class="token key atrule">icon_color</span><span class="token punctuation">:</span> blue    <span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//baidu.com    <span class="token key atrule">background</span><span class="token punctuation">:</span> <span class="token string">'#fff'</span>    <span class="token key atrule">html</span><span class="token punctuation">:</span> '      &lt;div id="github_container"<span class="token punctuation">></span>&lt;/div<span class="token punctuation">></span>      &lt;script data<span class="token punctuation">-</span>pjax src="/githubcalendar/index.js"<span class="token punctuation">></span>&lt;/script<span class="token punctuation">></span>    '<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后就会在首页出现github日历图</p><h3 id="添加IP签名档"><a href="#添加IP签名档" class="headerlink" title="添加IP签名档"></a>添加IP签名档</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">home_widget</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">class_name</span><span class="token punctuation">:</span> welcome    <span class="token key atrule">id_name</span><span class="token punctuation">:</span> welcome    <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token number">-1</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> 欢迎    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>envelope    <span class="token key atrule">icon_color</span><span class="token punctuation">:</span> blue    <span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//baidu.com    <span class="token key atrule">background</span><span class="token punctuation">:</span> <span class="token string">'#fff'</span>    <span class="token key atrule">html</span><span class="token punctuation">:</span> <span class="token string">'&lt;img src="https://api.amogu.cn/api/ipimg/" style="width:100%">'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加轮播图"><a href="#添加轮播图" class="headerlink" title="添加轮播图"></a>添加轮播图</h3><p>同样在<code>source</code>文件夹下创建<code>mySwiper/index.js</code>和<code>mySwiper/index.css</code>文件，然后创建<code>mySwiper/img</code>文件夹，用于存放图片，轮播图嘛，肯定要图片。</p><details green><summary pointer> mySwiper/index.js </summary>              <div class='content'>              <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">// 如果想变换轮播方式等，进阶的话，可以看这个 https<span class="token punctuation">:</span>//github.surmon.me/vue<span class="token punctuation">-</span>awesome<span class="token punctuation">-</span>swiper/// 当然你也可以引入jquery插件，都可以的<span class="token punctuation">,</span> 不只是轮播图，其他特效也可以new Vue(<span class="token punctuation">&#123;</span>  <span class="token key atrule">el</span><span class="token punctuation">:</span> <span class="token string">"#mySwiper"</span><span class="token punctuation">,</span>  <span class="token key atrule">data</span><span class="token punctuation">:</span> function () <span class="token punctuation">&#123;</span>    return <span class="token punctuation">&#123;</span>      <span class="token key atrule">swiperOption</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token key atrule">direction</span><span class="token punctuation">:</span> <span class="token string">"vertical"</span><span class="token punctuation">,</span> // 这个是竖着的        <span class="token key atrule">slidesPerView</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token key atrule">spaceBetween</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>        <span class="token key atrule">mousewheel</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token punctuation">,</span>        // 注释上面的四个，则水平方向轮播        <span class="token key atrule">pagination</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>          <span class="token key atrule">el</span><span class="token punctuation">:</span> <span class="token string">".swiper-pagination"</span><span class="token punctuation">,</span>          <span class="token key atrule">clickable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        // 注释掉上面这个，则不显示小点点        <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token punctuation">,</span> // 循环        <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>          <span class="token key atrule">delay</span><span class="token punctuation">:</span> <span class="token number">2500</span><span class="token punctuation">,</span>          <span class="token key atrule">disableOnInteraction</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> // 自动播放<span class="token punctuation">,</span>注释掉则不自动播放        <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>          <span class="token key atrule">init</span><span class="token punctuation">:</span> function () <span class="token punctuation">&#123;</span>            swiperAnimateCache(this); //隐藏动画元素            swiperAnimate(this); //初始化完成开始动画          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token key atrule">slideChangeTransitionEnd</span><span class="token punctuation">:</span> function () <span class="token punctuation">&#123;</span>            swiperAnimate(this); //每个slide切换结束时也运行当前slide动画          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        // or data<span class="token punctuation">-</span>swiper<span class="token punctuation">-</span>parallax="<span class="token punctuation">-</span>100"        // 上面是文字动画效果，注释则取消文字动画，动画效果参见 https<span class="token punctuation">:</span>//www.swiper.com.cn/usage/animate/index.html      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>;  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token key atrule">computed</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>    swiper() <span class="token punctuation">&#123;</span>      return this.$refs.myswiper.$swiper;    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token key atrule">methods</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>    // 鼠标移入停止轮播    stopAutoPlay() <span class="token punctuation">&#123;</span>      this.swiperOption.autoplay <span class="token important">&amp;&amp;</span> this.swiper.autoplay.stop();    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    // 鼠标移出开始轮播    startAutoPlay() <span class="token punctuation">&#123;</span>      this.swiperOption.autoplay <span class="token important">&amp;&amp;</span> this.swiper.autoplay.start();    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>              </div>            </details><details cyan><summary pointer> mySwiper/index.css </summary>              <div class='content'>              <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">.myswiper .swiper<span class="token punctuation">-</span>slide <span class="token punctuation">&#123;</span>    <span class="token key atrule">position</span><span class="token punctuation">:</span> relative;<span class="token punctuation">&#125;</span>.myswiper .swiper<span class="token punctuation">-</span>slide p <span class="token punctuation">&#123;</span>    <span class="token key atrule">position</span><span class="token punctuation">:</span> absolute;    <span class="token key atrule">font-size</span><span class="token punctuation">:</span> 18px;    <span class="token key atrule">top</span><span class="token punctuation">:</span> 50px;    <span class="token key atrule">left</span><span class="token punctuation">:</span> 10px;    <span class="token key atrule">z-index</span><span class="token punctuation">:</span> 9999;    <span class="token key atrule">color</span><span class="token punctuation">:</span> <span class="token comment">#fff;</span><span class="token punctuation">&#125;</span>.myswiper .swiper<span class="token punctuation">-</span>slide a.toPath <span class="token punctuation">&#123;</span>    <span class="token key atrule">display</span><span class="token punctuation">:</span> block;    <span class="token key atrule">width</span><span class="token punctuation">:</span> 100%;    <span class="token key atrule">height</span><span class="token punctuation">:</span> 100%;<span class="token punctuation">&#125;</span>.myswiper .swiper<span class="token punctuation">-</span>slide h2 <span class="token punctuation">&#123;</span>    <span class="token key atrule">position</span><span class="token punctuation">:</span> absolute;    <span class="token key atrule">top</span><span class="token punctuation">:</span> 10px;    <span class="token key atrule">left</span><span class="token punctuation">:</span> 10px;    <span class="token key atrule">z-index</span><span class="token punctuation">:</span> 9999;    <span class="token key atrule">color</span><span class="token punctuation">:</span> <span class="token comment">#fff;</span>    <span class="token key atrule">font-size</span><span class="token punctuation">:</span> 24px;<span class="token punctuation">&#125;</span>.myswiper .swiper<span class="token punctuation">-</span>slide img <span class="token punctuation">&#123;</span>    <span class="token key atrule">filter</span><span class="token punctuation">:</span> brightness(0.8); /* 图片变暗 <span class="token punctuation">,</span>字体看得清 <span class="token important">*/</span><span class="token punctuation">&#125;</span>.myswiper.swiper<span class="token punctuation">-</span>container<span class="token punctuation">-</span>vertical .swiper<span class="token punctuation">-</span>pagination<span class="token punctuation">-</span>bullet<span class="token punctuation">-</span>active <span class="token punctuation">&#123;</span>    <span class="token key atrule">height</span><span class="token punctuation">:</span> 30px;    <span class="token key atrule">border-radius</span><span class="token punctuation">:</span> 10px;    <span class="token key atrule">transition</span><span class="token punctuation">:</span> all 0.3s;<span class="token punctuation">&#125;</span>/* 暗黑模式样式在  .darkModel <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>  类下 <span class="token important">*/</span>/* 例如     .darkModel .aaa <span class="token punctuation">&#123;</span>        <span class="token key atrule">color</span><span class="token punctuation">:</span> <span class="token comment">#c9d1d9;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token important">*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>              </div>            </details><p>最后在自定义侧边栏的<code>home_widget</code>写上</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">home_widget</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">class_name</span><span class="token punctuation">:</span> test2_swiper    <span class="token key atrule">id_name</span><span class="token punctuation">:</span> test2_swiper    <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token number">-1</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> 测试轮播图    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>envelope    <span class="token key atrule">icon_color</span><span class="token punctuation">:</span> blue    <span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//baidu.com    <span class="token key atrule">background</span><span class="token punctuation">:</span> <span class="token string">'#fff'</span>    <span class="token key atrule">html</span><span class="token punctuation">:</span> '    &lt;div id="mySwiper" @mouseenter="stopAutoPlay()" @mouseleave="startAutoPlay()"<span class="token punctuation">></span>      &lt;swiper class="myswiper" ref="myswiper" style="height<span class="token punctuation">:</span>350px;" <span class="token punctuation">:</span>options="swiperOption"<span class="token punctuation">></span>        &lt;swiper<span class="token punctuation">-</span>slide<span class="token punctuation">></span>          &lt;a href="http<span class="token punctuation">:</span>//baidu.com" class="toPath"<span class="token punctuation">></span>            <span class="token key atrule">&lt;img class="no-lazy" src="/mySwiper/img/2.jpg" style="width:100%;height:100%;object-fit</span><span class="token punctuation">:</span> cover;"<span class="token punctuation">></span>            &lt;h2 class="ani" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>effect="fadeInDown" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>duration="0.5s" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>delay="0.3s"<span class="token punctuation">></span>我是标题&lt;/h2<span class="token punctuation">></span>            &lt;p class="ani" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>effect="fadeInDown" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>duration="0.5s" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>delay="0.3s"<span class="token punctuation">></span>我是描述哦&lt;/p<span class="token punctuation">></span>          &lt;/a<span class="token punctuation">></span>        &lt;/swiper<span class="token punctuation">-</span>slide<span class="token punctuation">></span>        &lt;swiper<span class="token punctuation">-</span>slide<span class="token punctuation">></span>          &lt;a href="http<span class="token punctuation">:</span>//baidu.com" class="toPath"<span class="token punctuation">></span>            <span class="token key atrule">&lt;img class="no-lazy" src="/mySwiper/img/3.jpg" style="width:100%;height:100%;object-fit</span><span class="token punctuation">:</span> cover;"<span class="token punctuation">></span>            &lt;h2 class="ani" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>effect="fadeInDown" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>duration="0.5s" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>delay="0.3s"<span class="token punctuation">></span>我是标题2&lt;/h2<span class="token punctuation">></span>            &lt;p class="ani" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>effect="fadeInDown" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>duration="0.5s" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>delay="0.3s"<span class="token punctuation">></span>我是描述2&lt;/p<span class="token punctuation">></span>          &lt;/a<span class="token punctuation">></span>        &lt;/swiper<span class="token punctuation">-</span>slide<span class="token punctuation">></span>        &lt;swiper<span class="token punctuation">-</span>slide<span class="token punctuation">></span>          &lt;a href="http<span class="token punctuation">:</span>//baidu.com" class="toPath"<span class="token punctuation">></span>            <span class="token key atrule">&lt;img class="no-lazy" src="/mySwiper/img/4.jpg" style="width:100%;height:100%;object-fit</span><span class="token punctuation">:</span> cover;"<span class="token punctuation">></span>            &lt;h2 class="ani" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>effect="fadeInDown" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>duration="0.5s" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>delay="0.3s"<span class="token punctuation">></span>我是标题3&lt;/h2<span class="token punctuation">></span>            &lt;p class="ani" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>effect="fadeInDown" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>duration="0.5s" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>delay="0.3s"<span class="token punctuation">></span>我是描述3&lt;/p<span class="token punctuation">></span>          &lt;/a<span class="token punctuation">></span>        &lt;/swiper<span class="token punctuation">-</span>slide<span class="token punctuation">></span>        &lt;swiper<span class="token punctuation">-</span>slide<span class="token punctuation">></span>          &lt;a href="http<span class="token punctuation">:</span>//baidu.com" class="toPath"<span class="token punctuation">></span>            <span class="token key atrule">&lt;img class="no-lazy" src="/mySwiper/img/5.jpg" style="width:100%;height:100%;object-fit</span><span class="token punctuation">:</span> cover;"<span class="token punctuation">></span>            &lt;h2 class="ani" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>effect="fadeInDown" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>duration="0.5s" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>delay="0.3s"<span class="token punctuation">></span>我是标题4&lt;/h2<span class="token punctuation">></span>            &lt;p class="ani" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>effect="fadeInDown" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>duration="0.5s" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>delay="0.3s"<span class="token punctuation">></span>我是描述4&lt;/p<span class="token punctuation">></span>          &lt;/a<span class="token punctuation">></span>        &lt;/swiper<span class="token punctuation">-</span>slide<span class="token punctuation">></span>        &lt;swiper<span class="token punctuation">-</span>slide<span class="token punctuation">></span>          &lt;a href="http<span class="token punctuation">:</span>//baidu.com" class="toPath"<span class="token punctuation">></span>            <span class="token key atrule">&lt;img class="no-lazy" src="https://api.dujin.org/pic/ghibli/" style="width:100%;height:100%;object-fit</span><span class="token punctuation">:</span> cover;"<span class="token punctuation">></span>            &lt;h2 class="ani" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>effect="fadeInDown" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>duration="0.5s" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>delay="0.3s"<span class="token punctuation">></span>我是标题5&lt;/h2<span class="token punctuation">></span>            &lt;p class="ani" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>effect="fadeInDown" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>duration="0.5s" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>delay="0.3s"<span class="token punctuation">></span>我是描述5&lt;/p<span class="token punctuation">></span>          &lt;/a<span class="token punctuation">></span>        &lt;/swiper<span class="token punctuation">-</span>slide<span class="token punctuation">></span>        &lt;swiper<span class="token punctuation">-</span>slide<span class="token punctuation">></span>          &lt;a href="http<span class="token punctuation">:</span>//baidu.com" class="toPath"<span class="token punctuation">></span>            <span class="token key atrule">&lt;img class="no-lazy" src="/mySwiper/img/7.jpg" style="width:100%;height:100%;object-fit</span><span class="token punctuation">:</span> cover;"<span class="token punctuation">></span>            &lt;h2 class="ani" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>effect="fadeInDown" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>duration="0.5s" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>delay="0.3s"<span class="token punctuation">></span>我是标题6&lt;/h2<span class="token punctuation">></span>            &lt;p class="ani" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>effect="fadeInDown" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>duration="0.5s" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>delay="0.3s"<span class="token punctuation">></span>我是描述6&lt;/p<span class="token punctuation">></span>          &lt;/a<span class="token punctuation">></span>        &lt;/swiper<span class="token punctuation">-</span>slide<span class="token punctuation">></span>        &lt;<span class="token tag">!--</span> 如果你想继续增加轮播图，继续在下面写&lt;swiper<span class="token punctuation">-</span>slide<span class="token punctuation">></span>我是内容&lt;/swiper<span class="token punctuation">-</span>slide<span class="token punctuation">></span>就行了 <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span><span class="token scalar string">        &lt;div class="swiper-pagination" slot="pagination">&lt;/div></span>      &lt;/swiper<span class="token punctuation">></span>    &lt;/div<span class="token punctuation">></span>    &lt;script src="/mySwiper/index.js"<span class="token punctuation">></span>&lt;/script<span class="token punctuation">></span>    &lt;link href="/mySwiper/index.css" rel="stylesheet"<span class="token punctuation">></span>    '<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，请自行修改a链接地址和图片地址和标题名称和描述</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper-slide</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toPath<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- a链接地址 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no-lazy<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/mySwiper/img/2.jpg<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span><span class="token property">object-fit</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 图片地址 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ani<span class="token punctuation">"</span></span> <span class="token attr-name">swiper-animate-effect</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fadeInDown<span class="token punctuation">"</span></span> <span class="token attr-name">swiper-animate-duration</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.5s<span class="token punctuation">"</span></span> <span class="token attr-name">swiper-animate-delay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.3s<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- 修改标题名称 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ani<span class="token punctuation">"</span></span> <span class="token attr-name">swiper-animate-effect</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fadeInDown<span class="token punctuation">"</span></span> <span class="token attr-name">swiper-animate-duration</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.5s<span class="token punctuation">"</span></span> <span class="token attr-name">swiper-animate-delay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.3s<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是描述哦<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- 修改描述 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper-slide</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你想加轮播图或者删除轮播图，则增加或者删除上面这个模块就行了，这样，一个轮播图就放在了首页。</p><h3 id="横向滚动特效"><a href="#横向滚动特效" class="headerlink" title="横向滚动特效"></a>横向滚动特效</h3><p>首先需要在source文件夹下创建bli/index.js和bli/index.css文件</p><details green><summary pointer> bli/index.js </summary>              <div class='content'>              <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">// 主题已经默认cdn引入了vue<span class="token punctuation">-</span>seamless<span class="token punctuation">-</span>scroll插件// https<span class="token punctuation">:</span>//chenxuan0000.github.io/vue<span class="token punctuation">-</span>seamless<span class="token punctuation">-</span>scroll/zh/guide/01<span class="token punctuation">-</span>basic.htmlnew Vue(<span class="token punctuation">&#123;</span>  <span class="token key atrule">el</span><span class="token punctuation">:</span> <span class="token string">"#myBli"</span><span class="token punctuation">,</span> <span class="token key atrule">// el不要是最外面的id_name，应该是html</span><span class="token punctuation">:</span> ''里的div的id  <span class="token key atrule">data</span><span class="token punctuation">:</span> function () <span class="token punctuation">&#123;</span>    return <span class="token punctuation">&#123;</span>      <span class="token key atrule">content</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token key atrule">listData</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token key atrule">classOption</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token key atrule">limitMoveNum</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token key atrule">direction</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>;  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token key atrule">methods</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>              </div>            </details><details green><summary pointer> bli/index.css </summary>              <div class='content'>              <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#myBli .warp &#123;</span>  <span class="token key atrule">width</span><span class="token punctuation">:</span> 100%;  <span class="token key atrule">height</span><span class="token punctuation">:</span> 120px;  <span class="token key atrule">margin</span><span class="token punctuation">:</span> 0 auto;  <span class="token key atrule">overflow</span><span class="token punctuation">:</span> hidden;<span class="token punctuation">&#125;</span><span class="token comment">#myBli .warp ul &#123;</span>  <span class="token key atrule">list-style</span><span class="token punctuation">:</span> none;  <span class="token key atrule">padding</span><span class="token punctuation">:</span> 0;  <span class="token key atrule">margin</span><span class="token punctuation">:</span> 0 auto;<span class="token punctuation">&#125;</span><span class="token comment">#myBli .warp ul.ul-item &#123;</span>  <span class="token key atrule">display</span><span class="token punctuation">:</span> flex;<span class="token punctuation">&#125;</span><span class="token comment">#myBli .warp ul.ul-item .li-item &#123;</span>  <span class="token key atrule">width</span><span class="token punctuation">:</span> 120px;  <span class="token key atrule">display</span><span class="token punctuation">:</span> block;  <span class="token key atrule">height</span><span class="token punctuation">:</span> 120px;  <span class="token key atrule">margin-right</span><span class="token punctuation">:</span> 10px;  <span class="token key atrule">line-height</span><span class="token punctuation">:</span> 120px;  <span class="token key atrule">background-color</span><span class="token punctuation">:</span> <span class="token comment">#999;</span>  <span class="token key atrule">color</span><span class="token punctuation">:</span> <span class="token comment">#fff;</span>  <span class="token key atrule">text-align</span><span class="token punctuation">:</span> center;  <span class="token key atrule">font-size</span><span class="token punctuation">:</span> 30px;<span class="token punctuation">&#125;</span><span class="token comment">#myBli .warp ul.ul-item img &#123;</span>  <span class="token key atrule">width</span><span class="token punctuation">:</span> 100%;  <span class="token key atrule">height</span><span class="token punctuation">:</span> 100%;  <span class="token key atrule">object-fit</span><span class="token punctuation">:</span> cover;<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>              </div>            </details><p>最后在自定义侧边栏的home_widget中加入以下内容:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">home_widget</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">class_name</span><span class="token punctuation">:</span> mybilibili    <span class="token key atrule">id_name</span><span class="token punctuation">:</span> mybilibili    <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token number">-1</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> 测试bli    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>envelope    <span class="token key atrule">icon_color</span><span class="token punctuation">:</span> blue    <span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//baidu.com    <span class="token key atrule">background</span><span class="token punctuation">:</span> <span class="token string">'#fff'</span>    <span class="token key atrule">html</span><span class="token punctuation">:</span> '      &lt;div id="myBli"<span class="token punctuation">></span>        &lt;vue<span class="token punctuation">-</span>seamless<span class="token punctuation">-</span>scroll          <span class="token punctuation">:</span>data="listData"          <span class="token punctuation">:</span>class<span class="token punctuation">-</span>option="classOption"          class="warp"        <span class="token punctuation">></span>          &lt;ul class="ul<span class="token punctuation">-</span>item" style="width<span class="token punctuation">:</span>720px;"<span class="token punctuation">></span>            &lt;<span class="token tag">!--</span> 在这里改<span class="token punctuation">,</span> 手动修改a连接的href值和img的src值<span class="token punctuation">,</span> 如果你会进阶，你可以使用v<span class="token punctuation">-</span>for<span class="token punctuation">,</span> 或者数据使用动态数据<span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span>                        &lt;li class="li<span class="token punctuation">-</span>item"<span class="token punctuation">></span>              &lt;a href="http<span class="token punctuation">:</span>//baidu.com"<span class="token punctuation">></span>                &lt;img class="no<span class="token punctuation">-</span>lazy" src="https<span class="token punctuation">:</span>//pic4.zhimg.com/80/v2<span class="token punctuation">-</span>f549722dac8f777693c090a92498de0f_1440w.jpg"<span class="token punctuation">></span>              &lt;/a<span class="token punctuation">></span>            &lt;/li<span class="token punctuation">></span>            &lt;li class="li<span class="token punctuation">-</span>item"<span class="token punctuation">></span>              &lt;a href="http<span class="token punctuation">:</span>//baidu.com"<span class="token punctuation">></span>                &lt;img class="no<span class="token punctuation">-</span>lazy" src="https<span class="token punctuation">:</span>//pic4.zhimg.com/80/v2<span class="token punctuation">-</span>f549722dac8f777693c090a92498de0f_1440w.jpg"<span class="token punctuation">></span>              &lt;/a<span class="token punctuation">></span>            &lt;/li<span class="token punctuation">></span>            &lt;li class="li<span class="token punctuation">-</span>item"<span class="token punctuation">></span>              &lt;a href="http<span class="token punctuation">:</span>//baidu.com"<span class="token punctuation">></span>                &lt;img class="no<span class="token punctuation">-</span>lazy" src="https<span class="token punctuation">:</span>//pic4.zhimg.com/80/v2<span class="token punctuation">-</span>f549722dac8f777693c090a92498de0f_1440w.jpg"<span class="token punctuation">></span>              &lt;/a<span class="token punctuation">></span>            &lt;/li<span class="token punctuation">></span>            &lt;li class="li<span class="token punctuation">-</span>item"<span class="token punctuation">></span>              &lt;a href="http<span class="token punctuation">:</span>//baidu.com"<span class="token punctuation">></span>                &lt;img class="no<span class="token punctuation">-</span>lazy" src="https<span class="token punctuation">:</span>//pic4.zhimg.com/80/v2<span class="token punctuation">-</span>f549722dac8f777693c090a92498de0f_1440w.jpg"<span class="token punctuation">></span>              &lt;/a<span class="token punctuation">></span>            &lt;/li<span class="token punctuation">></span>            &lt;li class="li<span class="token punctuation">-</span>item"<span class="token punctuation">></span>              &lt;a href="http<span class="token punctuation">:</span>//baidu.com"<span class="token punctuation">></span>                &lt;img class="no<span class="token punctuation">-</span>lazy" src="https<span class="token punctuation">:</span>//pic4.zhimg.com/80/v2<span class="token punctuation">-</span>f549722dac8f777693c090a92498de0f_1440w.jpg"<span class="token punctuation">></span>              &lt;/a<span class="token punctuation">></span>            &lt;/li<span class="token punctuation">></span>            &lt;li class="li<span class="token punctuation">-</span>item"<span class="token punctuation">></span>              &lt;a href="http<span class="token punctuation">:</span>//baidu.com"<span class="token punctuation">></span>                &lt;img class="no<span class="token punctuation">-</span>lazy" src="https<span class="token punctuation">:</span>//pic4.zhimg.com/80/v2<span class="token punctuation">-</span>f549722dac8f777693c090a92498de0f_1440w.jpg"<span class="token punctuation">></span>              &lt;/a<span class="token punctuation">></span>            &lt;/li<span class="token punctuation">></span>            &lt;<span class="token tag">!--</span> 在这里结束 <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span><span class="token scalar string">          &lt;/ul></span>        &lt;/vue<span class="token punctuation">-</span>seamless<span class="token punctuation">-</span>scroll<span class="token punctuation">></span>      &lt;/div<span class="token punctuation">></span>      &lt;script src="/bli/index.js"<span class="token punctuation">></span>&lt;/script<span class="token punctuation">></span>      &lt;link href="/bli/index.css" rel="stylesheet"<span class="token punctuation">></span>    '<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样，自行修改上面a标签的链接和图片地址，至此横向滚动特效完成。</p><blockquote><p>注意，使用vue写法的话，图片需要带上class=”no-lazy”，否则可能加载不出来，，js原生或者jquery不需要带</p></blockquote><h3 id="侧边栏增加微博热搜"><a href="#侧边栏增加微博热搜" class="headerlink" title="侧边栏增加微博热搜"></a>侧边栏增加微博热搜</h3><p>同样同样，在source文件夹下创建weibo/index.js和weibo/index.css文件</p><details green><summary pointer> weibo/index.js </summary>              <div class='content'>              <pre class="line-numbers language-html" data-language="html"><code class="language-html">new Vue(&#123;  el: "#myWeibo", // el不要是最外面的id_name，应该是html: ''里的div的id  data: function () &#123;    return &#123;      content: [],      classOption: &#123;        singleHeight: 30,      &#125;,    &#125;;  &#125;,  created() &#123;    this.getWeiboList();  &#125;,  methods: &#123;    // 请求开源api, 获取历史上的今天数据    getWeiboList() &#123;      fetch("https://tenapi.cn/resou/", &#123;        method: "GET", // *GET, POST, PUT, DELETE, etc.      &#125;)        .then((res) => &#123;          return res.json();        &#125;)        .then((data) => &#123;          this.content = data.list;        &#125;)        .catch((err) => &#123;          console.log("err", err);        &#125;);    &#125;,  &#125;,&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>              </div>            </details><details green><summary pointer> weibo/index.css </summary>              <div class='content'>              <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.weibo-container</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.weibo-container .left</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.weibo-container .name</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span>    <span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span>    <span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#myWeibo .warp</span> <span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.weibo-container .order</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #fe962e<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.weibo-container .name a</span><span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.weibo-container .name a:hover</span> <span class="token punctuation">&#123;</span>    <span class="token property">text-decoration</span><span class="token punctuation">:</span> underline<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.weibo-container .red</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>              </div>            </details><p>最后在自定义侧边栏的widget_library_sticky或者widget_library中加入html,</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">widget_library_sticky</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">class_name</span><span class="token punctuation">:</span> testWidget    <span class="token key atrule">id_name</span><span class="token punctuation">:</span> testWidget    <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token number">-1</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> 微博热搜    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fab fa<span class="token punctuation">-</span>weibo    <span class="token key atrule">icon_color</span><span class="token punctuation">:</span> <span class="token string">'#d63130'</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//baidu.com    <span class="token key atrule">background</span><span class="token punctuation">:</span> <span class="token string">'#fff'</span>    <span class="token key atrule">html</span><span class="token punctuation">:</span> '      &lt;div id="myWeibo"<span class="token punctuation">></span>      &lt;<span class="token tag">!--</span> 如果不要滚动，则去掉 vue<span class="token punctuation">-</span>seamless<span class="token punctuation">-</span>scroll标签就行了，这个插件使用cdn向左向右滚动好像有问题 <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span>        &lt;vue<span class="token punctuation">-</span>seamless<span class="token punctuation">-</span>scroll          <span class="token punctuation">:</span>data="content"          <span class="token punctuation">:</span>class<span class="token punctuation">-</span>option="classOption"          class="warp"        <span class="token punctuation">></span>          &lt;div class="weibo<span class="token punctuation">-</span>container" v<span class="token punctuation">-</span>for="(item<span class="token punctuation">,</span> index) in content" <span class="token punctuation">:</span>key="index"<span class="token punctuation">></span>            &lt;div class="left"<span class="token punctuation">></span>              &lt;div class="order" <span class="token punctuation">:</span>class="<span class="token punctuation">&#123;</span> <span class="token key atrule">red</span><span class="token punctuation">:</span> index&lt;=2 <span class="token punctuation">&#125;</span>"<span class="token punctuation">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>index + 1<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>&lt;/div<span class="token punctuation">></span>              &lt;div class="name"<span class="token punctuation">></span>&lt;a <span class="token punctuation">:</span>href="item.url" target="_blank"<span class="token punctuation">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>item.name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>&lt;/a<span class="token punctuation">></span>&lt;/div<span class="token punctuation">></span>            &lt;/div<span class="token punctuation">></span>            &lt;div class="hot"<span class="token punctuation">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>item.hot<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>&lt;/div<span class="token punctuation">></span>          &lt;/div<span class="token punctuation">></span>        &lt;/vue<span class="token punctuation">-</span>seamless<span class="token punctuation">-</span>scroll<span class="token punctuation">></span>      &lt;/div<span class="token punctuation">></span>      &lt;script src="/weibo/index.js"<span class="token punctuation">></span>&lt;/script<span class="token punctuation">></span>      &lt;link href="/weibo/index.css" rel="stylesheet"<span class="token punctuation">></span>    '<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，热搜侧边栏也弄好了，如果不要热搜榜滚动的话，自己去掉<vue-seamless-scroll></vue-seamless-scroll>这个html标签就行了</p><h3 id="历史上的今天"><a href="#历史上的今天" class="headerlink" title="历史上的今天"></a>历史上的今天</h3><p>嘿嘿，同样要在source文件夹下创建historyToday/index.js文件</p><details ><summary pointer> historyToday/index.js </summary>              <div class='content'>              <p>又是vue.js写的，无所谓，不需要看懂, 复制粘贴就行</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">// 如果想变换轮播方式等，进阶的话，可以看这个 https<span class="token punctuation">:</span>//github.surmon.me/vue<span class="token punctuation">-</span>awesome<span class="token punctuation">-</span>swiper/// 当然你也可以引入jquery插件，都可以的<span class="token punctuation">,</span> 不只是轮播图，其他特效也可以new Vue(<span class="token punctuation">&#123;</span>  <span class="token key atrule">el</span><span class="token punctuation">:</span> <span class="token string">"#myHistorySwiper"</span><span class="token punctuation">,</span> <span class="token key atrule">// el不要是最外面的id_name，应该是html</span><span class="token punctuation">:</span> ''里的div的id  <span class="token key atrule">data</span><span class="token punctuation">:</span> function () <span class="token punctuation">&#123;</span>    return <span class="token punctuation">&#123;</span>      <span class="token key atrule">swiperOption</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token key atrule">effect</span><span class="token punctuation">:</span> <span class="token string">"cube"</span><span class="token punctuation">,</span> // 轮播特效        <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token punctuation">,</span> // 循环        <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>          <span class="token key atrule">delay</span><span class="token punctuation">:</span> <span class="token number">2500</span><span class="token punctuation">,</span>          <span class="token key atrule">disableOnInteraction</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token key atrule">content</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>;  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token key atrule">computed</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>    swiper() <span class="token punctuation">&#123;</span>      return this.$refs.myhistoryswiper.$swiper;    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  created() <span class="token punctuation">&#123;</span>    this.getHistoryList();  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token key atrule">methods</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>    // 鼠标移入停止轮播    stopAutoPlay() <span class="token punctuation">&#123;</span>      this.swiperOption.autoplay <span class="token important">&amp;&amp;</span> this.swiper.autoplay.stop();    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    // 鼠标移出开始轮播    startAutoPlay() <span class="token punctuation">&#123;</span>      this.swiperOption.autoplay <span class="token important">&amp;&amp;</span> this.swiper.autoplay.start();    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    // 请求开源api<span class="token punctuation">,</span> 获取历史上的今天数据    getHistoryList() <span class="token punctuation">&#123;</span>      fetch("https<span class="token punctuation">:</span>//tenapi.cn/lishi/<span class="token punctuation">?</span>format=json"<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token key atrule">method</span><span class="token punctuation">:</span> <span class="token string">"GET"</span><span class="token punctuation">,</span> // <span class="token important">*GET</span><span class="token punctuation">,</span> POST<span class="token punctuation">,</span> PUT<span class="token punctuation">,</span> DELETE<span class="token punctuation">,</span> etc.      <span class="token punctuation">&#125;</span>)        .then((res) =<span class="token punctuation">></span> <span class="token punctuation">&#123;</span>          return res.json();        <span class="token punctuation">&#125;</span>)        .then((data) =<span class="token punctuation">></span> <span class="token punctuation">&#123;</span>          this.content = data.content;        <span class="token punctuation">&#125;</span>)        .catch((err) =<span class="token punctuation">></span> <span class="token punctuation">&#123;</span>          console.log("err"<span class="token punctuation">,</span> err);        <span class="token punctuation">&#125;</span>);    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>              </div>            </details><p>最后在自定义侧边栏的widget_library_sticky或者widget_library中加入html,</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">widget_library_sticky</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">class_name</span><span class="token punctuation">:</span> historyToday    <span class="token key atrule">id_name</span><span class="token punctuation">:</span> historyToday    <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token number">-1</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> 历史上的今天    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>calendar<span class="token punctuation">-</span>week    <span class="token key atrule">icon_color</span><span class="token punctuation">:</span> <span class="token string">'#d63130'</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//baidu.com    <span class="token key atrule">background</span><span class="token punctuation">:</span> <span class="token string">'#fff'</span>    <span class="token key atrule">html</span><span class="token punctuation">:</span> '      &lt;div id="myHistorySwiper" @mouseenter="stopAutoPlay()" @mouseleave="startAutoPlay()"<span class="token punctuation">></span>        &lt;swiper class="myhistoryswiper" ref="myhistoryswiper" style="height<span class="token punctuation">:</span>80px;" <span class="token punctuation">:</span>options="swiperOption"<span class="token punctuation">></span>          &lt;swiper<span class="token punctuation">-</span>slide v<span class="token punctuation">-</span>for="(item<span class="token punctuation">,</span> index) in content" <span class="token punctuation">:</span>key="index"<span class="token punctuation">></span>            <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>item<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          &lt;/swiper<span class="token punctuation">-</span>slide<span class="token punctuation">></span>        &lt;/swiper<span class="token punctuation">></span>      &lt;/div<span class="token punctuation">></span>      &lt;script src="/historyToday/index.js"<span class="token punctuation">></span>&lt;/script<span class="token punctuation">></span>    '<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样历史上的今天就完成了</p><h3 id="恋爱墙"><a href="#恋爱墙" class="headerlink" title="恋爱墙"></a>恋爱墙</h3><p>在source文件夹下创建love/index.js文件</p><details ><summary pointer> love/index.js </summary>              <div class='content'>              <p>love/index.js</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">var htmer_time = document.getElementById("htmer_time");var htmer_time_time = null;function setTime() <span class="token punctuation">&#123;</span>  var create_time = Math.round(    new Date(Date.UTC(2018<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> 0)).getTime() / 1000  );  var timestamp = Math.round(    (new Date().getTime() + 8 * 60 * 60 * 1000) / 1000  );  currentTime = secondToDate(timestamp <span class="token punctuation">-</span> create_time);  currentTimeHtml =    currentTime<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> +    " 年 " +    currentTime<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> +    " 天 " +    currentTime<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> +    " 时 " +    currentTime<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> +    " 分 " +    currentTime<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> +    " 秒";  htmer_time.innerHTML = currentTimeHtml;<span class="token punctuation">&#125;</span>function secondToDate(second) <span class="token punctuation">&#123;</span>  if (<span class="token tag">!second)</span> <span class="token punctuation">&#123;</span>    return 0;  <span class="token punctuation">&#125;</span>  var time = new Array(0<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> 0);  if (second <span class="token punctuation">></span>= 365 * 24 * 3600) <span class="token punctuation">&#123;</span>    time<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> = parseInt(second / (365 * 24 * 3600));    second %= 365 * 24 * 3600;  <span class="token punctuation">&#125;</span>  if (second <span class="token punctuation">></span>= 24 * 3600) <span class="token punctuation">&#123;</span>    time<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> = parseInt(second / (24 * 3600));    second %= 24 * 3600;  <span class="token punctuation">&#125;</span>  if (second <span class="token punctuation">></span>= 3600) <span class="token punctuation">&#123;</span>    time<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> = parseInt(second / 3600);    second %= 3600;  <span class="token punctuation">&#125;</span>  if (second <span class="token punctuation">></span>= 60) <span class="token punctuation">&#123;</span>    time<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> = parseInt(second / 60);    second %= 60;  <span class="token punctuation">&#125;</span>  if (second <span class="token punctuation">></span> 0) <span class="token punctuation">&#123;</span>    time<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> = second;  <span class="token punctuation">&#125;</span>  return time;<span class="token punctuation">&#125;</span>if (htmer_time) <span class="token punctuation">&#123;</span>  htmer_time_time = setInterval(setTime<span class="token punctuation">,</span> 1000);<span class="token punctuation">&#125;</span> else <span class="token punctuation">&#123;</span>  clearInterval(htmer_time_time);<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>              </div>            </details><p>在第6行修改时间就行了，改成你自己想要开始的时间，这里是2018年10月26号开始的<br>最后在自定义侧边栏的widget_library_sticky或者widget_library中加入html</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">widget_library_sticky</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">class_name</span><span class="token punctuation">:</span> testLove    <span class="token key atrule">id_name</span><span class="token punctuation">:</span> testLove    <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token number">-1</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> 恋爱墙    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>heart    <span class="token key atrule">icon_color</span><span class="token punctuation">:</span> <span class="token string">'#d63130'</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//baidu.com    <span class="token key atrule">background</span><span class="token punctuation">:</span> <span class="token string">'#fff'</span>    <span class="token key atrule">html</span><span class="token punctuation">:</span> '          <span class="token key atrule">&lt;div style="text-align</span><span class="token punctuation">:</span> center;"<span class="token punctuation">></span>        &lt;img src="https<span class="token punctuation">:</span>//a<span class="token punctuation">-</span>oss.zmki.cn/20190601/img_9879.jpg"          <span class="token key atrule">style="width</span><span class="token punctuation">:</span> <span class="token key atrule">50px;height</span><span class="token punctuation">:</span> <span class="token key atrule">50px;vertical-align</span><span class="token punctuation">:</span> <span class="token key atrule">-20px;border-radius</span><span class="token punctuation">:</span> <span class="token key atrule">50%;margin-right</span><span class="token punctuation">:</span> <span class="token key atrule">5px;margin-bottom</span><span class="token punctuation">:</span> <span class="token key atrule">5px;-webkit-box-shadow</span><span class="token punctuation">:</span> 1px 1px 1px rgba(0<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>.1)<span class="token punctuation">,</span> 1px 1px 1px rgba(0<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>0.1)<span class="token punctuation">,</span> 1px 1px 1px rgba(0<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token key atrule">0.1);box-shadow</span><span class="token punctuation">:</span> 1px 1px 1px rgba(0<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>.1)<span class="token punctuation">,</span> 1px 1px 1px rgba(0<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>0.1)<span class="token punctuation">,</span> 1px 1px 1px rgba(0<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token key atrule">0.1);border</span><span class="token punctuation">:</span> 2px solid <span class="token comment">#fff;" /></span>        <span class="token key atrule">&lt;svg viewbox="0 0 1024 1024" style="margin-left</span><span class="token punctuation">:</span> <span class="token key atrule">5px;margin-right</span><span class="token punctuation">:</span> 5px;" version="1.0" width="15" height="15"          class="my<span class="token punctuation">-</span>face"<span class="token punctuation">></span>          &lt;path            d="M863.597631 513.574282l<span class="token punctuation">-</span>271.33965<span class="token punctuation">-</span>140.213484L729.783667 81.926656c3.583731<span class="token punctuation">-</span>7.87141 7.167462<span class="token punctuation">-</span>15.742819 7.167462<span class="token punctuation">-</span>25.214109C736.887134 25.226908 708.345275 0.012799 672.635953 0.012799a63.611229 63.611229 0 0 0<span class="token punctuation">-</span>39.293053 12.607055c<span class="token punctuation">-</span>1.791866 1.59988<span class="token punctuation">-</span>3.519736 3.19976<span class="token punctuation">-</span>5.311602 3.19976L147.87531 418.925381a55.547834 55.547834 0 0 0<span class="token punctuation">-</span>19.646527 47.356448c1.791866 17.278704 14.27093 33.021523 32.125591 42.492813l271.33965 141.749369L292.504463 945.221908c<span class="token punctuation">-</span>12.479064 25.214109<span class="token punctuation">-</span>1.791866 53.563983 23.166262 69.306802 10.751194 6.335525 23.230258 9.47129 35.709322 9.47129 16.062795 0 32.125591<span class="token punctuation">-</span>4.735645 44.604655<span class="token punctuation">-</span>15.742819l480.091993<span class="token punctuation">-</span>403.297753a55.547834 55.547834 0 0 0 19.646526<span class="token punctuation">-</span>47.228458 61.243407 61.243407 0 0 0<span class="token punctuation">-</span>32.12559<span class="token punctuation">-</span>44.156688z"            fill="<span class="token comment">#515151" /></span>        &lt;/svg<span class="token punctuation">></span>        &lt;img src="https<span class="token punctuation">:</span>//a<span class="token punctuation">-</span>oss.zmki.cn/20190601/img_9878.jpg"          <span class="token key atrule">style="width</span><span class="token punctuation">:</span> <span class="token key atrule">50px;height</span><span class="token punctuation">:</span> <span class="token key atrule">50px;vertical-align</span><span class="token punctuation">:</span> <span class="token key atrule">-20px;border-radius</span><span class="token punctuation">:</span> <span class="token key atrule">50%;margin-left</span><span class="token punctuation">:</span> <span class="token key atrule">5px;margin-bottom</span><span class="token punctuation">:</span> <span class="token key atrule">5px;-webkit-box-shadow</span><span class="token punctuation">:</span> 1px 1px 1px rgba(0<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>.1)<span class="token punctuation">,</span> 1px 1px 1px rgba(0<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>0.1)<span class="token punctuation">,</span> 1px 1px 1px rgba(0<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token key atrule">0.1);box-shadow</span><span class="token punctuation">:</span> 1px 1px 1px rgba(0<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>.1)<span class="token punctuation">,</span> 1px 1px 1px rgba(0<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>0.1)<span class="token punctuation">,</span> 1px 1px 1px rgba(0<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token key atrule">0.1);border</span><span class="token punctuation">:</span> 2px solid <span class="token comment">#fff;" />&lt;br /></span>        &lt;span id="htmer_time"<span class="token punctuation">></span>&lt;/span<span class="token punctuation">></span>      &lt;/div<span class="token punctuation">></span>      &lt;script data<span class="token punctuation">-</span>pjax src="/love/index.js"<span class="token punctuation">></span>&lt;/script<span class="token punctuation">></span>    '<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，恋爱墙就完成了，但是，除了修改时间，你还可以把两张图片地址也修改成你自己的图片地址</p><p>这几个模块就相当于给你一个容器，你可以自己往里面方html，然后放js，css，放一些自己的插件，vue.js,jquery.js，原生js都可以，只是提供一个容器，你可以自己搞更好看更好玩的扩展，如果你懒得折腾，用我上面写的扩展（自定义侧边栏）也挺好的。</p><p>最后我将我的source/_data/widget.yml写法贴下来,如下所示</p><details ><summary pointer> source/_data/widget.yml </summary>              <div class='content'>              <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">widget_library</span><span class="token punctuation">:</span><span class="token key atrule">widget_library_sticky</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">class_name</span><span class="token punctuation">:</span> testWidget    <span class="token key atrule">id_name</span><span class="token punctuation">:</span> testWidget    <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token number">-1</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> 微博热搜    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fab fa<span class="token punctuation">-</span>weibo    <span class="token key atrule">icon_color</span><span class="token punctuation">:</span> <span class="token string">'#d63130'</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//baidu.com    <span class="token key atrule">background</span><span class="token punctuation">:</span> <span class="token string">'#fff'</span>    <span class="token key atrule">html</span><span class="token punctuation">:</span> '      &lt;div id="myWeibo"<span class="token punctuation">></span>      &lt;<span class="token tag">!--</span> 如果不要滚动，则去掉 vue<span class="token punctuation">-</span>seamless<span class="token punctuation">-</span>scroll标签就行了，这个插件使用cdn向左向右滚动好像有问题 <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span>        &lt;vue<span class="token punctuation">-</span>seamless<span class="token punctuation">-</span>scroll          <span class="token punctuation">:</span>data="content"          <span class="token punctuation">:</span>class<span class="token punctuation">-</span>option="classOption"          class="warp"        <span class="token punctuation">></span>          &lt;div class="weibo<span class="token punctuation">-</span>container" v<span class="token punctuation">-</span>for="(item<span class="token punctuation">,</span> index) in content" <span class="token punctuation">:</span>key="index"<span class="token punctuation">></span>            &lt;div class="left"<span class="token punctuation">></span>              &lt;div class="order" <span class="token punctuation">:</span>class="<span class="token punctuation">&#123;</span> <span class="token key atrule">red</span><span class="token punctuation">:</span> index&lt;=2 <span class="token punctuation">&#125;</span>"<span class="token punctuation">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>index + 1<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>&lt;/div<span class="token punctuation">></span>              &lt;div class="name"<span class="token punctuation">></span>&lt;a <span class="token punctuation">:</span>href="item.url" target="_blank"<span class="token punctuation">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>item.name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>&lt;/a<span class="token punctuation">></span>&lt;/div<span class="token punctuation">></span>            &lt;/div<span class="token punctuation">></span>            &lt;div class="hot"<span class="token punctuation">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>item.hot<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>&lt;/div<span class="token punctuation">></span>          &lt;/div<span class="token punctuation">></span>        &lt;/vue<span class="token punctuation">-</span>seamless<span class="token punctuation">-</span>scroll<span class="token punctuation">></span>      &lt;/div<span class="token punctuation">></span>      &lt;script src="/weibo/index.js"<span class="token punctuation">></span>&lt;/script<span class="token punctuation">></span>      &lt;link href="/weibo/index.css" rel="stylesheet"<span class="token punctuation">></span>    '  <span class="token punctuation">-</span> <span class="token key atrule">class_name</span><span class="token punctuation">:</span> historyToday    <span class="token key atrule">id_name</span><span class="token punctuation">:</span> historyToday    <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token number">-1</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> 历史上的今天    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>calendar<span class="token punctuation">-</span>week    <span class="token key atrule">icon_color</span><span class="token punctuation">:</span> <span class="token string">'#d63130'</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//baidu.com    <span class="token key atrule">background</span><span class="token punctuation">:</span> <span class="token string">'#fff'</span>    <span class="token key atrule">html</span><span class="token punctuation">:</span> '      &lt;div id="myHistorySwiper" @mouseenter="stopAutoPlay()" @mouseleave="startAutoPlay()"<span class="token punctuation">></span>        &lt;swiper class="myhistoryswiper" ref="myhistoryswiper" style="height<span class="token punctuation">:</span>80px;" <span class="token punctuation">:</span>options="swiperOption"<span class="token punctuation">></span>          &lt;swiper<span class="token punctuation">-</span>slide v<span class="token punctuation">-</span>for="(item<span class="token punctuation">,</span> index) in content" <span class="token punctuation">:</span>key="index"<span class="token punctuation">></span>            <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>item<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          &lt;/swiper<span class="token punctuation">-</span>slide<span class="token punctuation">></span>        &lt;/swiper<span class="token punctuation">></span>      &lt;/div<span class="token punctuation">></span>      &lt;script src="/historyToday/index.js"<span class="token punctuation">></span>&lt;/script<span class="token punctuation">></span>    '  <span class="token punctuation">-</span> <span class="token key atrule">class_name</span><span class="token punctuation">:</span> testLove    <span class="token key atrule">id_name</span><span class="token punctuation">:</span> testLove    <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token number">-1</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> 恋爱墙    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>heart    <span class="token key atrule">icon_color</span><span class="token punctuation">:</span> <span class="token string">'#d63130'</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//baidu.com    <span class="token key atrule">background</span><span class="token punctuation">:</span> <span class="token string">'#fff'</span>    <span class="token key atrule">html</span><span class="token punctuation">:</span> '          <span class="token key atrule">&lt;div style="text-align</span><span class="token punctuation">:</span> center;"<span class="token punctuation">></span>        &lt;img src="https<span class="token punctuation">:</span>//a<span class="token punctuation">-</span>oss.zmki.cn/20190601/img_9879.jpg"          <span class="token key atrule">style="width</span><span class="token punctuation">:</span> <span class="token key atrule">50px;height</span><span class="token punctuation">:</span> <span class="token key atrule">50px;vertical-align</span><span class="token punctuation">:</span> <span class="token key atrule">-20px;border-radius</span><span class="token punctuation">:</span> <span class="token key atrule">50%;margin-right</span><span class="token punctuation">:</span> <span class="token key atrule">5px;margin-bottom</span><span class="token punctuation">:</span> <span class="token key atrule">5px;-webkit-box-shadow</span><span class="token punctuation">:</span> 1px 1px 1px rgba(0<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>.1)<span class="token punctuation">,</span> 1px 1px 1px rgba(0<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>0.1)<span class="token punctuation">,</span> 1px 1px 1px rgba(0<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token key atrule">0.1);box-shadow</span><span class="token punctuation">:</span> 1px 1px 1px rgba(0<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>.1)<span class="token punctuation">,</span> 1px 1px 1px rgba(0<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>0.1)<span class="token punctuation">,</span> 1px 1px 1px rgba(0<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token key atrule">0.1);border</span><span class="token punctuation">:</span> 2px solid <span class="token comment">#fff;" /></span>        <span class="token key atrule">&lt;svg viewbox="0 0 1024 1024" style="margin-left</span><span class="token punctuation">:</span> <span class="token key atrule">5px;margin-right</span><span class="token punctuation">:</span> 5px;" version="1.0" width="15" height="15"          class="my<span class="token punctuation">-</span>face"<span class="token punctuation">></span>          &lt;path            d="M863.597631 513.574282l<span class="token punctuation">-</span>271.33965<span class="token punctuation">-</span>140.213484L729.783667 81.926656c3.583731<span class="token punctuation">-</span>7.87141 7.167462<span class="token punctuation">-</span>15.742819 7.167462<span class="token punctuation">-</span>25.214109C736.887134 25.226908 708.345275 0.012799 672.635953 0.012799a63.611229 63.611229 0 0 0<span class="token punctuation">-</span>39.293053 12.607055c<span class="token punctuation">-</span>1.791866 1.59988<span class="token punctuation">-</span>3.519736 3.19976<span class="token punctuation">-</span>5.311602 3.19976L147.87531 418.925381a55.547834 55.547834 0 0 0<span class="token punctuation">-</span>19.646527 47.356448c1.791866 17.278704 14.27093 33.021523 32.125591 42.492813l271.33965 141.749369L292.504463 945.221908c<span class="token punctuation">-</span>12.479064 25.214109<span class="token punctuation">-</span>1.791866 53.563983 23.166262 69.306802 10.751194 6.335525 23.230258 9.47129 35.709322 9.47129 16.062795 0 32.125591<span class="token punctuation">-</span>4.735645 44.604655<span class="token punctuation">-</span>15.742819l480.091993<span class="token punctuation">-</span>403.297753a55.547834 55.547834 0 0 0 19.646526<span class="token punctuation">-</span>47.228458 61.243407 61.243407 0 0 0<span class="token punctuation">-</span>32.12559<span class="token punctuation">-</span>44.156688z"            fill="<span class="token comment">#515151" /></span>        &lt;/svg<span class="token punctuation">></span>        &lt;img src="https<span class="token punctuation">:</span>//a<span class="token punctuation">-</span>oss.zmki.cn/20190601/img_9878.jpg"          <span class="token key atrule">style="width</span><span class="token punctuation">:</span> <span class="token key atrule">50px;height</span><span class="token punctuation">:</span> <span class="token key atrule">50px;vertical-align</span><span class="token punctuation">:</span> <span class="token key atrule">-20px;border-radius</span><span class="token punctuation">:</span> <span class="token key atrule">50%;margin-left</span><span class="token punctuation">:</span> <span class="token key atrule">5px;margin-bottom</span><span class="token punctuation">:</span> <span class="token key atrule">5px;-webkit-box-shadow</span><span class="token punctuation">:</span> 1px 1px 1px rgba(0<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>.1)<span class="token punctuation">,</span> 1px 1px 1px rgba(0<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>0.1)<span class="token punctuation">,</span> 1px 1px 1px rgba(0<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token key atrule">0.1);box-shadow</span><span class="token punctuation">:</span> 1px 1px 1px rgba(0<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>.1)<span class="token punctuation">,</span> 1px 1px 1px rgba(0<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>0.1)<span class="token punctuation">,</span> 1px 1px 1px rgba(0<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token key atrule">0.1);border</span><span class="token punctuation">:</span> 2px solid <span class="token comment">#fff;" />&lt;br /></span>        &lt;span id="htmer_time"<span class="token punctuation">></span>&lt;/span<span class="token punctuation">></span>      &lt;/div<span class="token punctuation">></span>      &lt;script data<span class="token punctuation">-</span>pjax src="/love/index.js"<span class="token punctuation">></span>&lt;/script<span class="token punctuation">></span>    '<span class="token key atrule">home_widget</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">class_name</span><span class="token punctuation">:</span> welcome    <span class="token key atrule">id_name</span><span class="token punctuation">:</span> welcome    <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token number">-1</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> 欢迎    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>envelope    <span class="token key atrule">icon_color</span><span class="token punctuation">:</span> blue    <span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//baidu.com    <span class="token key atrule">background</span><span class="token punctuation">:</span> <span class="token string">'#fff'</span>    <span class="token key atrule">html</span><span class="token punctuation">:</span> <span class="token string">'&lt;img src="https://api.amogu.cn/api/ipimg/" style="width:100%">'</span>  <span class="token punctuation">-</span> <span class="token key atrule">class_name</span><span class="token punctuation">:</span> my_github_container    <span class="token key atrule">id_name</span><span class="token punctuation">:</span> my_github_container    <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token number">-1</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> 测试日历    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>envelope    <span class="token key atrule">icon_color</span><span class="token punctuation">:</span> blue    <span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//baidu.com    <span class="token key atrule">background</span><span class="token punctuation">:</span> <span class="token string">'#fff'</span>    <span class="token key atrule">html</span><span class="token punctuation">:</span> '      &lt;div id="github_container"<span class="token punctuation">></span>&lt;/div<span class="token punctuation">></span>      &lt;script data<span class="token punctuation">-</span>pjax src="/githubcalendar/index.js"<span class="token punctuation">></span>&lt;/script<span class="token punctuation">></span>    '  <span class="token punctuation">-</span> <span class="token key atrule">class_name</span><span class="token punctuation">:</span> test2    <span class="token key atrule">id_name</span><span class="token punctuation">:</span> test2    <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token number">-1</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> 测试轮播图    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>envelope    <span class="token key atrule">icon_color</span><span class="token punctuation">:</span> blue    <span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//baidu.com    <span class="token key atrule">background</span><span class="token punctuation">:</span> <span class="token string">'#fff'</span>    <span class="token key atrule">html</span><span class="token punctuation">:</span> '    &lt;div id="mySwiper" @mouseenter="stopAutoPlay()" @mouseleave="startAutoPlay()"<span class="token punctuation">></span>      &lt;swiper class="myswiper" ref="myswiper" style="height<span class="token punctuation">:</span>350px;" <span class="token punctuation">:</span>options="swiperOption"<span class="token punctuation">></span>        &lt;swiper<span class="token punctuation">-</span>slide<span class="token punctuation">></span>          &lt;a href="http<span class="token punctuation">:</span>//baidu.com" class="toPath"<span class="token punctuation">></span>            <span class="token key atrule">&lt;img class="no-lazy" src="/mySwiper/img/2.jpg" style="width:100%;height:100%;object-fit</span><span class="token punctuation">:</span> cover;"<span class="token punctuation">></span>            &lt;h2 class="ani" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>effect="fadeInDown" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>duration="0.5s" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>delay="0.3s"<span class="token punctuation">></span>我是标题&lt;/h2<span class="token punctuation">></span>            &lt;p class="ani" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>effect="fadeInDown" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>duration="0.5s" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>delay="0.3s"<span class="token punctuation">></span>我是描述哦&lt;/p<span class="token punctuation">></span>          &lt;/a<span class="token punctuation">></span>        &lt;/swiper<span class="token punctuation">-</span>slide<span class="token punctuation">></span>        &lt;swiper<span class="token punctuation">-</span>slide<span class="token punctuation">></span>          &lt;a href="http<span class="token punctuation">:</span>//baidu.com" class="toPath"<span class="token punctuation">></span>            <span class="token key atrule">&lt;img class="no-lazy" src="/mySwiper/img/3.jpg" style="width:100%;height:100%;object-fit</span><span class="token punctuation">:</span> cover;"<span class="token punctuation">></span>            &lt;h2 class="ani" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>effect="fadeInDown" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>duration="0.5s" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>delay="0.3s"<span class="token punctuation">></span>我是标题2&lt;/h2<span class="token punctuation">></span>            &lt;p class="ani" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>effect="fadeInDown" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>duration="0.5s" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>delay="0.3s"<span class="token punctuation">></span>我是描述2&lt;/p<span class="token punctuation">></span>          &lt;/a<span class="token punctuation">></span>        &lt;/swiper<span class="token punctuation">-</span>slide<span class="token punctuation">></span>        &lt;swiper<span class="token punctuation">-</span>slide<span class="token punctuation">></span>          &lt;a href="http<span class="token punctuation">:</span>//baidu.com" class="toPath"<span class="token punctuation">></span>            <span class="token key atrule">&lt;img class="no-lazy" src="/mySwiper/img/4.jpg" style="width:100%;height:100%;object-fit</span><span class="token punctuation">:</span> cover;"<span class="token punctuation">></span>            &lt;h2 class="ani" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>effect="fadeInDown" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>duration="0.5s" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>delay="0.3s"<span class="token punctuation">></span>我是标题3&lt;/h2<span class="token punctuation">></span>            &lt;p class="ani" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>effect="fadeInDown" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>duration="0.5s" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>delay="0.3s"<span class="token punctuation">></span>我是描述3&lt;/p<span class="token punctuation">></span>          &lt;/a<span class="token punctuation">></span>        &lt;/swiper<span class="token punctuation">-</span>slide<span class="token punctuation">></span>        &lt;swiper<span class="token punctuation">-</span>slide<span class="token punctuation">></span>          &lt;a href="http<span class="token punctuation">:</span>//baidu.com" class="toPath"<span class="token punctuation">></span>            <span class="token key atrule">&lt;img class="no-lazy" src="/mySwiper/img/5.jpg" style="width:100%;height:100%;object-fit</span><span class="token punctuation">:</span> cover;"<span class="token punctuation">></span>            &lt;h2 class="ani" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>effect="fadeInDown" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>duration="0.5s" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>delay="0.3s"<span class="token punctuation">></span>我是标题4&lt;/h2<span class="token punctuation">></span>            &lt;p class="ani" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>effect="fadeInDown" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>duration="0.5s" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>delay="0.3s"<span class="token punctuation">></span>我是描述4&lt;/p<span class="token punctuation">></span>          &lt;/a<span class="token punctuation">></span>        &lt;/swiper<span class="token punctuation">-</span>slide<span class="token punctuation">></span>        &lt;swiper<span class="token punctuation">-</span>slide<span class="token punctuation">></span>          &lt;a href="http<span class="token punctuation">:</span>//baidu.com" class="toPath"<span class="token punctuation">></span>            <span class="token key atrule">&lt;img class="no-lazy" src="https://api.dujin.org/pic/ghibli/" style="width:100%;height:100%;object-fit</span><span class="token punctuation">:</span> cover;"<span class="token punctuation">></span>            &lt;h2 class="ani" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>effect="fadeInDown" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>duration="0.5s" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>delay="0.3s"<span class="token punctuation">></span>我是标题5&lt;/h2<span class="token punctuation">></span>            &lt;p class="ani" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>effect="fadeInDown" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>duration="0.5s" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>delay="0.3s"<span class="token punctuation">></span>我是描述5&lt;/p<span class="token punctuation">></span>          &lt;/a<span class="token punctuation">></span>        &lt;/swiper<span class="token punctuation">-</span>slide<span class="token punctuation">></span>        &lt;swiper<span class="token punctuation">-</span>slide<span class="token punctuation">></span>          &lt;a href="http<span class="token punctuation">:</span>//baidu.com" class="toPath"<span class="token punctuation">></span>            <span class="token key atrule">&lt;img class="no-lazy" src="/mySwiper/img/7.jpg" style="width:100%;height:100%;object-fit</span><span class="token punctuation">:</span> cover;"<span class="token punctuation">></span>            &lt;h2 class="ani" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>effect="fadeInDown" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>duration="0.5s" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>delay="0.3s"<span class="token punctuation">></span>我是标题6&lt;/h2<span class="token punctuation">></span>            &lt;p class="ani" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>effect="fadeInDown" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>duration="0.5s" swiper<span class="token punctuation">-</span>animate<span class="token punctuation">-</span>delay="0.3s"<span class="token punctuation">></span>我是描述6&lt;/p<span class="token punctuation">></span>          &lt;/a<span class="token punctuation">></span>        &lt;/swiper<span class="token punctuation">-</span>slide<span class="token punctuation">></span>        &lt;<span class="token tag">!--</span> 如果你想继续增加轮播图，继续在下面写&lt;swiper<span class="token punctuation">-</span>slide<span class="token punctuation">></span>我是内容&lt;/swiper<span class="token punctuation">-</span>slide<span class="token punctuation">></span>就行了 <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span><span class="token scalar string">        &lt;div class="swiper-pagination" slot="pagination">&lt;/div></span>      &lt;/swiper<span class="token punctuation">></span>    &lt;/div<span class="token punctuation">></span>    &lt;script src="/mySwiper/index.js"<span class="token punctuation">></span>&lt;/script<span class="token punctuation">></span>    &lt;link href="/mySwiper/index.css" rel="stylesheet"<span class="token punctuation">></span>    '  <span class="token punctuation">-</span> <span class="token key atrule">class_name</span><span class="token punctuation">:</span> mybilibili    <span class="token key atrule">id_name</span><span class="token punctuation">:</span> mybilibili    <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token number">-1</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> 测试bli    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>envelope    <span class="token key atrule">icon_color</span><span class="token punctuation">:</span> blue    <span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//baidu.com    <span class="token key atrule">background</span><span class="token punctuation">:</span> <span class="token string">'#fff'</span>    <span class="token key atrule">html</span><span class="token punctuation">:</span> '      &lt;div id="myBli"<span class="token punctuation">></span>        &lt;vue<span class="token punctuation">-</span>seamless<span class="token punctuation">-</span>scroll          <span class="token punctuation">:</span>data="listData"          <span class="token punctuation">:</span>class<span class="token punctuation">-</span>option="classOption"          class="warp"        <span class="token punctuation">></span>          &lt;ul class="ul<span class="token punctuation">-</span>item" style="width<span class="token punctuation">:</span>720px;"<span class="token punctuation">></span>            &lt;<span class="token tag">!--</span> 在这里改<span class="token punctuation">,</span> 手动修改a连接的href值和img的src值<span class="token punctuation">,</span> 如果你会进阶，你可以使用v<span class="token punctuation">-</span>for<span class="token punctuation">,</span> 或者数据使用动态数据<span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span>                        &lt;li class="li<span class="token punctuation">-</span>item"<span class="token punctuation">></span>              &lt;a href="http<span class="token punctuation">:</span>//baidu.com"<span class="token punctuation">></span>                &lt;img class="no<span class="token punctuation">-</span>lazy" src="https<span class="token punctuation">:</span>//pic4.zhimg.com/80/v2<span class="token punctuation">-</span>f549722dac8f777693c090a92498de0f_1440w.jpg"<span class="token punctuation">></span>              &lt;/a<span class="token punctuation">></span>            &lt;/li<span class="token punctuation">></span>            &lt;li class="li<span class="token punctuation">-</span>item"<span class="token punctuation">></span>              &lt;a href="http<span class="token punctuation">:</span>//baidu.com"<span class="token punctuation">></span>                &lt;img class="no<span class="token punctuation">-</span>lazy" src="https<span class="token punctuation">:</span>//pic4.zhimg.com/80/v2<span class="token punctuation">-</span>f549722dac8f777693c090a92498de0f_1440w.jpg"<span class="token punctuation">></span>              &lt;/a<span class="token punctuation">></span>            &lt;/li<span class="token punctuation">></span>            &lt;li class="li<span class="token punctuation">-</span>item"<span class="token punctuation">></span>              &lt;a href="http<span class="token punctuation">:</span>//baidu.com"<span class="token punctuation">></span>                &lt;img class="no<span class="token punctuation">-</span>lazy" src="https<span class="token punctuation">:</span>//pic4.zhimg.com/80/v2<span class="token punctuation">-</span>f549722dac8f777693c090a92498de0f_1440w.jpg"<span class="token punctuation">></span>              &lt;/a<span class="token punctuation">></span>            &lt;/li<span class="token punctuation">></span>            &lt;li class="li<span class="token punctuation">-</span>item"<span class="token punctuation">></span>              &lt;a href="http<span class="token punctuation">:</span>//baidu.com"<span class="token punctuation">></span>                &lt;img class="no<span class="token punctuation">-</span>lazy" src="https<span class="token punctuation">:</span>//pic4.zhimg.com/80/v2<span class="token punctuation">-</span>f549722dac8f777693c090a92498de0f_1440w.jpg"<span class="token punctuation">></span>              &lt;/a<span class="token punctuation">></span>            &lt;/li<span class="token punctuation">></span>            &lt;li class="li<span class="token punctuation">-</span>item"<span class="token punctuation">></span>              &lt;a href="http<span class="token punctuation">:</span>//baidu.com"<span class="token punctuation">></span>                &lt;img class="no<span class="token punctuation">-</span>lazy" src="https<span class="token punctuation">:</span>//pic4.zhimg.com/80/v2<span class="token punctuation">-</span>f549722dac8f777693c090a92498de0f_1440w.jpg"<span class="token punctuation">></span>              &lt;/a<span class="token punctuation">></span>            &lt;/li<span class="token punctuation">></span>            &lt;li class="li<span class="token punctuation">-</span>item"<span class="token punctuation">></span>              &lt;a href="http<span class="token punctuation">:</span>//baidu.com"<span class="token punctuation">></span>                &lt;img class="no<span class="token punctuation">-</span>lazy" src="https<span class="token punctuation">:</span>//pic4.zhimg.com/80/v2<span class="token punctuation">-</span>f549722dac8f777693c090a92498de0f_1440w.jpg"<span class="token punctuation">></span>              &lt;/a<span class="token punctuation">></span>            &lt;/li<span class="token punctuation">></span>            &lt;<span class="token tag">!--</span> 在这里结束 <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span><span class="token scalar string">          &lt;/ul></span>        &lt;/vue<span class="token punctuation">-</span>seamless<span class="token punctuation">-</span>scroll<span class="token punctuation">></span>      &lt;/div<span class="token punctuation">></span>      &lt;script src="/bli/index.js"<span class="token punctuation">></span>&lt;/script<span class="token punctuation">></span>      &lt;link href="/bli/index.css" rel="stylesheet"<span class="token punctuation">></span>    '<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 本站介绍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 热搜榜 </tag>
            
            <tag> widget </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主题介绍-文章Front-matter</title>
      <link href="/post/ben-zhan-jie-shao/zhu-ti-jie-shao-wen-zhang-front-matter/"/>
      <url>/post/ben-zhan-jie-shao/zhu-ti-jie-shao-wen-zhang-front-matter/</url>
      
        <content type="html"><![CDATA[<h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><p>这个指的是你在你的文章页面里面写的参数，针对的是这一篇文章，例如</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> Hexo主题<span class="token punctuation">-</span><span class="token punctuation">-</span>Bamboo介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> 2021<span class="token punctuation">-</span>10<span class="token punctuation">-</span>24 14<span class="token punctuation">:</span><span class="token number">06</span><span class="token key atrule">swiper</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 将改文章放入轮播图中</span><span class="token key atrule">swiperImg</span><span class="token punctuation">:</span> <span class="token string">'/medias/1.jpg'</span> <span class="token comment"># 该文章在轮播图中的图片，可以是本地目录下图片也可以是http://xxx图片</span><span class="token key atrule">img</span><span class="token punctuation">:</span> <span class="token string">'/medias/1.jpg'</span> <span class="token comment"># 该文章图片，可以是本地目录下图片也可以是http://xxx图片</span><span class="token key atrule">categories</span><span class="token punctuation">:</span> 前端<span class="token key atrule">tags</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>Hexo<span class="token punctuation">,</span> hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>bamboo<span class="token punctuation">]</span><span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>Fengqi</td><td>文章作者，没有设置默认是Fengqi</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>top</td><td>false</td><td>将该值设为true，则将该篇文章显示在首页的置顶栏目中</td></tr><tr><td>toc</td><td>true</td><td>将该值设为false，则该篇文章不显示右侧目录</td></tr><tr><td>tocOpen</td><td>true</td><td>将该值设为false，则该篇文章右侧目录默认收缩</td></tr><tr><td>onlyTitle</td><td>false</td><td>文章详情页头部是否只显示标题，不显示日期等信息</td></tr><tr><td>excerpt</td><td>无</td><td>文章描述（摘要），该文章在首页的描述文字，如果没有，则取swiperDesc,如果swiperDesc也没有，则取文章内容（优先取 <code>&lt;!-- more --&gt; &quot;</code>上面的内容）</td></tr><tr><td>swiper</td><td>false</td><td>表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>swiperImg</td><td>无</td><td>表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>swiperDesc</td><td>无</td><td>表示该文章在首页轮播封面需要显示的文字描述（摘要），如果没有，则使用excerpt，如果excerpt也没有，则取文章内容</td></tr><tr><td>img</td><td>无</td><td>文章特征图，该文章显示的图片，没有则默认使用文章的特色图片</td></tr><tr><td>bgImg</td><td>-</td><td>单独为这篇文章设置背景图片或者背景颜色，可以是数组，数组里面放图片链接，可以是字符串，字符串里面是颜色值，空值则背景颜色透明</td></tr><tr><td>bgImgTransition</td><td>fade</td><td>该篇文章的bgImg设置为数组,该值表示背景图片切换的动画, 有三种值（fade, scale, translate-fade）</td></tr><tr><td>bgImgDelay</td><td>180000(三分钟)</td><td>该篇文章的bgImg设置为数组,该值表示背景图片切换的延迟时间</td></tr><tr><td>comments</td><td>true</td><td>将该值设为false，则该篇文章不显示评论</td></tr><tr><td>share</td><td>true</td><td>将该值设为false，则该篇文章不显示分享按钮</td></tr><tr><td>copyright</td><td>true</td><td>将该值设为false，则该篇文章不显示版权声明</td></tr><tr><td>donate</td><td>true</td><td>将该值设为false，则该篇文章不显示打赏按钮</td></tr><tr><td>prismjs</td><td>无</td><td>如果使用的是hexo自带的prismjs代码高亮，通过设置该值为该篇文章设置不同的代码高亮主题（default, coy, dark, funky, okaidia, solarizedlight, tomorrow, twilight）</td></tr><tr><td>mathjax</td><td>false</td><td>mathjax公式</td></tr></tbody></table><p>以上基本就是所有的配置项了</p>]]></content>
      
      
      <categories>
          
          <category> 本站介绍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主题介绍-媒体文件书写功能</title>
      <link href="/post/ben-zhan-jie-shao/zhu-ti-jie-shao-mei-ti-wen-jian-shu-xie-gong-neng/"/>
      <url>/post/ben-zhan-jie-shao/zhu-ti-jie-shao-mei-ti-wen-jian-shu-xie-gong-neng/</url>
      
        <content type="html"><![CDATA[<h1 class="bamboo-h " id="getFile文件写法">getFile文件写法</h1><br/><h2 id="getFile文件功能"><a href="#getFile文件功能" class="headerlink" title="getFile文件功能"></a>getFile文件功能</h2><p>会把某个文件夹下的文件显示在页面上。<br>例如我在source文件夹下，创建了一个叫做img的文件夹，把img的文件夹下的文件显示在页面上。</p><blockquote><p>  注意： 必须要在source文件夹下，文件夹名称可以随便取，下面事例中文件夹名称叫img<br>    该标签需要主题版本为 2.3.6+</p></blockquote><h2 id="getFile文件写法示例如下"><a href="#getFile文件写法示例如下" class="headerlink" title="getFile文件写法示例如下"></a>getFile文件写法示例如下</h2><h3 id="获取img文件夹下的-txt-pdf文件"><a href="#获取img文件夹下的-txt-pdf文件" class="headerlink" title="获取img文件夹下的.txt .pdf文件"></a>获取<code>img</code>文件夹下的.txt .pdf文件</h3><div class="link-group"><div class="tagLink"><a class="link-card" no-pjax target="_blank" title="gougou .txt" href="/img/gougou .txt"><span class="link-card-backdrop" style="background-image: url(https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg)"></span><div class="left"><img src="https://img.51miz.com/Element/00/37/79/59/10df0417_E377959_b7bb9dfa.png" class="lazyload placeholder" data-srcset="https://img.51miz.com/Element/00/37/79/59/10df0417_E377959_b7bb9dfa.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></div><div class="right"><p class="text">gougou .txt</p><p class="url">/img/gougou .txt</p></div></a></div><div class="tagLink"><a class="link-card" no-pjax target="_blank" title="gougou.pdf" href="/img/gougou.pdf"><span class="link-card-backdrop" style="background-image: url(https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg)"></span><div class="left"><img src="https://img.51miz.com/Element/00/37/79/59/10df0417_E377959_b7bb9dfa.png" class="lazyload placeholder" data-srcset="https://img.51miz.com/Element/00/37/79/59/10df0417_E377959_b7bb9dfa.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></div><div class="right"><p class="text">gougou.pdf</p><p class="url">/img/gougou.pdf</p></div></a></div></div><h3 id="获取img文件夹下的-png文件"><a href="#获取img文件夹下的-png文件" class="headerlink" title="获取img文件夹下的.png文件"></a>获取<code>img</code>文件夹下的.png文件</h3><div class="link-group"><div class="tagLink"><a class="link-card" no-pjax target="_blank" title="gougou.png" href="/img/gougou.png"><span class="link-card-backdrop" style="background-image: url(https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg)"></span><div class="left"><img src="https://img.51miz.com/Element/00/37/79/59/10df0417_E377959_b7bb9dfa.png" class="lazyload placeholder" data-srcset="https://img.51miz.com/Element/00/37/79/59/10df0417_E377959_b7bb9dfa.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></div><div class="right"><p class="text">gougou.png</p><p class="url">/img/gougou.png</p></div></a></div></div><h3 id="获取img文件夹下的-gif文件"><a href="#获取img文件夹下的-gif文件" class="headerlink" title="获取img文件夹下的.gif文件"></a>获取<code>img</code>文件夹下的.gif文件</h3><div class="link-group"><div class="tagLink"><a class="link-card" no-pjax target="_blank" title="gougou.gif" href="/img/gougou.gif"><span class="link-card-backdrop" style="background-image: url(https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg)"></span><div class="left"><img src="https://img.51miz.com/Element/00/37/79/59/10df0417_E377959_b7bb9dfa.png" class="lazyload placeholder" data-srcset="https://img.51miz.com/Element/00/37/79/59/10df0417_E377959_b7bb9dfa.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></div><div class="right"><p class="text">gougou.gif</p><p class="url">/img/gougou.gif</p></div></a></div></div><h3 id="获取img文件夹下的所有文件"><a href="#获取img文件夹下的所有文件" class="headerlink" title="获取img文件夹下的所有文件"></a>获取<code>img</code>文件夹下的所有文件</h3><div class="link-group"><div class="tagLink"><a class="link-card" no-pjax target="_blank" title="gou.jpg" href="/img/gou.jpg"><span class="link-card-backdrop" style="background-image: url(https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg)"></span><div class="left"><img src="https://img.51miz.com/Element/00/37/79/59/10df0417_E377959_b7bb9dfa.png" class="lazyload placeholder" data-srcset="https://img.51miz.com/Element/00/37/79/59/10df0417_E377959_b7bb9dfa.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></div><div class="right"><p class="text">gou.jpg</p><p class="url">/img/gou.jpg</p></div></a></div><div class="tagLink"><a class="link-card" no-pjax target="_blank" title="gougou .txt" href="/img/gougou .txt"><span class="link-card-backdrop" style="background-image: url(https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg)"></span><div class="left"><img src="https://img.51miz.com/Element/00/37/79/59/10df0417_E377959_b7bb9dfa.png" class="lazyload placeholder" data-srcset="https://img.51miz.com/Element/00/37/79/59/10df0417_E377959_b7bb9dfa.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></div><div class="right"><p class="text">gougou .txt</p><p class="url">/img/gougou .txt</p></div></a></div><div class="tagLink"><a class="link-card" no-pjax target="_blank" title="gougou.gif" href="/img/gougou.gif"><span class="link-card-backdrop" style="background-image: url(https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg)"></span><div class="left"><img src="https://img.51miz.com/Element/00/37/79/59/10df0417_E377959_b7bb9dfa.png" class="lazyload placeholder" data-srcset="https://img.51miz.com/Element/00/37/79/59/10df0417_E377959_b7bb9dfa.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></div><div class="right"><p class="text">gougou.gif</p><p class="url">/img/gougou.gif</p></div></a></div><div class="tagLink"><a class="link-card" no-pjax target="_blank" title="gougou.pdf" href="/img/gougou.pdf"><span class="link-card-backdrop" style="background-image: url(https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg)"></span><div class="left"><img src="https://img.51miz.com/Element/00/37/79/59/10df0417_E377959_b7bb9dfa.png" class="lazyload placeholder" data-srcset="https://img.51miz.com/Element/00/37/79/59/10df0417_E377959_b7bb9dfa.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></div><div class="right"><p class="text">gougou.pdf</p><p class="url">/img/gougou.pdf</p></div></a></div><div class="tagLink"><a class="link-card" no-pjax target="_blank" title="gougou.png" href="/img/gougou.png"><span class="link-card-backdrop" style="background-image: url(https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg)"></span><div class="left"><img src="https://img.51miz.com/Element/00/37/79/59/10df0417_E377959_b7bb9dfa.png" class="lazyload placeholder" data-srcset="https://img.51miz.com/Element/00/37/79/59/10df0417_E377959_b7bb9dfa.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></div><div class="right"><p class="text">gougou.png</p><p class="url">/img/gougou.png</p></div></a></div></div><h3 id="获取img文件夹下的所有文件，并指定左侧图片"><a href="#获取img文件夹下的所有文件，并指定左侧图片" class="headerlink" title="获取img文件夹下的所有文件，并指定左侧图片"></a>获取<code>img</code>文件夹下的所有文件，并指定左侧图片</h3><div class="link-group"><div class="tagLink"><a class="link-card" no-pjax target="_blank" title="gou.jpg" href="/img/gou.jpg"><span class="link-card-backdrop" style="background-image: url(https://tse3-mm.cn.bing.net/th/id/OIP-C.oGbjgWNX4DBXyKf0P_xOmwHaHa?w=212&h=188&c=7&o=5&dpr=1.24&pid=1.7)"></span><div class="left"><img src="https://tse3-mm.cn.bing.net/th/id/OIP-C.oGbjgWNX4DBXyKf0P_xOmwHaHa?w=212&h=188&c=7&o=5&dpr=1.24&pid=1.7" class="lazyload placeholder" data-srcset="https://tse3-mm.cn.bing.net/th/id/OIP-C.oGbjgWNX4DBXyKf0P_xOmwHaHa?w=212&h=188&c=7&o=5&dpr=1.24&pid=1.7" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></div><div class="right"><p class="text">gou.jpg</p><p class="url">/img/gou.jpg</p></div></a></div><div class="tagLink"><a class="link-card" no-pjax target="_blank" title="gougou .txt" href="/img/gougou .txt"><span class="link-card-backdrop" style="background-image: url(https://tse3-mm.cn.bing.net/th/id/OIP-C.oGbjgWNX4DBXyKf0P_xOmwHaHa?w=212&h=188&c=7&o=5&dpr=1.24&pid=1.7)"></span><div class="left"><img src="https://tse3-mm.cn.bing.net/th/id/OIP-C.oGbjgWNX4DBXyKf0P_xOmwHaHa?w=212&h=188&c=7&o=5&dpr=1.24&pid=1.7" class="lazyload placeholder" data-srcset="https://tse3-mm.cn.bing.net/th/id/OIP-C.oGbjgWNX4DBXyKf0P_xOmwHaHa?w=212&h=188&c=7&o=5&dpr=1.24&pid=1.7" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></div><div class="right"><p class="text">gougou .txt</p><p class="url">/img/gougou .txt</p></div></a></div><div class="tagLink"><a class="link-card" no-pjax target="_blank" title="gougou.gif" href="/img/gougou.gif"><span class="link-card-backdrop" style="background-image: url(https://tse3-mm.cn.bing.net/th/id/OIP-C.oGbjgWNX4DBXyKf0P_xOmwHaHa?w=212&h=188&c=7&o=5&dpr=1.24&pid=1.7)"></span><div class="left"><img src="https://tse3-mm.cn.bing.net/th/id/OIP-C.oGbjgWNX4DBXyKf0P_xOmwHaHa?w=212&h=188&c=7&o=5&dpr=1.24&pid=1.7" class="lazyload placeholder" data-srcset="https://tse3-mm.cn.bing.net/th/id/OIP-C.oGbjgWNX4DBXyKf0P_xOmwHaHa?w=212&h=188&c=7&o=5&dpr=1.24&pid=1.7" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></div><div class="right"><p class="text">gougou.gif</p><p class="url">/img/gougou.gif</p></div></a></div><div class="tagLink"><a class="link-card" no-pjax target="_blank" title="gougou.pdf" href="/img/gougou.pdf"><span class="link-card-backdrop" style="background-image: url(https://tse3-mm.cn.bing.net/th/id/OIP-C.oGbjgWNX4DBXyKf0P_xOmwHaHa?w=212&h=188&c=7&o=5&dpr=1.24&pid=1.7)"></span><div class="left"><img src="https://tse3-mm.cn.bing.net/th/id/OIP-C.oGbjgWNX4DBXyKf0P_xOmwHaHa?w=212&h=188&c=7&o=5&dpr=1.24&pid=1.7" class="lazyload placeholder" data-srcset="https://tse3-mm.cn.bing.net/th/id/OIP-C.oGbjgWNX4DBXyKf0P_xOmwHaHa?w=212&h=188&c=7&o=5&dpr=1.24&pid=1.7" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></div><div class="right"><p class="text">gougou.pdf</p><p class="url">/img/gougou.pdf</p></div></a></div><div class="tagLink"><a class="link-card" no-pjax target="_blank" title="gougou.png" href="/img/gougou.png"><span class="link-card-backdrop" style="background-image: url(https://tse3-mm.cn.bing.net/th/id/OIP-C.oGbjgWNX4DBXyKf0P_xOmwHaHa?w=212&h=188&c=7&o=5&dpr=1.24&pid=1.7)"></span><div class="left"><img src="https://tse3-mm.cn.bing.net/th/id/OIP-C.oGbjgWNX4DBXyKf0P_xOmwHaHa?w=212&h=188&c=7&o=5&dpr=1.24&pid=1.7" class="lazyload placeholder" data-srcset="https://tse3-mm.cn.bing.net/th/id/OIP-C.oGbjgWNX4DBXyKf0P_xOmwHaHa?w=212&h=188&c=7&o=5&dpr=1.24&pid=1.7" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></div><div class="right"><p class="text">gougou.png</p><p class="url">/img/gougou.png</p></div></a></div></div><h3 id="上述代码示例"><a href="#上述代码示例" class="headerlink" title="上述代码示例"></a>上述代码示例</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">###</span> 获取`img`文件夹下的.txt .pdf文件</span>&#123;% getFiles img, txt pdf  %&#125;<span class="token title important"><span class="token punctuation">###</span> 获取`img`文件夹下的.png文件</span>&#123;% getFiles img, png %&#125;<span class="token title important"><span class="token punctuation">###</span> 获取`img`文件夹下的.gif文件</span>&#123;% getFiles img, gif %&#125;<span class="token title important"><span class="token punctuation">###</span> 获取`img`文件夹下的所有文件</span>&#123;% getFiles img %&#125;<span class="token title important"><span class="token punctuation">###</span> 获取`img`文件夹下的所有文件，并指定左侧图片</span>&#123;% getFiles img, '', https://tse3-mm.cn.bing.net/th/id/OIP-C.oGbjgWNX4DBXyKf0P_xOmwHaHa?w=212&amp;h=188&amp;c=7&amp;o=5&amp;dpr=1.24&amp;pid=1.7 %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 class="bamboo-h " id="inlineimage效果">inlineimage效果</h1><br/><p>这是 <img no-lazy class="inline" src="http://img.doutula.com/production/uploads/image/2019/08/15/20190815849485_fKMqYD.gif" style="height:1.5em"/> 一段话。</p><p>这又是 <img no-lazy class="inline" src="http://img.doutula.com/production/uploads/image/2019/08/15/20190815849485_fKMqYD.gif" style="height:40px;"/> 一段话。</p><p>这又是 <img no-lazy class="inline" src="http://img.doutula.com/production/uploads/image/2019/08/15/20190815849485_fKMqYD.gif" style="height:100px;"/> 一段话。</p><h3 id="上述事例代码"><a href="#上述事例代码" class="headerlink" title="上述事例代码"></a>上述事例代码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">这是 &#123;% inlineimage http://img.doutula.com/production/uploads/image/2019/08/15/20190815849485_fKMqYD.gif %&#125; 一段话。这又是 &#123;% inlineimage http://img.doutula.com/production/uploads/image/2019/08/15/20190815849485_fKMqYD.gif, height=40px %&#125; 一段话。这又是 &#123;% inlineimage http://img.doutula.com/production/uploads/image/2019/08/15/20190815849485_fKMqYD.gif, height=100px %&#125; 一段话。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 class="bamboo-h " id="自定义图片并添加描述">自定义图片并添加描述</h1><br/><h2 id="自定义图片"><a href="#自定义图片" class="headerlink" title="自定义图片"></a>自定义图片</h2><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://pic2.zhimg.com/80/v2-cc93c338d57783702bea4506aee7007d_1440w.jpg?source=1940ef5c" class="lazyload placeholder" data-srcset="https://pic2.zhimg.com/80/v2-cc93c338d57783702bea4506aee7007d_1440w.jpg?source=1940ef5c" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="自定义图片"/></div><span class="image-caption">自定义图片</span></div><h3 id="上述事例代码-1"><a href="#上述事例代码-1" class="headerlink" title="上述事例代码"></a>上述事例代码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% image https://pic2.zhimg.com/80/v2-cc93c338d57783702bea4506aee7007d_1440w.jpg?source=1940ef5c, alt=自定义图片 %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="指定宽度"><a href="#指定宽度" class="headerlink" title="指定宽度"></a>指定宽度</h2><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://api.ixiaowai.cn/gqapi/gqapi.php" class="lazyload placeholder" data-srcset="https://api.ixiaowai.cn/gqapi/gqapi.php" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="随机生成风景（alt描述可有可无）" style="width:400px;"/></div><span class="image-caption">随机生成风景（alt描述可有可无）</span></div><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://api.ixiaowai.cn/api/api.php" class="lazyload placeholder" data-srcset="https://api.ixiaowai.cn/api/api.php" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="随机生成二次元壁纸" style="width:400px;"/></div><span class="image-caption">随机生成二次元壁纸</span></div><h3 id="上述事例代码-2"><a href="#上述事例代码-2" class="headerlink" title="上述事例代码"></a>上述事例代码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% image https://api.ixiaowai.cn/gqapi/gqapi.php, width=400px, alt=随机生成风景（alt描述可有可无） %&#125;&#123;% image https://api.ixiaowai.cn/api/api.php, width=400px, alt=随机生成二次元壁纸 %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="设置占位背景色"><a href="#设置占位背景色" class="headerlink" title="设置占位背景色"></a>设置占位背景色</h2><div class="img-wrap"><div class="img-bg" style="background:#1D0C04"><img class="img lazyload placeholder" src="https://api.ixiaowai.cn/mcapi/mcapi.php" class="lazyload placeholder" data-srcset="https://api.ixiaowai.cn/mcapi/mcapi.php" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="随机生成呆萌酱" style="width:400px;"/></div><span class="image-caption">随机生成呆萌酱</span></div><h3 id="上述事例代码-3"><a href="#上述事例代码-3" class="headerlink" title="上述事例代码"></a>上述事例代码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% image  https://api.ixiaowai.cn/mcapi/mcapi.php, width=400px, bg=#1D0C04, alt=随机生成呆萌酱 %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 class="bamboo-h " id="gallery图片">gallery图片</h1><br/><blockquote><p>使用该标签请先将主题下的_config.yml中的fancybox设置为true</p></blockquote><h2 id="一行一个图片"><a href="#一行一个图片" class="headerlink" title="一行一个图片"></a>一行一个图片</h2><div class="gallery ">              <p><img src="https://pic4.zhimg.com/80/v2-515859a54d7c9b89c070c6132dff4527_1440w.jpg?source=1940ef5c" class="lazyload placeholder" data-srcset="https://pic4.zhimg.com/80/v2-515859a54d7c9b89c070c6132dff4527_1440w.jpg?source=1940ef5c" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="图片描述"></p>            </div><h3 id="上述事例代码-4"><a href="#上述事例代码-4" class="headerlink" title="上述事例代码"></a>上述事例代码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% gallery %&#125;<span class="token url"><span class="token operator">!</span>[<span class="token content">图片描述</span>](<span class="token url">https://pic4.zhimg.com/80/v2-515859a54d7c9b89c070c6132dff4527_1440w.jpg?source=1940ef5c</span>)</span>&#123;% endgallery %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="一行多个图片（不换行）"><a href="#一行多个图片（不换行）" class="headerlink" title="一行多个图片（不换行）"></a>一行多个图片（不换行）</h2><div class="gallery ">              <p><img src="https://pic2.zhimg.com/80/v2-bcb819edb98e081817066eb6b0e6a2ef_1440w.jpg?source=1940ef5c" class="lazyload placeholder" data-srcset="https://pic2.zhimg.com/80/v2-bcb819edb98e081817066eb6b0e6a2ef_1440w.jpg?source=1940ef5c" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="图片描述"><br><img src="https://pic2.zhimg.com/80/v2-f1b467abef1caeb5537f399da4ddbc9d_1440w.jpg?source=1940ef5c" class="lazyload placeholder" data-srcset="https://pic2.zhimg.com/80/v2-f1b467abef1caeb5537f399da4ddbc9d_1440w.jpg?source=1940ef5c" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="图片描述"><br><img src="https://pic2.zhimg.com/80/v2-c513cb0d2eff43b5391ea682f1ba07c6_1440w.jpg?source=1940ef5c" class="lazyload placeholder" data-srcset="https://pic2.zhimg.com/80/v2-c513cb0d2eff43b5391ea682f1ba07c6_1440w.jpg?source=1940ef5c" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="图片描述"></p>            </div><h3 id="上述事例代码-5"><a href="#上述事例代码-5" class="headerlink" title="上述事例代码"></a>上述事例代码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% gallery %&#125;<span class="token url"><span class="token operator">!</span>[<span class="token content">图片描述</span>](<span class="token url">https://pic2.zhimg.com/80/v2-bcb819edb98e081817066eb6b0e6a2ef_1440w.jpg?source=1940ef5c</span>)</span><span class="token url"><span class="token operator">!</span>[<span class="token content">图片描述</span>](<span class="token url">https://pic2.zhimg.com/80/v2-f1b467abef1caeb5537f399da4ddbc9d_1440w.jpg?source=1940ef5c</span>)</span><span class="token url"><span class="token operator">!</span>[<span class="token content">图片描述</span>](<span class="token url">https://pic2.zhimg.com/80/v2-c513cb0d2eff43b5391ea682f1ba07c6_1440w.jpg?source=1940ef5c</span>)</span>&#123;% endgallery %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="多行多个图片（每行2～8个图片）"><a href="#多行多个图片（每行2～8个图片）" class="headerlink" title="多行多个图片（每行2～8个图片）"></a>多行多个图片（每行2～8个图片）</h2><div class="gallery stretch" col='4'>              <p><img src="https://pic2.zhimg.com/80/v2-bcb819edb98e081817066eb6b0e6a2ef_1440w.jpg?source=1940ef5c" class="lazyload placeholder" data-srcset="https://pic2.zhimg.com/80/v2-bcb819edb98e081817066eb6b0e6a2ef_1440w.jpg?source=1940ef5c" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="图片描述"><br><img src="https://pic2.zhimg.com/80/v2-f1b467abef1caeb5537f399da4ddbc9d_1440w.jpg?source=1940ef5c" class="lazyload placeholder" data-srcset="https://pic2.zhimg.com/80/v2-f1b467abef1caeb5537f399da4ddbc9d_1440w.jpg?source=1940ef5c" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="图片描述"><br><img src="https://pic2.zhimg.com/80/v2-c513cb0d2eff43b5391ea682f1ba07c6_1440w.jpg?source=1940ef5c" class="lazyload placeholder" data-srcset="https://pic2.zhimg.com/80/v2-c513cb0d2eff43b5391ea682f1ba07c6_1440w.jpg?source=1940ef5c" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="图片描述"><br><img src="https://pic2.zhimg.com/80/v2-bcb819edb98e081817066eb6b0e6a2ef_1440w.jpg?source=1940ef5c" class="lazyload placeholder" data-srcset="https://pic2.zhimg.com/80/v2-bcb819edb98e081817066eb6b0e6a2ef_1440w.jpg?source=1940ef5c" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="图片描述"><br><img src="https://pic2.zhimg.com/80/v2-f1b467abef1caeb5537f399da4ddbc9d_1440w.jpg?source=1940ef5c" class="lazyload placeholder" data-srcset="https://pic2.zhimg.com/80/v2-f1b467abef1caeb5537f399da4ddbc9d_1440w.jpg?source=1940ef5c" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="图片描述"><br><img src="https://pic2.zhimg.com/80/v2-c513cb0d2eff43b5391ea682f1ba07c6_1440w.jpg?source=1940ef5c" class="lazyload placeholder" data-srcset="https://pic2.zhimg.com/80/v2-c513cb0d2eff43b5391ea682f1ba07c6_1440w.jpg?source=1940ef5c" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="图片描述"></p>            </div><h3 id="上述事例代码-6"><a href="#上述事例代码-6" class="headerlink" title="上述事例代码"></a>上述事例代码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% gallery stretch, 4 %&#125;<span class="token url"><span class="token operator">!</span>[<span class="token content">图片描述</span>](<span class="token url">https://pic2.zhimg.com/80/v2-bcb819edb98e081817066eb6b0e6a2ef_1440w.jpg?source=1940ef5c</span>)</span><span class="token url"><span class="token operator">!</span>[<span class="token content">图片描述</span>](<span class="token url">https://pic2.zhimg.com/80/v2-f1b467abef1caeb5537f399da4ddbc9d_1440w.jpg?source=1940ef5c</span>)</span><span class="token url"><span class="token operator">!</span>[<span class="token content">图片描述</span>](<span class="token url">https://pic2.zhimg.com/80/v2-c513cb0d2eff43b5391ea682f1ba07c6_1440w.jpg?source=1940ef5c</span>)</span><span class="token url"><span class="token operator">!</span>[<span class="token content">图片描述</span>](<span class="token url">https://pic2.zhimg.com/80/v2-bcb819edb98e081817066eb6b0e6a2ef_1440w.jpg?source=1940ef5c</span>)</span><span class="token url"><span class="token operator">!</span>[<span class="token content">图片描述</span>](<span class="token url">https://pic2.zhimg.com/80/v2-f1b467abef1caeb5537f399da4ddbc9d_1440w.jpg?source=1940ef5c</span>)</span><span class="token url"><span class="token operator">!</span>[<span class="token content">图片描述</span>](<span class="token url">https://pic2.zhimg.com/80/v2-c513cb0d2eff43b5391ea682f1ba07c6_1440w.jpg?source=1940ef5c</span>)</span>&#123;% endgallery %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="多行多个图片（每行2～8个图片）-1"><a href="#多行多个图片（每行2～8个图片）-1" class="headerlink" title="多行多个图片（每行2～8个图片）"></a>多行多个图片（每行2～8个图片）</h2><div class="gallery stretch" col='8'>              <p><img src="https://pic2.zhimg.com/80/v2-bcb819edb98e081817066eb6b0e6a2ef_1440w.jpg?source=1940ef5c" class="lazyload placeholder" data-srcset="https://pic2.zhimg.com/80/v2-bcb819edb98e081817066eb6b0e6a2ef_1440w.jpg?source=1940ef5c" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="图片描述"><br><img src="https://pic2.zhimg.com/80/v2-f1b467abef1caeb5537f399da4ddbc9d_1440w.jpg?source=1940ef5c" class="lazyload placeholder" data-srcset="https://pic2.zhimg.com/80/v2-f1b467abef1caeb5537f399da4ddbc9d_1440w.jpg?source=1940ef5c" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="图片描述"><br><img src="https://pic2.zhimg.com/80/v2-c513cb0d2eff43b5391ea682f1ba07c6_1440w.jpg?source=1940ef5c" class="lazyload placeholder" data-srcset="https://pic2.zhimg.com/80/v2-c513cb0d2eff43b5391ea682f1ba07c6_1440w.jpg?source=1940ef5c" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="图片描述"><br><img src="https://pic2.zhimg.com/80/v2-d0fe3a2cc79628c6a017f0066d4dee63_1440w.jpg?source=1940ef5c" class="lazyload placeholder" data-srcset="https://pic2.zhimg.com/80/v2-d0fe3a2cc79628c6a017f0066d4dee63_1440w.jpg?source=1940ef5c" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="图片描述"><br><img src="https://pic4.zhimg.com/80/v2-f7d6c7021cff3e23d8481faec2048890_1440w.jpg?source=1940ef5c" class="lazyload placeholder" data-srcset="https://pic4.zhimg.com/80/v2-f7d6c7021cff3e23d8481faec2048890_1440w.jpg?source=1940ef5c" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="图片描述"><br><img src="https://pic4.zhimg.com/80/v2-d191b620ff97a55b634786528206002a_1440w.jpg?source=1940ef5c" class="lazyload placeholder" data-srcset="https://pic4.zhimg.com/80/v2-d191b620ff97a55b634786528206002a_1440w.jpg?source=1940ef5c" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="图片描述"><br><img src="https://pic2.zhimg.com/80/v2-bcb819edb98e081817066eb6b0e6a2ef_1440w.jpg?source=1940ef5c" class="lazyload placeholder" data-srcset="https://pic2.zhimg.com/80/v2-bcb819edb98e081817066eb6b0e6a2ef_1440w.jpg?source=1940ef5c" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="图片描述"><br><img src="https://pic2.zhimg.com/80/v2-f1b467abef1caeb5537f399da4ddbc9d_1440w.jpg?source=1940ef5c" class="lazyload placeholder" data-srcset="https://pic2.zhimg.com/80/v2-f1b467abef1caeb5537f399da4ddbc9d_1440w.jpg?source=1940ef5c" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="图片描述"><br><img src="https://pic2.zhimg.com/80/v2-c513cb0d2eff43b5391ea682f1ba07c6_1440w.jpg?source=1940ef5c" class="lazyload placeholder" data-srcset="https://pic2.zhimg.com/80/v2-c513cb0d2eff43b5391ea682f1ba07c6_1440w.jpg?source=1940ef5c" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="图片描述"><br><img src="https://pic2.zhimg.com/80/v2-d0fe3a2cc79628c6a017f0066d4dee63_1440w.jpg?source=1940ef5c" class="lazyload placeholder" data-srcset="https://pic2.zhimg.com/80/v2-d0fe3a2cc79628c6a017f0066d4dee63_1440w.jpg?source=1940ef5c" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="图片描述"><br><img src="https://pic4.zhimg.com/80/v2-f7d6c7021cff3e23d8481faec2048890_1440w.jpg?source=1940ef5c" class="lazyload placeholder" data-srcset="https://pic4.zhimg.com/80/v2-f7d6c7021cff3e23d8481faec2048890_1440w.jpg?source=1940ef5c" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="图片描述"><br><img src="https://pic4.zhimg.com/80/v2-d191b620ff97a55b634786528206002a_1440w.jpg?source=1940ef5c" class="lazyload placeholder" data-srcset="https://pic4.zhimg.com/80/v2-d191b620ff97a55b634786528206002a_1440w.jpg?source=1940ef5c" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="图片描述"><br><img src="https://pic2.zhimg.com/80/v2-f1b467abef1caeb5537f399da4ddbc9d_1440w.jpg?source=1940ef5c" class="lazyload placeholder" data-srcset="https://pic2.zhimg.com/80/v2-f1b467abef1caeb5537f399da4ddbc9d_1440w.jpg?source=1940ef5c" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="图片描述"><br><img src="https://pic2.zhimg.com/80/v2-c513cb0d2eff43b5391ea682f1ba07c6_1440w.jpg?source=1940ef5c" class="lazyload placeholder" data-srcset="https://pic2.zhimg.com/80/v2-c513cb0d2eff43b5391ea682f1ba07c6_1440w.jpg?source=1940ef5c" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="图片描述"><br><img src="https://pic2.zhimg.com/80/v2-d0fe3a2cc79628c6a017f0066d4dee63_1440w.jpg?source=1940ef5c" class="lazyload placeholder" data-srcset="https://pic2.zhimg.com/80/v2-d0fe3a2cc79628c6a017f0066d4dee63_1440w.jpg?source=1940ef5c" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="图片描述"><br><img src="https://pic4.zhimg.com/80/v2-f7d6c7021cff3e23d8481faec2048890_1440w.jpg?source=1940ef5c" class="lazyload placeholder" data-srcset="https://pic4.zhimg.com/80/v2-f7d6c7021cff3e23d8481faec2048890_1440w.jpg?source=1940ef5c" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="图片描述"></p>            </div><h3 id="上述事例代码-7"><a href="#上述事例代码-7" class="headerlink" title="上述事例代码"></a>上述事例代码</h3><p>多行多个图片（每行2～8个图片）</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% gallery stretch, 8 %&#125;<span class="token url"><span class="token operator">!</span>[<span class="token content">图片描述</span>](<span class="token url">https://pic2.zhimg.com/80/v2-bcb819edb98e081817066eb6b0e6a2ef_1440w.jpg?source=1940ef5c</span>)</span><span class="token url"><span class="token operator">!</span>[<span class="token content">图片描述</span>](<span class="token url">https://pic2.zhimg.com/80/v2-f1b467abef1caeb5537f399da4ddbc9d_1440w.jpg?source=1940ef5c</span>)</span><span class="token url"><span class="token operator">!</span>[<span class="token content">图片描述</span>](<span class="token url">https://pic2.zhimg.com/80/v2-c513cb0d2eff43b5391ea682f1ba07c6_1440w.jpg?source=1940ef5c</span>)</span><span class="token url"><span class="token operator">!</span>[<span class="token content">图片描述</span>](<span class="token url">https://pic2.zhimg.com/80/v2-d0fe3a2cc79628c6a017f0066d4dee63_1440w.jpg?source=1940ef5c</span>)</span><span class="token url"><span class="token operator">!</span>[<span class="token content">图片描述</span>](<span class="token url">https://pic4.zhimg.com/80/v2-f7d6c7021cff3e23d8481faec2048890_1440w.jpg?source=1940ef5c</span>)</span><span class="token url"><span class="token operator">!</span>[<span class="token content">图片描述</span>](<span class="token url">https://pic4.zhimg.com/80/v2-d191b620ff97a55b634786528206002a_1440w.jpg?source=1940ef5c</span>)</span><span class="token url"><span class="token operator">!</span>[<span class="token content">图片描述</span>](<span class="token url">https://pic2.zhimg.com/80/v2-bcb819edb98e081817066eb6b0e6a2ef_1440w.jpg?source=1940ef5c</span>)</span><span class="token url"><span class="token operator">!</span>[<span class="token content">图片描述</span>](<span class="token url">https://pic2.zhimg.com/80/v2-f1b467abef1caeb5537f399da4ddbc9d_1440w.jpg?source=1940ef5c</span>)</span><span class="token url"><span class="token operator">!</span>[<span class="token content">图片描述</span>](<span class="token url">https://pic2.zhimg.com/80/v2-c513cb0d2eff43b5391ea682f1ba07c6_1440w.jpg?source=1940ef5c</span>)</span><span class="token url"><span class="token operator">!</span>[<span class="token content">图片描述</span>](<span class="token url">https://pic2.zhimg.com/80/v2-d0fe3a2cc79628c6a017f0066d4dee63_1440w.jpg?source=1940ef5c</span>)</span><span class="token url"><span class="token operator">!</span>[<span class="token content">图片描述</span>](<span class="token url">https://pic4.zhimg.com/80/v2-f7d6c7021cff3e23d8481faec2048890_1440w.jpg?source=1940ef5c</span>)</span><span class="token url"><span class="token operator">!</span>[<span class="token content">图片描述</span>](<span class="token url">https://pic4.zhimg.com/80/v2-d191b620ff97a55b634786528206002a_1440w.jpg?source=1940ef5c</span>)</span><span class="token url"><span class="token operator">!</span>[<span class="token content">图片描述</span>](<span class="token url">https://pic2.zhimg.com/80/v2-f1b467abef1caeb5537f399da4ddbc9d_1440w.jpg?source=1940ef5c</span>)</span><span class="token url"><span class="token operator">!</span>[<span class="token content">图片描述</span>](<span class="token url">https://pic2.zhimg.com/80/v2-c513cb0d2eff43b5391ea682f1ba07c6_1440w.jpg?source=1940ef5c</span>)</span><span class="token url"><span class="token operator">!</span>[<span class="token content">图片描述</span>](<span class="token url">https://pic2.zhimg.com/80/v2-d0fe3a2cc79628c6a017f0066d4dee63_1440w.jpg?source=1940ef5c</span>)</span><span class="token url"><span class="token operator">!</span>[<span class="token content">图片描述</span>](<span class="token url">https://pic4.zhimg.com/80/v2-f7d6c7021cff3e23d8481faec2048890_1440w.jpg?source=1940ef5c</span>)</span>&#123;% endgallery %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="组合使用"><a href="#组合使用" class="headerlink" title="组合使用"></a>组合使用</h2><div class="gallery ">              <p><img src="https://pic2.zhimg.com/80/v2-bcb819edb98e081817066eb6b0e6a2ef_1440w.jpg?source=1940ef5c" class="lazyload placeholder" data-srcset="https://pic2.zhimg.com/80/v2-bcb819edb98e081817066eb6b0e6a2ef_1440w.jpg?source=1940ef5c" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="图片描述"><br><img src="https://pic2.zhimg.com/80/v2-f1b467abef1caeb5537f399da4ddbc9d_1440w.jpg?source=1940ef5c" class="lazyload placeholder" data-srcset="https://pic2.zhimg.com/80/v2-f1b467abef1caeb5537f399da4ddbc9d_1440w.jpg?source=1940ef5c" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="图片描述"></p>            </div><div class="gallery ">              <p><img src="https://pic2.zhimg.com/80/v2-bcb819edb98e081817066eb6b0e6a2ef_1440w.jpg?source=1940ef5c" class="lazyload placeholder" data-srcset="https://pic2.zhimg.com/80/v2-bcb819edb98e081817066eb6b0e6a2ef_1440w.jpg?source=1940ef5c" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="图片描述"><br><img src="https://pic2.zhimg.com/80/v2-f1b467abef1caeb5537f399da4ddbc9d_1440w.jpg?source=1940ef5c" class="lazyload placeholder" data-srcset="https://pic2.zhimg.com/80/v2-f1b467abef1caeb5537f399da4ddbc9d_1440w.jpg?source=1940ef5c" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="图片描述"><br><img src="https://pic2.zhimg.com/80/v2-c513cb0d2eff43b5391ea682f1ba07c6_1440w.jpg?source=1940ef5c" class="lazyload placeholder" data-srcset="https://pic2.zhimg.com/80/v2-c513cb0d2eff43b5391ea682f1ba07c6_1440w.jpg?source=1940ef5c" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="图片描述"><br><img src="https://pic2.zhimg.com/80/v2-c513cb0d2eff43b5391ea682f1ba07c6_1440w.jpg?source=1940ef5c" class="lazyload placeholder" data-srcset="https://pic2.zhimg.com/80/v2-c513cb0d2eff43b5391ea682f1ba07c6_1440w.jpg?source=1940ef5c" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="图片描述"></p>            </div><div class="gallery ">              <p><img src="https://pic2.zhimg.com/80/v2-bcb819edb98e081817066eb6b0e6a2ef_1440w.jpg?source=1940ef5c" class="lazyload placeholder" data-srcset="https://pic2.zhimg.com/80/v2-bcb819edb98e081817066eb6b0e6a2ef_1440w.jpg?source=1940ef5c" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="图片描述"><br><img src="https://pic2.zhimg.com/80/v2-f1b467abef1caeb5537f399da4ddbc9d_1440w.jpg?source=1940ef5c" class="lazyload placeholder" data-srcset="https://pic2.zhimg.com/80/v2-f1b467abef1caeb5537f399da4ddbc9d_1440w.jpg?source=1940ef5c" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="图片描述"></p>            </div><h3 id="上述事例代码-8"><a href="#上述事例代码-8" class="headerlink" title="上述事例代码"></a>上述事例代码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% gallery %&#125;<span class="token url"><span class="token operator">!</span>[<span class="token content">图片描述</span>](<span class="token url">https://pic2.zhimg.com/80/v2-bcb819edb98e081817066eb6b0e6a2ef_1440w.jpg?source=1940ef5c</span>)</span><span class="token url"><span class="token operator">!</span>[<span class="token content">图片描述</span>](<span class="token url">https://pic2.zhimg.com/80/v2-f1b467abef1caeb5537f399da4ddbc9d_1440w.jpg?source=1940ef5c</span>)</span>&#123;% endgallery %&#125;&#123;% gallery %&#125;<span class="token url"><span class="token operator">!</span>[<span class="token content">图片描述</span>](<span class="token url">https://pic2.zhimg.com/80/v2-bcb819edb98e081817066eb6b0e6a2ef_1440w.jpg?source=1940ef5c</span>)</span><span class="token url"><span class="token operator">!</span>[<span class="token content">图片描述</span>](<span class="token url">https://pic2.zhimg.com/80/v2-f1b467abef1caeb5537f399da4ddbc9d_1440w.jpg?source=1940ef5c</span>)</span><span class="token url"><span class="token operator">!</span>[<span class="token content">图片描述</span>](<span class="token url">https://pic2.zhimg.com/80/v2-c513cb0d2eff43b5391ea682f1ba07c6_1440w.jpg?source=1940ef5c</span>)</span><span class="token url"><span class="token operator">!</span>[<span class="token content">图片描述</span>](<span class="token url">https://pic2.zhimg.com/80/v2-c513cb0d2eff43b5391ea682f1ba07c6_1440w.jpg?source=1940ef5c</span>)</span>&#123;% endgallery %&#125;&#123;% gallery %&#125;<span class="token url"><span class="token operator">!</span>[<span class="token content">图片描述</span>](<span class="token url">https://pic2.zhimg.com/80/v2-bcb819edb98e081817066eb6b0e6a2ef_1440w.jpg?source=1940ef5c</span>)</span><span class="token url"><span class="token operator">!</span>[<span class="token content">图片描述</span>](<span class="token url">https://pic2.zhimg.com/80/v2-f1b467abef1caeb5537f399da4ddbc9d_1440w.jpg?source=1940ef5c</span>)</span>&#123;% endgallery %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 class="bamboo-h " id="galleryGroup图片">galleryGroup图片</h1><br/> <blockquote><p>提示:使用该标签请先将主题下的_config.yml中的fancybox设置为true</p></blockquote><h2 id="galleryGroup图片示例"><a href="#galleryGroup图片示例" class="headerlink" title="galleryGroup图片示例"></a>galleryGroup图片示例</h2><div class="gallery-group-main">      <figure class="gallery-group">  <img class="gallery-group-img" src='https://pic1.zhimg.com/80/v2-23c3820e8abfb1cef689531af2dc6d09_1440w.jpg?source=1940ef5c' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">壁纸</div>  <p>收藏的一些壁纸</p>  <a href='/gallery/bizhi'></a>  </figcaption>  </figure>        <figure class="gallery-group">  <img class="gallery-group-img" src='https://pic1.zhimg.com/80/v2-8d542d68cbbf0e5f503da9e3f72b8447_1440w.jpg?source=1940ef5c' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">古典图片</div>  <p>中国古典图片</p>  <a href='/gallery/gudian'></a>  </figcaption>  </figure>        <figure class="gallery-group">  <img class="gallery-group-img" src='https://pic1.zhimg.com/80/v2-56164ef0695767475935c9e019c594ae_1440w.jpg?source=1940ef5c' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">风景</div>  <p>风景图片</p>  <a href='/gallery/fengjing'></a>  </figcaption>  </figure>  </div><h3 id="上述示例代码"><a href="#上述示例代码" class="headerlink" title="上述示例代码"></a>上述示例代码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gallery-group-main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &#123;% galleryGroup '壁纸' '收藏的一些壁纸' '/gallery/bizhi' https://pic1.zhimg.com/80/v2-23c3820e8abfb1cef689531af2dc6d09_1440w.jpg?source=1940ef5c %&#125;    &#123;% galleryGroup '古典图片' '中国古典图片' '/gallery/gudian' https://pic1.zhimg.com/80/v2-8d542d68cbbf0e5f503da9e3f72b8447_1440w.jpg?source=1940ef5c %&#125;    &#123;% galleryGroup '风景' '风景图片' '/gallery/fengjing' https://pic1.zhimg.com/80/v2-56164ef0695767475935c9e019c594ae_1440w.jpg?source=1940ef5c %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 class="bamboo-h " id="audio音频效果展示">audio音频效果展示</h1><br/><div class="audio"><audio controls preload><source src='http://qiniu.cunzhuang.top/%E5%85%AD%E5%93%B2%20-%20%E4%BD%A0%E7%9A%84%E5%BF%83%E6%98%AF%E5%90%A6%E4%B9%9F%E6%9C%89%E6%88%91%E7%9A%84%E5%90%8D.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div><h3 id="上述示例代码-1"><a href="#上述示例代码-1" class="headerlink" title="上述示例代码"></a>上述示例代码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% title h1, audio音频效果展示 %&#125;&#123;% audio http://qiniu.cunzhuang.top/%E5%85%AD%E5%93%B2%20-%20%E4%BD%A0%E7%9A%84%E5%BF%83%E6%98%AF%E5%90%A6%E4%B9%9F%E6%9C%89%E6%88%91%E7%9A%84%E5%90%8D.mp3 %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 class="bamboo-h " id="video演示">video演示</h1><br/><p>100%宽度</p><div class="video"><video controls preload><source src='https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div><p>50%宽度</p><div class="videos" col='2'><div class="video"><video controls preload><source src='https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div></div><p>25%宽度</p><div class="videos" col='4'><div class="video"><video controls preload><source src='https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div></div><h3 id="上述事例代码-9"><a href="#上述事例代码-9" class="headerlink" title="上述事例代码"></a>上述事例代码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% title h1, video演示 %&#125;100%宽度&#123;% video  https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4 %&#125;50%宽度&#123;% videos, 2 %&#125;&#123;% video  https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4 %&#125;&#123;% video  https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4 %&#125;&#123;% video  https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4 %&#125;&#123;% video  https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4 %&#125;&#123;% endvideos %&#125;25%宽度&#123;% videos, 4 %&#125;&#123;% video  https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4 %&#125;&#123;% video  https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4 %&#125;&#123;% video  https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4 %&#125;&#123;% video  https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4 %&#125;&#123;% video  https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4 %&#125;&#123;% video  https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4 %&#125;&#123;% video  https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4 %&#125;&#123;% video  https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4 %&#125;&#123;% endvideos %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 本站介绍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> media </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主题介绍-github书写功能</title>
      <link href="/post/ben-zhan-jie-shao/zhu-ti-jie-shao-github-shu-xie-gong-neng/"/>
      <url>/post/ben-zhan-jie-shao/zhu-ti-jie-shao-github-shu-xie-gong-neng/</url>
      
        <content type="html"><![CDATA[<h1 class="bamboo-h " id="Github用户卡片">Github用户卡片</h1><br/><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/jimyfengqi"><img src="https://github-readme-stats.vercel.app/api/?username=jimyfengqi&show_owner=true" class="lazyload placeholder" data-srcset="https://github-readme-stats.vercel.app/api/?username=jimyfengqi&show_owner=true" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></a><h3 id="上述示例代码"><a href="#上述示例代码" class="headerlink" title="上述示例代码"></a>上述示例代码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% ghcard jimyfengqi %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="表格中加入用户卡片"><a href="#表格中加入用户卡片" class="headerlink" title="表格中加入用户卡片"></a>表格中加入用户卡片</h2><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/jimyfengqi"><img src="https://github-readme-stats.vercel.app/api/?username=jimyfengqi&show_owner=true" class="lazyload placeholder" data-srcset="https://github-readme-stats.vercel.app/api/?username=jimyfengqi&show_owner=true" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/jimyfengqi"><img src="https://github-readme-stats.vercel.app/api/?username=jimyfengqi&theme=vue&show_owner=true" class="lazyload placeholder" data-srcset="https://github-readme-stats.vercel.app/api/?username=jimyfengqi&theme=vue&show_owner=true" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/jimyfengqi"><img src="https://github-readme-stats.vercel.app/api/?username=jimyfengqi&theme=buefy&show_owner=true" class="lazyload placeholder" data-srcset="https://github-readme-stats.vercel.app/api/?username=jimyfengqi&theme=buefy&show_owner=true" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/jimyfengqi"><img src="https://github-readme-stats.vercel.app/api/?username=jimyfengqi&theme=solarized-light&show_owner=true" class="lazyload placeholder" data-srcset="https://github-readme-stats.vercel.app/api/?username=jimyfengqi&theme=solarized-light&show_owner=true" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/jimyfengqi"><img src="https://github-readme-stats.vercel.app/api/?username=jimyfengqi&theme=onedark&show_owner=true" class="lazyload placeholder" data-srcset="https://github-readme-stats.vercel.app/api/?username=jimyfengqi&theme=onedark&show_owner=true" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/jimyfengqi"><img src="https://github-readme-stats.vercel.app/api/?username=jimyfengqi&theme=solarized-dark&show_owner=true" class="lazyload placeholder" data-srcset="https://github-readme-stats.vercel.app/api/?username=jimyfengqi&theme=solarized-dark&show_owner=true" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/jimyfengqi"><img src="https://github-readme-stats.vercel.app/api/?username=jimyfengqi&theme=algolia&show_owner=true" class="lazyload placeholder" data-srcset="https://github-readme-stats.vercel.app/api/?username=jimyfengqi&theme=algolia&show_owner=true" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/jimyfengqi"><img src="https://github-readme-stats.vercel.app/api/?username=jimyfengqi&theme=calm&show_owner=true" class="lazyload placeholder" data-srcset="https://github-readme-stats.vercel.app/api/?username=jimyfengqi&theme=calm&show_owner=true" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></a></td></tr></tbody></table><h3 id="上述示例代码-1"><a href="#上述示例代码-1" class="headerlink" title="上述示例代码"></a>上述示例代码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">| &#123;% ghcard jimyfengqi %&#125; | &#123;% ghcard jimyfengqi, theme=vue %&#125; || -- | -- || &#123;% ghcard jimyfengqi, theme=buefy %&#125; | &#123;% ghcard jimyfengqi, theme=solarized-light %&#125; || &#123;% ghcard jimyfengqi, theme=onedark %&#125; | &#123;% ghcard jimyfengqi, theme=solarized-dark %&#125; || &#123;% ghcard jimyfengqi, theme=algolia %&#125; | &#123;% ghcard jimyfengqi, theme=calm %&#125; |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="单个项目卡片"><a href="#单个项目卡片" class="headerlink" title="单个项目卡片"></a>单个项目卡片</h2><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/jimyfengqi/hexo-theme-bomboo"><img src="https://github-readme-stats.vercel.app/api/pin/?username=jimyfengqi&repo=hexo-theme-bomboo&show_owner=true" class="lazyload placeholder" data-srcset="https://github-readme-stats.vercel.app/api/pin/?username=jimyfengqi&repo=hexo-theme-bomboo&show_owner=true" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></a><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/jimyfengqi/hexo-theme-bomboo"><img src="https://github-readme-stats.vercel.app/api/pin/?username=jimyfengqi&repo=hexo-theme-bomboo&show_owner=true" class="lazyload placeholder" data-srcset="https://github-readme-stats.vercel.app/api/pin/?username=jimyfengqi&repo=hexo-theme-bomboo&show_owner=true" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></a><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/jimyfengqi/hexo-theme-bomboo"><img src="https://github-readme-stats.vercel.app/api/pin/?username=jimyfengqi&repo=hexo-theme-bomboo&show_owner=true" class="lazyload placeholder" data-srcset="https://github-readme-stats.vercel.app/api/pin/?username=jimyfengqi&repo=hexo-theme-bomboo&show_owner=true" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></a><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/jimyfengqi/hexo-theme-bomboo"><img src="https://github-readme-stats.vercel.app/api/pin/?username=jimyfengqi&repo=hexo-theme-bomboo&show_owner=true" class="lazyload placeholder" data-srcset="https://github-readme-stats.vercel.app/api/pin/?username=jimyfengqi&repo=hexo-theme-bomboo&show_owner=true" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></a><h3 id="上述事例代码"><a href="#上述事例代码" class="headerlink" title="上述事例代码"></a>上述事例代码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% ghcard jimyfengqi/hexo-theme-bomboo %&#125;&#123;% ghcard jimyfengqi/hexo-theme-bomboo %&#125;&#123;% ghcard jimyfengqi/hexo-theme-bomboo %&#125;&#123;% ghcard jimyfengqi/hexo-theme-bomboo %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="表格中加入单个项目卡片"><a href="#表格中加入单个项目卡片" class="headerlink" title="表格中加入单个项目卡片"></a>表格中加入单个项目卡片</h2><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/jimyfengqi/hexo-theme-bomboo"><img src="https://github-readme-stats.vercel.app/api/pin/?username=jimyfengqi&repo=hexo-theme-bomboo&show_owner=true" class="lazyload placeholder" data-srcset="https://github-readme-stats.vercel.app/api/pin/?username=jimyfengqi&repo=hexo-theme-bomboo&show_owner=true" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/jimyfengqi/hexo-theme-bomboo"><img src="https://github-readme-stats.vercel.app/api/pin/?username=jimyfengqi&repo=hexo-theme-bomboo&theme=vue&show_owner=true" class="lazyload placeholder" data-srcset="https://github-readme-stats.vercel.app/api/pin/?username=jimyfengqi&repo=hexo-theme-bomboo&theme=vue&show_owner=true" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/jimyfengqi/hexo-theme-bomboo"><img src="https://github-readme-stats.vercel.app/api/pin/?username=jimyfengqi&repo=hexo-theme-bomboo&theme=buefy&show_owner=true" class="lazyload placeholder" data-srcset="https://github-readme-stats.vercel.app/api/pin/?username=jimyfengqi&repo=hexo-theme-bomboo&theme=buefy&show_owner=true" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/jimyfengqi/hexo-theme-bomboo"><img src="https://github-readme-stats.vercel.app/api/pin/?username=jimyfengqi&repo=hexo-theme-bomboo&theme=solarized-light&show_owner=true" class="lazyload placeholder" data-srcset="https://github-readme-stats.vercel.app/api/pin/?username=jimyfengqi&repo=hexo-theme-bomboo&theme=solarized-light&show_owner=true" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/jimyfengqi/hexo-theme-bomboo"><img src="https://github-readme-stats.vercel.app/api/pin/?username=jimyfengqi&repo=hexo-theme-bomboo&theme=onedark&show_owner=true" class="lazyload placeholder" data-srcset="https://github-readme-stats.vercel.app/api/pin/?username=jimyfengqi&repo=hexo-theme-bomboo&theme=onedark&show_owner=true" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/jimyfengqi/hexo-theme-bomboo"><img src="https://github-readme-stats.vercel.app/api/pin/?username=jimyfengqi&repo=hexo-theme-bomboo&theme=solarized-dark&show_owner=true" class="lazyload placeholder" data-srcset="https://github-readme-stats.vercel.app/api/pin/?username=jimyfengqi&repo=hexo-theme-bomboo&theme=solarized-dark&show_owner=true" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/jimyfengqi/hexo-theme-bomboo"><img src="https://github-readme-stats.vercel.app/api/pin/?username=jimyfengqi&repo=hexo-theme-bomboo&theme=algolia&show_owner=true" class="lazyload placeholder" data-srcset="https://github-readme-stats.vercel.app/api/pin/?username=jimyfengqi&repo=hexo-theme-bomboo&theme=algolia&show_owner=true" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/jimyfengqi/hexo-theme-bomboo"><img src="https://github-readme-stats.vercel.app/api/pin/?username=jimyfengqi&repo=hexo-theme-bomboo&theme=calm&show_owner=true" class="lazyload placeholder" data-srcset="https://github-readme-stats.vercel.app/api/pin/?username=jimyfengqi&repo=hexo-theme-bomboo&theme=calm&show_owner=true" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></a></td></tr></tbody></table><h3 id="上述事例代码-1"><a href="#上述事例代码-1" class="headerlink" title="上述事例代码"></a>上述事例代码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">| &#123;% ghcard jimyfengqi/hexo-theme-bomboo %&#125; | &#123;% ghcard jimyfengqi/hexo-theme-bomboo, theme=vue %&#125; || -- | -- || &#123;% ghcard jimyfengqi/hexo-theme-bomboo, theme=buefy %&#125; | &#123;% ghcard jimyfengqi/hexo-theme-bomboo, theme=solarized-light %&#125; || &#123;% ghcard jimyfengqi/hexo-theme-bomboo, theme=onedark %&#125; | &#123;% ghcard jimyfengqi/hexo-theme-bomboo, theme=solarized-dark %&#125; || &#123;% ghcard jimyfengqi/hexo-theme-bomboo, theme=algolia %&#125; | &#123;% ghcard jimyfengqi/hexo-theme-bomboo, theme=calm %&#125; |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 class="bamboo-h " id="issues-sites标签">issues-sites标签</h1><br/><p>该标签会去拿到某个repo仓库的issue内容，用sites标签的形式显示出来，可以用做网站的友链功能<br>该标签和issues-timeline标签都适用于github和gitee</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>issue里面需要有JSON代码块：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token property">"screenshot"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Github写法"><a href="#Github写法" class="headerlink" title="Github写法"></a>Github写法</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% issues sites | api=https://api.github.com/repos/jimyfengqi/friends/issues?sort=updated&amp;state=open&amp;page=1&amp;per_page=100&amp;labels=active %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Gitee写法"><a href="#Gitee写法" class="headerlink" title="Gitee写法"></a>Gitee写法</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% issues sites | api=https://gitee.com/api/v5/repos/jimyfengqi/friends/issues?sort=updated&amp;state=open&amp;page=1&amp;per_page=100&amp;labels=active %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>yuang01: 用户名，friends: 仓库名<br>上例中的 labels=active 参数可以控制默认的 issue 不显示，只有自己审核通过添加了 active 标签之后才会显示。<br>当然label也是自己设置的，你可以自己选择一个好识别的标签<br>上述示例对应的仓库链接：<br><a href="https://github.com/jimyfengqi/friends">github</a><br><a href="https://gitee.com/jimyfengqi/friends">gitee</a></p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>可以点击 <a href="https://jimyfengqi.github.io/friends/">友链</a> 查看</p><h1 class="bamboo-h " id="issues-timeline标签">issues-timeline标签</h1><br/> <p>该标签会去拿到某个repo仓库的issue内容，用timeline标签的形式显示出来</p><h3 id="github写法"><a href="#github写法" class="headerlink" title="github写法"></a>github写法</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% issues timeline | api=https://api.github.com/repos/jimyfengqi/hexo-theme-bomboo/issues?sort=updated&amp;state=closed&amp;page=1&amp;per_page=100 %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>api=xxx:jimyfengqi是我的github用户名，hexo-theme-bomboo是我的仓库名，state=closed，表示拿到状态为close的issue，根据自己实际情况更改</code></pre><h3 id="Gitee写法-1"><a href="#Gitee写法-1" class="headerlink" title="Gitee写法"></a>Gitee写法</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% issues timeline | api=https://gitee.com/api/v5/repos/jimyfengqi/friends/issues %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>api=xxx:jimyfengqi是我的gitee用户名，friends是我gitee的仓库名，其他参数请见文档</code></pre><h2 id="issue-api"><a href="#issue-api" class="headerlink" title="issue api"></a>issue api</h2><p><a href="https://docs.github.com/cn/rest/overview/resources-in-the-rest-api">github的开放api</a><br><a href="https://gitee.com/api/v5/swagger#/getV5ReposOwnerRepoIssues">gitee的开放api</a></p><h2 id="repo仓库效果"><a href="#repo仓库效果" class="headerlink" title="repo仓库效果"></a>repo仓库效果</h2><p>下面的效果是来自于这这两个仓库的issue</p><p>hexo-theme-bomboo (Github)</p><p><a href="https://github.com/jimyfengqi/hexo-theme-bomboo/issues?q=is:issue+is:closed+sort:updated-desc">https://github.com/jimyfengqi/hexo-theme-bomboo/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc</a></p><p>friends (Gitee)</p><p><a href="https://gitee.com/jimyfengqi/friends/issues">https://gitee.com/jimyfengqi/friends/issues</a></p><h3 id="Github效果-example"><a href="#Github效果-example" class="headerlink" title="Github效果(example)"></a>Github效果(example)</h3><div class="issues-api timeline"api="https://api.github.com/repos/jimyfengqi/hexo-theme-bomboo/issues?sort=updated&state=closed&page=1&per_page=100"></div><h3 id="Gitee效果-example"><a href="#Gitee效果-example" class="headerlink" title="Gitee效果(example)"></a>Gitee效果(example)</h3><div class="issues-api timeline"api="https://gitee.com/api/v5/repos/jimyfengqi/friends/issues"></div>]]></content>
      
      
      <categories>
          
          <category> 本站介绍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主题介绍-文档书写功能</title>
      <link href="/post/ben-zhan-jie-shao/zhu-ti-jie-shao-wen-dang-shu-xie-gong-neng/"/>
      <url>/post/ben-zhan-jie-shao/zhu-ti-jie-shao-wen-dang-shu-xie-gong-neng/</url>
      
        <content type="html"><![CDATA[<h1 class="bamboo-h-b" id="我是标题，1级标题" style="color:!important">我是标题，1级标题</h1><div></div><h2 class="bamboo-h-b" id="我是标题， 2级标题" style="color:#895546!important">我是标题， 2级标题</h2><div></div><h3 class="bamboo-h-b" id="我是标题， 3级标题" style="color:red!important">我是标题， 3级标题</h3><div></div><h3 id="上述事例代码"><a href="#上述事例代码" class="headerlink" title="上述事例代码"></a>上述事例代码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% titleB h1, 我是标题， 1级标题 %&#125;&#123;% titleB h2, 我是标题， 2级标题, #895546 %&#125;&#123;% titleB h3, 我是标题， 3级标题, red %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 class="bamboo-h " id="段落文本标签演示效果">段落文本标签演示效果</h1><br/><p class='p yellow'>我是一个文本高亮大萨达所多撒多撒多撒大多多撒多撒多撒大所多撒大多</p><p class='p '>我是一个文本高亮大萨达所多撒多撒多撒大多多撒多撒多撒大所多撒大多</p><p class='p primary'>我是一个文本高亮大萨达所多撒多撒多撒大多多撒多撒多撒大所多撒大多</p><p class='p info'>我是一个文本高亮大萨达所多撒多撒多撒大多多撒多撒多撒大所多撒大多</p><p class='p warning'>我是一个文本高亮大萨达所多撒多撒多撒大多多撒多撒多撒大所多撒大多</p><p class='p danger'>我是一个文本高亮大萨达所多撒多撒多撒大多多撒多撒多撒大所多撒大多</p><p class='p success'>我是一个文本高亮大萨达所多撒多撒多撒大多多撒多撒多撒大所多撒大多</p><p class='p red'>我是一个文本高亮大萨达所多撒多撒多撒大多多撒多撒多撒大所多撒大多</p><p class='p green'>我是一个文本高亮大萨达所多撒多撒多撒大多多撒多撒多撒大所多撒大多</p><p class='p blue'>我是一个文本高亮大萨达所多撒多撒多撒大多多撒多撒多撒大所多撒大多</p><p class='p center'>我是一个文本高亮大萨达所多撒多撒多撒大多多撒多撒多撒大所多撒大多</p><p class='p center large danger'>我是一个文本高亮大萨达所多撒多撒多撒大多多撒多撒多撒大所多撒大多</p><p class='p center large info'>我是一个文本高亮大萨达所多撒多撒多撒大多多撒多撒多撒大所多撒大多</p><p class='p center small'>我是一个文本高亮大萨达所多撒多撒多撒大多多撒多撒多撒大所多撒大多</p><h3 id="上述事例代码-1"><a href="#上述事例代码-1" class="headerlink" title="上述事例代码"></a>上述事例代码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% p yellow, 我是一个文本高亮大萨达所多撒多撒多撒大多多撒多撒多撒大所多撒大多 %&#125;&#123;% p, 我是一个文本高亮大萨达所多撒多撒多撒大多多撒多撒多撒大所多撒大多 %&#125;&#123;% p primary, 我是一个文本高亮大萨达所多撒多撒多撒大多多撒多撒多撒大所多撒大多 %&#125;&#123;% p info, 我是一个文本高亮大萨达所多撒多撒多撒大多多撒多撒多撒大所多撒大多 %&#125;&#123;% p warning, 我是一个文本高亮大萨达所多撒多撒多撒大多多撒多撒多撒大所多撒大多 %&#125;&#123;% p danger, 我是一个文本高亮大萨达所多撒多撒多撒大多多撒多撒多撒大所多撒大多 %&#125;&#123;% p success, 我是一个文本高亮大萨达所多撒多撒多撒大多多撒多撒多撒大所多撒大多 %&#125;&#123;% p red, 我是一个文本高亮大萨达所多撒多撒多撒大多多撒多撒多撒大所多撒大多 %&#125;&#123;% p green, 我是一个文本高亮大萨达所多撒多撒多撒大多多撒多撒多撒大所多撒大多 %&#125;&#123;% p blue, 我是一个文本高亮大萨达所多撒多撒多撒大多多撒多撒多撒大所多撒大多 %&#125;&#123;% p center, 我是一个文本高亮大萨达所多撒多撒多撒大多多撒多撒多撒大所多撒大多 %&#125;&#123;% p center large danger, 我是一个文本高亮大萨达所多撒多撒多撒大多多撒多撒多撒大所多撒大多 %&#125;&#123;% p center large info, 我是一个文本高亮大萨达所多撒多撒多撒大多多撒多撒多撒大所多撒大多 %&#125;&#123;% p center small, 我是一个文本高亮大萨达所多撒多撒多撒大多多撒多撒多撒大所多撒大多 %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 class="bamboo-h " id="文本高亮标签演示效果">文本高亮标签演示效果</h1><br/><p>这是一个简单的文字<span class='pbg yellow'>我是一个文本高亮</span>，唱着我们心肠的曲折<br>这是一个简单的文字<span class='pbg '>我是一个文本高亮</span>，唱着我们心肠的曲折<br>这是一个简单的文字<span class='pbg info'>我是一个文本高亮</span>，唱着我们心肠的曲折<br>这是一个简单的文字<span class='pbg warning'>我是一个文本高亮</span>，唱着我们心肠的曲折<br>这是一个简单的文字<span class='pbg danger'>我是一个文本高亮</span>，唱着我们心肠的曲折<br>这是一个简单的文字<span class='pbg success'>我是一个文本高亮</span>，唱着我们心肠的曲折<br>这是一个简单的文字<span class='pbg red'>我是一个文本高亮</span>，唱着我们心肠的曲折<br>这是一个简单的文字<span class='pbg green'>我是一个文本高亮</span>，唱着我们心肠的曲折<br>这是一个简单的文字<span class='pbg blue'>我是一个文本高亮</span>，唱着我们心肠的曲折<br>这是一个简单的文字<span class='pbg cyan'>我是一个文本高亮</span>，唱着我们心肠的曲折</p><h3 id="上述事例代码-2"><a href="#上述事例代码-2" class="headerlink" title="上述事例代码"></a>上述事例代码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">这是一个简单的文字&#123;% pbg yellow, 我是一个文本高亮 %&#125;，唱着我们心肠的曲折这是一个简单的文字&#123;% pbg, 我是一个文本高亮 %&#125;，唱着我们心肠的曲折这是一个简单的文字&#123;% pbg info, 我是一个文本高亮 %&#125;，唱着我们心肠的曲折这是一个简单的文字&#123;% pbg warning, 我是一个文本高亮 %&#125;，唱着我们心肠的曲折这是一个简单的文字&#123;% pbg danger, 我是一个文本高亮 %&#125;，唱着我们心肠的曲折这是一个简单的文字&#123;% pbg success, 我是一个文本高亮 %&#125;，唱着我们心肠的曲折这是一个简单的文字&#123;% pbg red, 我是一个文本高亮 %&#125;，唱着我们心肠的曲折这是一个简单的文字&#123;% pbg green, 我是一个文本高亮 %&#125;，唱着我们心肠的曲折 这是一个简单的文字&#123;% pbg blue, 我是一个文本高亮 %&#125;，唱着我们心肠的曲折这是一个简单的文字&#123;% pbg cyan, 我是一个文本高亮 %&#125;，唱着我们心肠的曲折<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 class="bamboo-h " id="文字颜色标签演示效果">文字颜色标签演示效果</h1><br/><p>这是一个简单的文字<span class='p yellow'>我是一个文字高亮</span>，唱着我们心肠的曲折<br>这是一个简单的文字<span class='p '>我是一个文字高亮</span>，唱着我们心肠的曲折<br>这是一个简单的文字<span class='p primary'>我是一个文字高亮</span>，唱着我们心肠的曲折<br>这是一个简单的文字<span class='p info'>我是一个文字高亮</span>，唱着我们心肠的曲折<br>这是一个简单的文字<span class='p warning'>我是一个文字高亮</span>，唱着我们心肠的曲折<br>这是一个简单的文字<span class='p danger'>我是一个文字高亮</span>，唱着我们心肠的曲折<br>这是一个简单的文字<span class='p success'>我是一个文字高亮</span>，唱着我们心肠的曲折<br>这是一个简单的文字<span class='p red'>我是一个文字高亮</span>，唱着我们心肠的曲折<br>这是一个简单的文字<span class='p green'>我是一个文字高亮</span>，唱着我们心肠的曲折<br>这是一个简单的文字<span class='p blue'>我是一个文字高亮</span>，唱着我们心肠的曲折</p><span class='p center green'>我是一个居中文字高亮</span><p>这是一个简单的文字<span class='p large'>我是一个文字高亮</span>，唱着我们心肠的曲折<br>这是一个简单的文字<span class='p small danger'>我是一个文字高亮</span>，唱着我们心肠的曲折</p><h3 id="上述事例代码-3"><a href="#上述事例代码-3" class="headerlink" title="上述事例代码"></a>上述事例代码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">这是一个简单的文字&#123;% span yellow, 我是一个文字高亮 %&#125;，唱着我们心肠的曲折这是一个简单的文字&#123;% span, 我是一个文字高亮 %&#125;，唱着我们心肠的曲折这是一个简单的文字&#123;% span primary, 我是一个文字高亮 %&#125;，唱着我们心肠的曲折这是一个简单的文字&#123;% span info, 我是一个文字高亮 %&#125;，唱着我们心肠的曲折这是一个简单的文字&#123;% span warning, 我是一个文字高亮 %&#125;，唱着我们心肠的曲折这是一个简单的文字&#123;% span danger, 我是一个文字高亮 %&#125;，唱着我们心肠的曲折这是一个简单的文字&#123;% span success, 我是一个文字高亮 %&#125;，唱着我们心肠的曲折这是一个简单的文字&#123;% span red, 我是一个文字高亮 %&#125;，唱着我们心肠的曲折这是一个简单的文字&#123;% span green, 我是一个文字高亮 %&#125;，唱着我们心肠的曲折这是一个简单的文字&#123;% span blue, 我是一个文字高亮 %&#125;，唱着我们心肠的曲折&#123;% span center green, 我是一个居中文字高亮 %&#125;这是一个简单的文字&#123;% span large, 我是一个文字高亮 %&#125;，唱着我们心肠的曲折这是一个简单的文字&#123;% span small danger, 我是一个文字高亮 %&#125;，唱着我们心肠的曲折<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 class="bamboo-h " id="Text文本样式标签演示">Text文本样式标签演示</h1><br/><p>带 <u>下划线</u> 的文本</p><p>带 <emp>着重号</emp> 的文本</p><p>带 <wavy>波浪线</wavy> 的文本</p><p>带 <del>删除线</del> 的文本</p><p>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></p><p>密码样式的文本：<psw>这里没有验证码</psw></p><h3 id="上述事例代码-4"><a href="#上述事例代码-4" class="headerlink" title="上述事例代码"></a>上述事例代码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% title h2, Text文本样式标签演示 %&#125;带 &#123;% u 下划线 %&#125; 的文本带 &#123;% emp 着重号 %&#125; 的文本带 &#123;% wavy 波浪线 %&#125; 的文本带 &#123;% del 删除线 %&#125; 的文本键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;密码样式的文本：&#123;% psw 这里没有验证码 %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 class="bamboo-h " id="Note标签演示效果">Note标签演示效果</h1><br/><blockquote><p>markdown默认写法，左边框颜色，随着主题色改变</p></blockquote><div class="note "><p>我有一只小毛驴，我从来都不骑。</p></div><div class="note quote"><p>适合引用一段话</p></div><div class="note warning"><p>这是一个警告</p></div><div class="note danger"><p>这是一个错误</p></div><div class="note success"><p>这是一个成功</p></div><div class="note info"><p>这是一个信息</p></div><h3 id="上述事例代码-5"><a href="#上述事例代码-5" class="headerlink" title="上述事例代码"></a>上述事例代码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">></span> markdown默认写法，左边框颜色，随着主题色改变&#123;% note, 我有一只小毛驴，我从来都不骑。 %&#125;&#123;% note quote, 适合引用一段话 %&#125;&#123;% note warning, 这是一个警告 %&#125;&#123;% note danger, 这是一个错误 %&#125;&#123;% note success, 这是一个成功 %&#125;&#123;% note info, 这是一个信息 %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 class="bamboo-h " id="NoteBlock标签演示效果">NoteBlock标签演示效果</h1><br/><div class="note base"><p><strong>标题（可选）</strong></p><p>asdsd</p></div><div class="note quote"><p><strong>标题（可选）</strong></p><p>asdsd</p></div><div class="note warning"><p><strong>标题（可选）</strong></p><p>asdsd</p></div><div class="note success"><p><strong>标题（可选）</strong></p><p>asdsd</p></div><div class="note danger"><p><strong>标题（可选）</strong></p><p>asdsd</p></div><div class="note info"><p><strong>标题（可选）</strong></p><p>asdsd</p></div><h3 id="上述事例代码-6"><a href="#上述事例代码-6" class="headerlink" title="上述事例代码"></a>上述事例代码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% noteblock base, 标题（可选） %&#125;    asdsd&#123;% endnoteblock %&#125;&#123;% noteblock quote, 标题（可选） %&#125;    asdsd&#123;% endnoteblock %&#125;&#123;% noteblock warning, 标题（可选） %&#125;    asdsd&#123;% endnoteblock %&#125;&#123;% noteblock success, 标题（可选） %&#125;    asdsd&#123;% endnoteblock %&#125;&#123;% noteblock danger, 标题（可选） %&#125;    asdsd&#123;% endnoteblock %&#125;&#123;% noteblock info, 标题（可选） %&#125;    asdsd&#123;% endnoteblock %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 class="bamboo-h " id="进度条示例">进度条示例</h1><br/> <blockquote><p>该标签适用版本为1.8.1及以上</p></blockquote><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-danger"  style="width: 70%" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100"><p>进度条测试</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-info"  style="width: 60%" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100"><p>进度条测试</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-success"  style="width: 60%" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100"><p>进度条测试</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-warning"  style="width: 60%" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100"><p>进度条测试</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-primary"  style="width: 60%" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100"><p>进度条测试</p></div></div><p>自定义颜色(Custom colors)</p><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped" style="background-color: #000!important; width: 60%" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100"><p>进度条测试</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped" style="background-color: #2f54eb!important; width: 60%" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100"><p>进度条测试</p></div></div><h3 id="上述示例代码"><a href="#上述示例代码" class="headerlink" title="上述示例代码"></a>上述示例代码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% progress 70 danger 进度条测试 %&#125;&#123;% progress 60 info 进度条测试 %&#125;&#123;% progress 60 success 进度条测试 %&#125;&#123;% progress 60 warning 进度条测试 %&#125;&#123;% progress 60 primary 进度条测试 %&#125;自定义颜色(Custom colors)&#123;% progress 60 #000 进度条测试 %&#125;&#123;% progress 60 #2f54eb 进度条测试 %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 class="bamboo-h " id="Link效果">Link效果</h1><br/><div class="tagLink"><a class="link-card" title="点击跳转到百度" href="http://www.baidu.com"><span class="link-card-backdrop" style="background-image: url(https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg)"></span><div class="left"><img src="https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg" class="lazyload placeholder" data-srcset="https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></div><div class="right"><p class="text">点击跳转到百度</p><p class="url">http://www.baidu.com</p></div></a></div><div class="tagLink"><a class="link-card" title="点击跳转到百度" href="http://www.baidu.com"><span class="link-card-backdrop" style="background-image: url(https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg)"></span><div class="left"><img src="https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg" class="lazyload placeholder" data-srcset="https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></div><div class="right"><p class="text">点击跳转到百度</p><p class="url">http://www.baidu.com</p></div></a></div><h3 id="上述事例代码-7"><a href="#上述事例代码-7" class="headerlink" title="上述事例代码"></a>上述事例代码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% link 点击跳转到百度, http://www.baidu.com, https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg %&#125;&#123;% link 点击跳转到百度, http://www.baidu.com, https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="多行链接"><a href="#多行链接" class="headerlink" title="多行链接"></a>多行链接</h2><div class="link-group"><div class="tagLink"><a class="link-card" title="点击跳转到百度" href="http://www.baidu.com"><span class="link-card-backdrop" style="background-image: url(https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg)"></span><div class="left"><img src="https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg" class="lazyload placeholder" data-srcset="https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></div><div class="right"><p class="text">点击跳转到百度</p><p class="url">http://www.baidu.com</p></div></a></div><div class="tagLink"><a class="link-card" title="点击跳转到百度" href="http://www.baidu.com"><span class="link-card-backdrop" style="background-image: url(https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg)"></span><div class="left"><img src="https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg" class="lazyload placeholder" data-srcset="https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></div><div class="right"><p class="text">点击跳转到百度</p><p class="url">http://www.baidu.com</p></div></a></div><div class="tagLink"><a class="link-card" title="点击跳转到百度" href="http://www.baidu.com"><span class="link-card-backdrop" style="background-image: url(https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg)"></span><div class="left"><img src="https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg" class="lazyload placeholder" data-srcset="https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></div><div class="right"><p class="text">点击跳转到百度</p><p class="url">http://www.baidu.com</p></div></a></div><div class="tagLink"><a class="link-card" title="点击跳转到百度" href="http://www.baidu.com"><span class="link-card-backdrop" style="background-image: url(https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg)"></span><div class="left"><img src="https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg" class="lazyload placeholder" data-srcset="https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></div><div class="right"><p class="text">点击跳转到百度</p><p class="url">http://www.baidu.com</p></div></a></div></div><h3 id="上述事例代码-8"><a href="#上述事例代码-8" class="headerlink" title="上述事例代码"></a>上述事例代码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% linkgroup %&#125;&#123;% link 点击跳转到百度, http://www.baidu.com, https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg %&#125;&#123;% link 点击跳转到百度, http://www.baidu.com, https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg %&#125;&#123;% link 点击跳转到百度, http://www.baidu.com, https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg %&#125;&#123;% link 点击跳转到百度, http://www.baidu.com, https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg %&#125;&#123;% endlinkgroup %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 class="bamboo-h " id="圆形进度条示例">圆形进度条示例</h1><br/> <blockquote><p>该标签适用版本为2.0.7+及以上</p></blockquote>    <div class="bamboo-circle" style="height: 136px;">      <svg width="136" height="136" viewBox="0 0 272 272">        <path d="M 136,136 m 0,-130    a 130,130 0 1 1 0,260    a 130,130 0 1 1 0,-260" stroke="#f3f3f3" stroke-width="12" fill-opacity="0"></path>        <path d="M 136,136 m 0,-130    a 130,130 0 1 1 0,260    a 130,130 0 1 1 0,-260" stroke-linecap="round" stroke="#f66" stroke-width="12" fill-opacity="0" style="stroke-dasharray: 816.8140899333462px 816.8140899333462px; stroke-dashoffset: 245.04422698000383px; transition:stroke-dashoffset 0.6s ease 0s, stroke 0.6s ease;"></path>      </svg>      <div class="bamboo-circle-content bamboo-circle-danger">        <p>进度条测试</p>      </div>    </div>    <div class="bamboo-circle" style="height: 136px;">      <svg width="136" height="136" viewBox="0 0 272 272">        <path d="M 136,136 m 0,-130    a 130,130 0 1 1 0,260    a 130,130 0 1 1 0,-260" stroke="#f3f3f3" stroke-width="12" fill-opacity="0"></path>        <path d="M 136,136 m 0,-130    a 130,130 0 1 1 0,260    a 130,130 0 1 1 0,-260" stroke-linecap="round" stroke="#409eff" stroke-width="12" fill-opacity="0" style="stroke-dasharray: 816.8140899333462px 816.8140899333462px; stroke-dashoffset: 163.36281798666926px; transition:stroke-dashoffset 0.6s ease 0s, stroke 0.6s ease;"></path>      </svg>      <div class="bamboo-circle-content bamboo-circle-info">        <p>进度条测试</p>      </div>    </div>    <div class="bamboo-circle" style="height: 136px;">      <svg width="136" height="136" viewBox="0 0 272 272">        <path d="M 136,136 m 0,-130    a 130,130 0 1 1 0,260    a 130,130 0 1 1 0,-260" stroke="#f3f3f3" stroke-width="12" fill-opacity="0"></path>        <path d="M 136,136 m 0,-130    a 130,130 0 1 1 0,260    a 130,130 0 1 1 0,-260" stroke-linecap="round" stroke="#67c23a" stroke-width="12" fill-opacity="0" style="stroke-dasharray: 816.8140899333462px 816.8140899333462px; stroke-dashoffset: 326.7256359733385px; transition:stroke-dashoffset 0.6s ease 0s, stroke 0.6s ease;"></path>      </svg>      <div class="bamboo-circle-content bamboo-circle-success">        <p>进度条测试</p>      </div>    </div>    <div class="bamboo-circle" style="height: 136px;">      <svg width="136" height="136" viewBox="0 0 272 272">        <path d="M 136,136 m 0,-130    a 130,130 0 1 1 0,260    a 130,130 0 1 1 0,-260" stroke="#f3f3f3" stroke-width="12" fill-opacity="0"></path>        <path d="M 136,136 m 0,-130    a 130,130 0 1 1 0,260    a 130,130 0 1 1 0,-260" stroke-linecap="round" stroke="#e6a23c" stroke-width="12" fill-opacity="0" style="stroke-dasharray: 816.8140899333462px 816.8140899333462px; stroke-dashoffset: 408.4070449666731px; transition:stroke-dashoffset 0.6s ease 0s, stroke 0.6s ease;"></path>      </svg>      <div class="bamboo-circle-content bamboo-circle-warning">        <p>进度条测试</p>      </div>    </div>    <div class="bamboo-circle" style="height: 136px;">      <svg width="136" height="136" viewBox="0 0 272 272">        <path d="M 136,136 m 0,-130    a 130,130 0 1 1 0,260    a 130,130 0 1 1 0,-260" stroke="#f3f3f3" stroke-width="12" fill-opacity="0"></path>        <path d="M 136,136 m 0,-130    a 130,130 0 1 1 0,260    a 130,130 0 1 1 0,-260" stroke-linecap="round" stroke="#42b983" stroke-width="12" fill-opacity="0" style="stroke-dasharray: 816.8140899333462px 816.8140899333462px; stroke-dashoffset: 81.68140899333463px; transition:stroke-dashoffset 0.6s ease 0s, stroke 0.6s ease;"></path>      </svg>      <div class="bamboo-circle-content bamboo-circle-primary">        <p>进度条测试</p>      </div>    </div><p>自定义颜色(Custom colors)</p>    <div class="bamboo-circle" style="height: 136px;">      <svg width="136" height="136" viewBox="0 0 272 272">        <path d="M 136,136 m 0,-130    a 130,130 0 1 1 0,260    a 130,130 0 1 1 0,-260" stroke="#f3f3f3" stroke-width="12" fill-opacity="0"></path>        <path d="M 136,136 m 0,-130    a 130,130 0 1 1 0,260    a 130,130 0 1 1 0,-260" stroke-linecap="round" stroke="#12e9e9" stroke-width="12" fill-opacity="0" style="stroke-dasharray: 816.8140899333462px 816.8140899333462px; stroke-dashoffset: 245.04422698000383px; transition:stroke-dashoffset 0.6s ease 0s, stroke 0.6s ease;"></path>      </svg>      <div class="bamboo-circle-content bamboo-circle-#12e9e9">        <p>70%</p>      </div>    </div>    <div class="bamboo-circle" style="height: 136px;">      <svg width="136" height="136" viewBox="0 0 272 272">        <path d="M 136,136 m 0,-130    a 130,130 0 1 1 0,260    a 130,130 0 1 1 0,-260" stroke="#f3f3f3" stroke-width="12" fill-opacity="0"></path>        <path d="M 136,136 m 0,-130    a 130,130 0 1 1 0,260    a 130,130 0 1 1 0,-260" stroke-linecap="round" stroke="skyblue" stroke-width="12" fill-opacity="0" style="stroke-dasharray: 816.8140899333462px 816.8140899333462px; stroke-dashoffset: 245.04422698000383px; transition:stroke-dashoffset 0.6s ease 0s, stroke 0.6s ease;"></path>      </svg>      <div class="bamboo-circle-content bamboo-circle-skyblue">        <p>70%</p>      </div>    </div><h3 id="上述示例代码-1"><a href="#上述示例代码-1" class="headerlink" title="上述示例代码"></a>上述示例代码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% progressCircle 70 danger 进度条测试 %&#125;&#123;% progressCircle 80 info 进度条测试 %&#125;&#123;% progressCircle 60 success 进度条测试 %&#125;&#123;% progressCircle 50 warning 进度条测试 %&#125;&#123;% progressCircle 90 primary 进度条测试 %&#125;自定义颜色(Custom colors)&#123;% progressCircle 70 #12e9e9 70% %&#125;&#123;% progressCircle 70 skyblue 70% %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 class="bamboo-h " id="按钮">按钮</h1><br/> <h2 id="融入段落中按钮"><a href="#融入段落中按钮" class="headerlink" title="融入段落中按钮"></a>融入段落中按钮</h2><p>不设置任何参数的 <span class='btn'><a class="button" href='/' title='按钮'>按钮</a></span> 适合融入段落中。</p><p>不设置任何参数的 <span class='btn warning'><a class="button" href='/' title='按钮'>按钮</a></span> 适合融入段落中。</p><p>不设置任何参数的 <span class='btn info'><a class="button" href='/' title='按钮'>按钮</a></span> 适合融入段落中。</p><p>不设置任何参数的 <span class='btn success'><a class="button" href='/' title='按钮'>按钮</a></span> 适合融入段落中。</p><p>不设置任何参数的 <span class='btn danger'><a class="button" href='/' title='按钮'>按钮</a></span> 适合融入段落中。</p><h3 id="上述实例源码"><a href="#上述实例源码" class="headerlink" title="上述实例源码"></a>上述实例源码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">不设置任何参数的 &#123;% btn 按钮, / %&#125; 适合融入段落中。不设置任何参数的 &#123;% btn warning, 按钮, / %&#125; 适合融入段落中。不设置任何参数的 &#123;% btn info, 按钮, / %&#125; 适合融入段落中。不设置任何参数的 &#123;% btn success, 按钮, / %&#125; 适合融入段落中。不设置任何参数的 &#123;% btn danger, 按钮, / %&#125; 适合融入段落中。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="空心和实心按钮"><a href="#空心和实心按钮" class="headerlink" title="空心和实心按钮"></a>空心和实心按钮</h2><span class='btn hollow'><a class="button" href='https://baidu.com' title='示例博客'><i class='fab fa-qq'></i>示例博客</a></span><span class='btn solid'><a class="button" href='https://baidu.com' title='示例博客'><i class='fab fa-weixin'></i>示例博客</a></span><h3 id="上述实例源码-1"><a href="#上述实例源码-1" class="headerlink" title="上述实例源码"></a>上述实例源码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% btn hollow, 示例博客, https://baidu.com, fab fa-qq %&#125;&#123;% btn solid, 示例博客, https://baidu.com, fab fa-weixin %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="大点的按钮和样式"><a href="#大点的按钮和样式" class="headerlink" title="大点的按钮和样式"></a>大点的按钮和样式</h2><span class='btn center large'><a class="button" href='https://baidu.com' title='开始使用'><i class='fa fa-download'></i>开始使用</a></span><h3 id="上述实例源码-2"><a href="#上述实例源码-2" class="headerlink" title="上述实例源码"></a>上述实例源码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% btn center large, 开始使用, https://baidu.com, fa fa-download %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 class="bamboo-h " id="环形按钮">环形按钮</h1><br/><span class='btn center large round solid'><a class="button" href='https://baidu.com' title='开始使用'><i class='fa fa-download'></i>开始使用</a></span><h3 id="上述实例源码-3"><a href="#上述实例源码-3" class="headerlink" title="上述实例源码"></a>上述实例源码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% btn center large round solid, 开始使用, https://baidu.com, fa fa-download %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="warning等颜色按钮"><a href="#warning等颜色按钮" class="headerlink" title="warning等颜色按钮"></a>warning等颜色按钮</h2><span class='btn large round solid warning'><a class="button" href='https://baidu.com' title='开始使用'><i class='fa fa-download'></i>开始使用</a></span><span class='btn large round solid info'><a class="button" href='https://baidu.com' title='开始使用'><i class='fa fa-download'></i>开始使用</a></span><span class='btn large round solid success'><a class="button" href='https://baidu.com' title='开始使用'><i class='fa fa-download'></i>开始使用</a></span><span class='btn large round solid danger'><a class="button" href='https://baidu.com' title='开始使用'><i class='fa fa-download'></i>开始使用</a></span><span class='btn large solid success'><a class="button" href='https://baidu.com' title='开始使用'><i class='fa fa-download'></i>开始使用</a></span><h3 id="上述实例源码-4"><a href="#上述实例源码-4" class="headerlink" title="上述实例源码"></a>上述实例源码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% btn large round solid warning, 开始使用, https://baidu.com, fa fa-download %&#125;&#123;% btn large round solid info, 开始使用, https://baidu.com, fa fa-download %&#125;&#123;% btn large round solid success, 开始使用, https://baidu.com, fa fa-download %&#125;&#123;% btn large round solid danger, 开始使用, https://baidu.com, fa fa-download %&#125;&#123;% btn large solid success, 开始使用, https://baidu.com, fa fa-download %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="warning等颜色空心按钮"><a href="#warning等颜色空心按钮" class="headerlink" title="warning等颜色空心按钮"></a>warning等颜色空心按钮</h2><span class='btn large warning hollow'><a class="button" href='https://baidu.com' title='开始使用'><i class='fa fa-download'></i>开始使用</a></span><span class='btn large info hollow'><a class="button" href='https://baidu.com' title='开始使用'><i class='fa fa-download'></i>开始使用</a></span><span class='btn large success hollow'><a class="button" href='https://baidu.com' title='开始使用'><i class='fa fa-download'></i>开始使用</a></span><span class='btn large danger hollow'><a class="button" href='https://baidu.com' title='开始使用'><i class='fa fa-download'></i>开始使用</a></span><span class='btn success hollow'><a class="button" href='https://baidu.com' title='开始使用'><i class='fa fa-download'></i>开始使用</a></span><h3 id="上述实例源码-5"><a href="#上述实例源码-5" class="headerlink" title="上述实例源码"></a>上述实例源码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% btn large warning hollow, 开始使用, https://baidu.com, fa fa-download %&#125;&#123;% btn large info hollow, 开始使用, https://baidu.com, fa fa-download %&#125;&#123;% btn large success hollow, 开始使用, https://baidu.com, fa fa-download %&#125;&#123;% btn large danger hollow, 开始使用, https://baidu.com, fa fa-download %&#125;&#123;% btn success hollow, 开始使用, https://baidu.com, fa fa-download %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="warning等颜色空心环形居中按钮"><a href="#warning等颜色空心环形居中按钮" class="headerlink" title="warning等颜色空心环形居中按钮"></a>warning等颜色空心环形居中按钮</h2><span class='btn large danger hollow center round'><a class="button" href='https://baidu.com' title='开始使用'><i class='fa fa-download'></i>开始使用</a></span><span class='btn danger hollow center round'><a class="button" href='https://baidu.com' title='开始使用'><i class='fa fa-download'></i>开始使用</a></span><h3 id="上述实例源码-6"><a href="#上述实例源码-6" class="headerlink" title="上述实例源码"></a>上述实例源码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% btn large danger hollow center round, 开始使用, https://baidu.com, fa fa-download %&#125;&#123;% btn danger hollow center round, 开始使用, https://baidu.com, fa fa-download %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="带有头像和名称的按钮"><a href="#带有头像和名称的按钮" class="headerlink" title="带有头像和名称的按钮"></a>带有头像和名称的按钮</h2><div class="btns circle grid2">            <a class="button" href='https://baidu.com' title='草帽海贼团'><img src='https://img2.woyaogexing.com/2021/01/30/007e3777e7e64c4aae95ae812708a7bf!400x400.jpeg'>草帽海贼团</a><a class="button" href='https://baidu.com' title='小绵羊'><img src='https://img2.woyaogexing.com/2021/01/30/4c59f9dd4aae421fae21344aec8c7b60!400x400.jpeg'>小绵羊</a><a class="button" href='https://baidu.com' title='沫兮'><img src='https://img2.woyaogexing.com/2021/01/30/1b2aec116f0b49c682badc5befd43905!400x400.jpeg'>沫兮</a><a class="button" href='https://baidu.com' title='凯爹'><img src='https://p.qqan.com/up/2021-1/16112058848478910.jpg'>凯爹</a><a class="button" href='https://baidu.com' title='阿离'><img src='https://p.qqan.com/up/2021-1/16118869719896010.jpg'>阿离</a><a class="button" href='https://baidu.com' title='韩信'><img src='https://p.qqan.com/up/2021-1/16118869704182020.jpg'>韩信</a>          </div><h3 id="上述实例源码-7"><a href="#上述实例源码-7" class="headerlink" title="上述实例源码"></a>上述实例源码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% btns circle grid2 %&#125;  &#123;% cell 草帽海贼团, https://baidu.com, https://img2.woyaogexing.com/2021/01/30/007e3777e7e64c4aae95ae812708a7bf!400x400.jpeg %&#125;  &#123;% cell 小绵羊, https://baidu.com, https://img2.woyaogexing.com/2021/01/30/4c59f9dd4aae421fae21344aec8c7b60!400x400.jpeg %&#125;  &#123;% cell 沫兮, https://baidu.com, https://img2.woyaogexing.com/2021/01/30/1b2aec116f0b49c682badc5befd43905!400x400.jpeg %&#125;  &#123;% cell 凯爹, https://baidu.com, https://p.qqan.com/up/2021-1/16112058848478910.jpg %&#125;  &#123;% cell 阿离, https://baidu.com, https://p.qqan.com/up/2021-1/16118869719896010.jpg %&#125;  &#123;% cell 韩信, https://baidu.com, https://p.qqan.com/up/2021-1/16118869704182020.jpg %&#125;&#123;% endbtns %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="一行三个带有头像和名称的按钮"><a href="#一行三个带有头像和名称的按钮" class="headerlink" title="一行三个带有头像和名称的按钮"></a>一行三个带有头像和名称的按钮</h2><div class="btns circle grid3">            <a class="button" href='https://baidu.com' title='QQ头像'><img src='http://q1.qlogo.cn/g?b=qq&nk=1730241541&s=640'>QQ头像</a><a class="button" href='https://baidu.com' title='随机动漫头像'><img src='http://api.btstu.cn/sjtx/api.php?lx=c1&format=images'>随机动漫头像</a><a class="button" href='https://baidu.com' title='随机男生头像'><img src='http://api.btstu.cn/sjtx/api.php?lx=a1&format=images'>随机男生头像</a><a class="button" href='https://baidu.com' title='随机女生头像'><img src='http://api.btstu.cn/sjtx/api.php?lx=b1&format=images'>随机女生头像</a><a class="button" href='https://baidu.com' title='随机动漫女头像'><img src='http://api.btstu.cn/sjtx/api.php?lx=c2&format=images'>随机动漫女头像</a><a class="button" href='https://baidu.com' title='随机动漫男头像'><img src='http://api.btstu.cn/sjtx/api.php?lx=c3&format=images'>随机动漫男头像</a>          </div><h3 id="上述实例源码-8"><a href="#上述实例源码-8" class="headerlink" title="上述实例源码"></a>上述实例源码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% btns circle grid3 %&#125;  &#123;% cell QQ头像, https://baidu.com, http://q1.qlogo.cn/g?b=qq&amp;nk=1730241541&amp;s=640 %&#125;  &#123;% cell 随机动漫头像, https://baidu.com, http://api.btstu.cn/sjtx/api.php?lx=c1&amp;format=images %&#125;  &#123;% cell 随机男生头像, https://baidu.com, http://api.btstu.cn/sjtx/api.php?lx=a1&amp;format=images %&#125;  &#123;% cell 随机女生头像, https://baidu.com, http://api.btstu.cn/sjtx/api.php?lx=b1&amp;format=images %&#125;  &#123;% cell 随机动漫女头像, https://baidu.com, http://api.btstu.cn/sjtx/api.php?lx=c2&amp;format=images %&#125;  &#123;% cell 随机动漫男头像, https://baidu.com, http://api.btstu.cn/sjtx/api.php?lx=c3&amp;format=images %&#125;&#123;% endbtns %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="一行四个带有头像和名称的按钮"><a href="#一行四个带有头像和名称的按钮" class="headerlink" title="一行四个带有头像和名称的按钮"></a>一行四个带有头像和名称的按钮</h2><div class="btns circle grid4">            <a class="button" href='https://baidu.com' title='随机Github头像'><img src='https://api.prodless.com/avatar.png'>随机Github头像</a><a class="button" href='https://baidu.com' title='随机Github头像'><img src='https://api.prodless.com/avatar.png'>随机Github头像</a><a class="button" href='https://baidu.com' title='随机Github头像'><img src='https://api.prodless.com/avatar.png'>随机Github头像</a><a class="button" href='https://baidu.com' title='随机Github头像'><img src='https://api.prodless.com/avatar.png'>随机Github头像</a><a class="button" href='https://baidu.com' title='随机Github头像'><img src='https://api.prodless.com/avatar.png'>随机Github头像</a>          </div><h3 id="上述实例源码-9"><a href="#上述实例源码-9" class="headerlink" title="上述实例源码"></a>上述实例源码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% btns circle grid4 %&#125;  &#123;% cell 随机Github头像, https://baidu.com, https://api.prodless.com/avatar.png %&#125;  &#123;% cell 随机Github头像, https://baidu.com, https://api.prodless.com/avatar.png %&#125;  &#123;% cell 随机Github头像, https://baidu.com, https://api.prodless.com/avatar.png %&#125;  &#123;% cell 随机Github头像, https://baidu.com, https://api.prodless.com/avatar.png %&#125;  &#123;% cell 随机Github头像, https://baidu.com, https://api.prodless.com/avatar.png %&#125;&#123;% endbtns %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="一行五个带有头像和名称的按钮"><a href="#一行五个带有头像和名称的按钮" class="headerlink" title="一行五个带有头像和名称的按钮"></a>一行五个带有头像和名称的按钮</h2><div class="btns circle grid5">            <a class="button" href='https://baidu.com' title='随机头像'><img src='https://picsum.photos/200'>随机头像</a><a class="button" href='https://baidu.com' title='随机头像id'><img src='https://picsum.photos/id/1/200'>随机头像id</a><a class="button" href='https://baidu.com' title='随机头像id'><img src='https://picsum.photos/id/2/200'>随机头像id</a><a class="button" href='https://baidu.com' title='随机头像id'><img src='https://picsum.photos/id/3/200'>随机头像id</a><a class="button" href='https://baidu.com' title='随机头像id'><img src='https://picsum.photos/id/4/200'>随机头像id</a>          </div><div class="btns circle grid5">            <a class="button" href='https://baidu.com' title='随机风景'><img src='https://api.ixiaowai.cn/gqapi/gqapi.php'>随机风景</a><a class="button" href='https://baidu.com' title='随机风景'><img src='https://api.ixiaowai.cn/gqapi/gqapi.php'>随机风景</a><a class="button" href='https://baidu.com' title='随机风景'><img src='https://api.ixiaowai.cn/gqapi/gqapi.php'>随机风景</a><a class="button" href='https://baidu.com' title='随机风景'><img src='https://api.ixiaowai.cn/gqapi/gqapi.php'>随机风景</a><a class="button" href='https://baidu.com' title='随机风景'><img src='https://api.ixiaowai.cn/gqapi/gqapi.php'>随机风景</a>          </div><h3 id="上述实例源码-10"><a href="#上述实例源码-10" class="headerlink" title="上述实例源码"></a>上述实例源码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% btns circle grid5 %&#125;  &#123;% cell 随机头像, https://baidu.com, https://picsum.photos/200 %&#125;  &#123;% cell 随机头像id, https://baidu.com, https://picsum.photos/id/1/200 %&#125;  &#123;% cell 随机头像id, https://baidu.com, https://picsum.photos/id/2/200 %&#125;  &#123;% cell 随机头像id, https://baidu.com, https://picsum.photos/id/3/200 %&#125;  &#123;% cell 随机头像id, https://baidu.com, https://picsum.photos/id/4/200 %&#125;&#123;% endbtns %&#125;&#123;% btns circle grid5 %&#125;  &#123;% cell 随机风景, https://baidu.com,   https://api.ixiaowai.cn/gqapi/gqapi.php %&#125;  &#123;% cell 随机风景, https://baidu.com,   https://api.ixiaowai.cn/gqapi/gqapi.php %&#125;  &#123;% cell 随机风景, https://baidu.com,   https://api.ixiaowai.cn/gqapi/gqapi.php %&#125;  &#123;% cell 随机风景, https://baidu.com,   https://api.ixiaowai.cn/gqapi/gqapi.php %&#125;  &#123;% cell 随机风景, https://baidu.com,   https://api.ixiaowai.cn/gqapi/gqapi.php %&#125;&#123;% endbtns %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 class="bamboo-h " id="环形图标按钮">环形图标按钮</h1><br/><h2 id="环形图标按钮"><a href="#环形图标按钮" class="headerlink" title="环形图标按钮"></a>环形图标按钮</h2><div class="btns rounded grid5">            <a class="button" href='/' title='下载源码'><i class='fa fa-download'></i>下载源码</a><a class="button" href='/' title='查看文档'><i class='fa fa-book'></i>查看文档</a>          </div><h3 id="上述事例代码-9"><a href="#上述事例代码-9" class="headerlink" title="上述事例代码"></a>上述事例代码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% btns rounded grid5 %&#125;  &#123;% cell 下载源码, /, fa fa-download %&#125;  &#123;% cell 查看文档, /, fa fa-book %&#125;&#123;% endbtns %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="环形图标填充按钮"><a href="#环形图标填充按钮" class="headerlink" title="环形图标填充按钮"></a>环形图标填充按钮</h2><div class="btns rounded grid5 center">            <a class="button" href='/' title='下载源码'><i class='fa fa-download'></i>下载源码</a><a class="button" href='/' title='查看文档'><i class='fa fa-book'></i>查看文档</a>          </div><h3 id="上述事例代码-10"><a href="#上述事例代码-10" class="headerlink" title="上述事例代码"></a>上述事例代码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% btns rounded grid5 center %&#125;  &#123;% cell 下载源码, /, fa fa-download %&#125;  &#123;% cell 查看文档, /, fa fa-book %&#125;&#123;% endbtns %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="环形图标填充按钮-1"><a href="#环形图标填充按钮-1" class="headerlink" title="环形图标填充按钮"></a>环形图标填充按钮</h2><div class="btns rounded grid5 fill">            <a class="button" href='/' title='下载源码'><i class='fa fa-download'></i>下载源码</a><a class="button" href='/' title='查看文档'><i class='fa fa-book'></i>查看文档</a>          </div><h3 id="上述事例代码-11"><a href="#上述事例代码-11" class="headerlink" title="上述事例代码"></a>上述事例代码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% btns rounded grid5 fill %&#125;  &#123;% cell 下载源码, /, fa fa-download %&#125;  &#123;% cell 查看文档, /, fa fa-book %&#125;&#123;% endbtns %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 class="bamboo-h " id="圆形图标按钮">圆形图标按钮</h1><br/><div class="btns circle center grid5">            <a href='/medias/reward/wechat.bmp'>  <i class='fa fa-apple'></i>  <b>这个是微信</b>  <p class='p red'>微信</p>  <img src='/medias/reward/wechat.bmp'></a><a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1'>  <i class='fa fa-apple'></i>  <b>这个是支付宝</b>  <p class='p green'>支付宝</p>  <img src='/medias/reward/alipay.bmp'></a>          </div><h3 id="上述示例代码-2"><a href="#上述示例代码-2" class="headerlink" title="上述示例代码"></a>上述示例代码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% btns circle center grid5 %&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>/medias/reward/wechat.bmp<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>fa fa-apple<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>这个是微信<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>    &#123;% p red, 微信 %&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>/medias/reward/wechat.bmp<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>fa fa-apple<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>这个是支付宝<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>    &#123;% p green, 支付宝 %&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>/medias/reward/alipay.bmp<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>&#123;% endbtns %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 class="bamboo-h " id="radio标签演示效果">radio标签演示效果</h1><br/><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div><div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div><div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div><div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div><div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div><div class='checkbox warning'><input type="radio" />            <p>warning色</p>            </div><div class='checkbox success'><input type="radio" />            <p>success色</p>            </div><div class='checkbox danger'><input type="radio" />            <p>danger色</p>            </div><div class='checkbox info'><input type="radio" />            <p>info色</p>            </div><h3 id="上述事例代码-12"><a href="#上述事例代码-12" class="headerlink" title="上述事例代码"></a>上述事例代码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% radio 纯文本测试 %&#125;&#123;% radio checked, 支持简单的 <span class="token url">[<span class="token content">markdown</span>](<span class="token url">https://guides.github.com/features/mastering-markdown/</span>)</span> 语法 %&#125;&#123;% radio red, 支持自定义颜色 %&#125;&#123;% radio green, 绿色 %&#125;&#123;% radio yellow, 黄色 %&#125;&#123;% radio cyan, 青色 %&#125;&#123;% radio blue, 蓝色 %&#125;&#123;% radio warning, warning色 %&#125;&#123;% radio success, success色 %&#125;&#123;% radio danger, danger色 %&#125;&#123;% radio info, info色 %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 class="bamboo-h " id="CheckBox图形示例">CheckBox图形示例</h1><br/><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><h3 id="上述示例代码-3"><a href="#上述示例代码-3" class="headerlink" title="上述示例代码"></a>上述示例代码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% checkbox 纯文本测试 %&#125;&#123;% checkbox checked, 支持简单的 <span class="token url">[<span class="token content">markdown</span>](<span class="token url">https://guides.github.com/features/mastering-markdown/</span>)</span> 语法 %&#125;&#123;% checkbox red, 支持自定义颜色 %&#125;&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;&#123;% checkbox plus green checked, 增加 %&#125;&#123;% checkbox minus yellow checked, 减少 %&#125;&#123;% checkbox times red checked, 叉 %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 class="bamboo-h " id="tab示例">tab示例</h1><br/><h2 id="tab标签示例如下"><a href="#tab标签示例如下" class="headerlink" title="tab标签示例如下"></a>tab标签示例如下</h2><div class="tabs" id="tab-id"><ul class="nav-tabs"><li class="tab active"><a class="#tab-id-1">栏目1</a></li><li class="tab"><a class="#tab-id-2">栏目2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-id-1"><p>这是栏目1的内容</p></div><div class="tab-pane" id="tab-id-2"><p>这是栏目2的内容，以后要记得怎么写</p></div></div></div><h3 id="上述示例代码-4"><a href="#上述示例代码-4" class="headerlink" title="上述示例代码"></a>上述示例代码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% tabs tab-id %&#125;<span class="token comment">&lt;!-- tab 栏目1 --></span>这是栏目1的内容<span class="token comment">&lt;!-- endtab --></span><span class="token comment">&lt;!-- tab 栏目2 --></span>这是栏目2的内容，以后要记得怎么写<span class="token comment">&lt;!-- endtab --></span>&#123;% endtabs %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 class="bamboo-h " id="folding效果">folding效果</h1><br/><h2 id="图片折叠"><a href="#图片折叠" class="headerlink" title="图片折叠"></a>图片折叠</h2><details ><summary pointer> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://pic4.zhimg.com/80/v2-5e0b1aaa1994f6d7cb9aac94a6f4e0b3_1440w.jpg" class="lazyload placeholder" data-srcset="https://pic4.zhimg.com/80/v2-5e0b1aaa1994f6d7cb9aac94a6f4e0b3_1440w.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>              </div>            </details><h3 id="上述事例代码-13"><a href="#上述事例代码-13" class="headerlink" title="上述事例代码"></a>上述事例代码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% folding 查看图片测试 %&#125;  ![](https://pic4.zhimg.com/80/v2-5e0b1aaa1994f6d7cb9aac94a6f4e0b3_1440w.jpg)&#123;% endfolding %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="默认打开的折叠框"><a href="#默认打开的折叠框" class="headerlink" title="默认打开的折叠框"></a>默认打开的折叠框</h2><details cyan open><summary pointer> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><h3 id="上述事例代码-14"><a href="#上述事例代码-14" class="headerlink" title="上述事例代码"></a>上述事例代码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;  这是一个默认打开的折叠框。&#123;% endfolding %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码折叠"><a href="#代码折叠" class="headerlink" title="代码折叠"></a>代码折叠</h2><details green><summary pointer> 查看代码测试 </summary>              <div class='content'>              <p>这里写代码高亮部分</p>              </div>            </details><p>###上述事例代码</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% folding green, 查看代码测试 %&#125;这里写代码高亮部分&#123;% endfolding %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="列表折叠"><a href="#列表折叠" class="headerlink" title="列表折叠"></a>列表折叠</h2><details yellow><summary pointer> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><p>###上述事例代码</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% folding yellow, 查看列表测试 %&#125;  <span class="token list punctuation">-</span> haha  <span class="token list punctuation">-</span> hehe&#123;% endfolding %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="嵌套折叠"><a href="#嵌套折叠" class="headerlink" title="嵌套折叠"></a>嵌套折叠</h2><details red><summary pointer> 查看嵌套测试 </summary>              <div class='content'>              <details blue><summary pointer> 查看嵌套测试2 </summary>              <div class='content'>              <details ><summary pointer> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://image.dbbqb.com/202101221115/7cdd741907c2ea150d054d24c4da6594/4d0G' ></span></p>              </div>            </details>              </div>            </details>              </div>            </details><h3 id="上述事例代码-15"><a href="#上述事例代码-15" class="headerlink" title="上述事例代码"></a>上述事例代码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% folding red, 查看嵌套测试 %&#125;&#123;% folding blue, 查看嵌套测试2 %&#125;&#123;% folding 查看嵌套测试3 %&#125;hahaha <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>https://image.dbbqb.com/202101221115/7cdd741907c2ea150d054d24c4da6594/4d0G<span class="token punctuation">'</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>&#123;% endfolding %&#125;&#123;% endfolding %&#125;&#123;% endfolding %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 class="bamboo-h " id="site-card标签演示效果">site-card标签演示效果</h1><br/><div class="site-card-group"><a class="site-card" href="http://www.baidu.com"><div class="img"><img src="https://pic4.zhimg.com/v2-7fcb0d73e1d90788ccf136e22ba7b1bd_r.jpg" class="lazyload placeholder" data-srcset="https://pic4.zhimg.com/v2-7fcb0d73e1d90788ccf136e22ba7b1bd_r.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></div><div class="info style="background: rgb(0, 0, 0) center center""><img src="https://pic4.zhimg.com/80/v2-45eb5749949e7f90a5c788f9bc5721ef_1440w.jpg" class="lazyload placeholder" data-srcset="https://pic4.zhimg.com/80/v2-45eb5749949e7f90a5c788f9bc5721ef_1440w.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/><span class="title">木兮</span><span class="desc">这是描述</span></div></a><a class="site-card" href="https://yuang01.gitee.io/"><div class="img"><img src="https://pic4.zhimg.com/80/v2-f549722dac8f777693c090a92498de0f_1440w.jpg" class="lazyload placeholder" data-srcset="https://pic4.zhimg.com/80/v2-f549722dac8f777693c090a92498de0f_1440w.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></div><div class="info style="background: rgb(0, 0, 0) center center""><img src="https://pic3.zhimg.com/80/v2-8bb491487280587026cd576b224ca91e_1440w.jpg" class="lazyload placeholder" data-srcset="https://pic3.zhimg.com/80/v2-8bb491487280587026cd576b224ca91e_1440w.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/><span class="title">yuang01</span><span class="desc">这是描述哦</span></div></a><a class="site-card" href="http://www.baidu.com"><div class="img"><img src="https://pic4.zhimg.com/v2-7fcb0d73e1d90788ccf136e22ba7b1bd_r.jpg" class="lazyload placeholder" data-srcset="https://pic4.zhimg.com/v2-7fcb0d73e1d90788ccf136e22ba7b1bd_r.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></div><div class="info style="background: rgb(0, 0, 0) center center""><img src="https://pic4.zhimg.com/80/v2-45eb5749949e7f90a5c788f9bc5721ef_1440w.jpg" class="lazyload placeholder" data-srcset="https://pic4.zhimg.com/80/v2-45eb5749949e7f90a5c788f9bc5721ef_1440w.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/><span class="title">木兮</span><span class="desc">这是描述</span></div></a><a class="site-card" href="https://yuang01.gitee.io/"><div class="img"><img src="https://pic4.zhimg.com/80/v2-f549722dac8f777693c090a92498de0f_1440w.jpg" class="lazyload placeholder" data-srcset="https://pic4.zhimg.com/80/v2-f549722dac8f777693c090a92498de0f_1440w.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></div><div class="info style="background: rgb(0, 0, 0) center center""><img src="https://pic3.zhimg.com/80/v2-8bb491487280587026cd576b224ca91e_1440w.jpg" class="lazyload placeholder" data-srcset="https://pic3.zhimg.com/80/v2-8bb491487280587026cd576b224ca91e_1440w.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/><span class="title">yuang01</span><span class="desc">这是描述哦</span></div></a><a class="site-card" href="http://www.baidu.com"><div class="img"><img src="https://pic4.zhimg.com/v2-7fcb0d73e1d90788ccf136e22ba7b1bd_r.jpg" class="lazyload placeholder" data-srcset="https://pic4.zhimg.com/v2-7fcb0d73e1d90788ccf136e22ba7b1bd_r.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></div><div class="info style="background: rgb(0, 0, 0) center center""><img src="https://pic4.zhimg.com/80/v2-45eb5749949e7f90a5c788f9bc5721ef_1440w.jpg" class="lazyload placeholder" data-srcset="https://pic4.zhimg.com/80/v2-45eb5749949e7f90a5c788f9bc5721ef_1440w.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/><span class="title">木兮</span><span class="desc">这是描述</span></div></a></div><h3 id="上述事例代码-16"><a href="#上述事例代码-16" class="headerlink" title="上述事例代码"></a>上述事例代码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% sitegroup %&#125;    &#123;% site 木兮, url=http://www.baidu.com, screenshot=https://pic4.zhimg.com/v2-7fcb0d73e1d90788ccf136e22ba7b1bd_r.jpg, avatar=https://pic4.zhimg.com/80/v2-45eb5749949e7f90a5c788f9bc5721ef_1440w.jpg, description=这是描述 %&#125;    &#123;% site yuang01, url=https://yuang01.gitee.io/, screenshot=https://pic4.zhimg.com/80/v2-f549722dac8f777693c090a92498de0f_1440w.jpg, avatar=https://pic3.zhimg.com/80/v2-8bb491487280587026cd576b224ca91e_1440w.jpg, description=这是描述哦 %&#125;    &#123;% site 木兮, url=http://www.baidu.com, screenshot=https://pic4.zhimg.com/v2-7fcb0d73e1d90788ccf136e22ba7b1bd_r.jpg, avatar=https://pic4.zhimg.com/80/v2-45eb5749949e7f90a5c788f9bc5721ef_1440w.jpg, description=这是描述 %&#125;    &#123;% site yuang01, url=https://yuang01.gitee.io/, screenshot=https://pic4.zhimg.com/80/v2-f549722dac8f777693c090a92498de0f_1440w.jpg, avatar=https://pic3.zhimg.com/80/v2-8bb491487280587026cd576b224ca91e_1440w.jpg, description=这是描述哦 %&#125;    &#123;% site 木兮, url=http://www.baidu.com, screenshot=https://pic4.zhimg.com/v2-7fcb0d73e1d90788ccf136e22ba7b1bd_r.jpg, avatar=https://pic4.zhimg.com/80/v2-45eb5749949e7f90a5c788f9bc5721ef_1440w.jpg, description=这是描述 %&#125;&#123;% endsitegroup %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 class="bamboo-h " id="timeline时间线标签演示效果">timeline时间线标签演示效果</h1><br/><div class="timeline">    <div class="timenode"><div class="meta"><p><p>2021-01-01 <a href="https://github.com/yuang01/hexo-theme-bamboo">1.0.3 -&gt; 1.0.3</a></p></p></div><div class="body"><ol><li>我是一个测试文字<code>ghghgh</code>。</li><li>我是一个测试问题二’qweqw’，请问企鹅请问请问佛挡杀<code>fgfgf</code>佛第三节课。</li><li>我是一个测试问题三’fgfgfg’，请问企鹅请问请问佛挡杀<code>trtrtr</code>佛第三节课。</li></ol></div></div>    <div class="timenode"><div class="meta"><p><p>2020-08-15 <a href="https://github.com/yuang01/hexo-theme-bamboo">1.0.2 -&gt; 1.0.2</a></p></p></div><div class="body"><p>这是一段测试文字    </p></div></div>    <div class="timenode"><div class="meta"><p><p>2020-08-08 <a href="https://github.com/yuang01/hexo-theme-bamboo">1.0.0 -&gt; 1.0.0</a></p></p></div><div class="body"><ol><li>我是一个测试文字<code>ghghgh</code>。</li><li>我是一个测试问题二’qweqw’，请问企鹅请问请问佛挡杀<code>fgfgf</code>佛第三节课。</li><li>我是一个测试问题三’fgfgfg’，请问企鹅请问请问佛挡杀<code>trtrtr</code>佛第三节课。</li></ol></div></div></div><h3 id="上述事例代码-17"><a href="#上述事例代码-17" class="headerlink" title="上述事例代码"></a>上述事例代码</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% timeline %&#125;<span class="token code keyword">    &#123;% timenode 2021-01-01 [1.0.3 -> 1.0.3](https://github.com/yuang01/hexo-theme-bamboo) %&#125;        1. 我是一个测试文字`ghghgh`。        2. 我是一个测试问题二'qweqw'，请问企鹅请问请问佛挡杀`fgfgf`佛第三节课。        2. 我是一个测试问题三'fgfgfg'，请问企鹅请问请问佛挡杀`trtrtr`佛第三节课。    &#123;% endtimenode %&#125;</span><span class="token code keyword">    &#123;% timenode 2020-08-15 [1.0.2 -> 1.0.2](https://github.com/yuang01/hexo-theme-bamboo) %&#125;        这是一段测试文字    &#123;% endtimenode %&#125;</span><span class="token code keyword">    &#123;% timenode 2020-08-08 [1.0.0 -> 1.0.0](https://github.com/yuang01/hexo-theme-bamboo) %&#125;        1. 我是一个测试文字`ghghgh`。        2. 我是一个测试问题二'qweqw'，请问企鹅请问请问佛挡杀`fgfgf`佛第三节课。        2. 我是一个测试问题三'fgfgfg'，请问企鹅请问请问佛挡杀`trtrtr`佛第三节课。    &#123;% endtimenode %&#125;</span>&#123;% endtimeline %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 本站介绍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主题介绍-页面配置</title>
      <link href="/post/ben-zhan-jie-shao/zhu-ti-jie-shao-ye-mian-pei-zhi/"/>
      <url>/post/ben-zhan-jie-shao/zhu-ti-jie-shao-ye-mian-pei-zhi/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>注意</strong>: icon使用的 <a href="https://fontawesome.dashgame.com/">Font Awesome</a> 版本为 <code>5.15.3</code>。</p></blockquote><h1 class="bamboo-h " id="页面基本功能">页面基本功能</h1><br/><h2 id="首页轮播图"><a href="#首页轮播图" class="headerlink" title="首页轮播图"></a>首页轮播图</h2><p>首页轮播图在<code>source/_posts/xxx.md</code>也就是文章页面配置，如果你想让某个文章放在首页轮播中，只用设置<code>swiper: true</code>即可，可以通过<code>swiperImg: xxx</code>来配置轮播图片，如下所示</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> Hello world<span class="token key atrule">date</span><span class="token punctuation">:</span> 2021<span class="token punctuation">-</span>10<span class="token punctuation">-</span>20 21<span class="token punctuation">:</span><span class="token number">11</span><span class="token key atrule">swiper</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">swiperImg</span><span class="token punctuation">:</span> <span class="token string">'https://ssyerv1.oss-cn-hangzhou.aliyuncs.com/picture/c080ff4434354e35af9dab0a3ee1b9f7.jpg!sswm'</span><span class="token key atrule">swiperDesc</span><span class="token punctuation">:</span> <span class="token string">'我是文章在轮播图中的摘要'</span><span class="token punctuation">---</span>我是文章内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>swiperImg</code>可以是cdn地址，也可以是本地地址，例如<code>/medias/4.png</code><br>可以通过主题文件夹下的<code>_config.yml</code>文件中的<code>swiper</code>属性对轮播进行调整</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 首页轮播图设置</span><span class="token key atrule">swiper</span><span class="token punctuation">:</span>  <span class="token comment"># 当在.md文件中，设置swiper:true，会将该文章放到轮播中，</span>  <span class="token key atrule">showPrevNext</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否显示左右切换按钮</span>  <span class="token key atrule">showIndicators</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 是否显示指示器</span>  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 是否自动轮播</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 让轮播看起来是循环的, 例如false的话，到达最后一个轮播图的时候，右按钮不能点击</span>  <span class="token key atrule">delay</span><span class="token punctuation">:</span> <span class="token number">5000</span> <span class="token comment"># 切换延迟时间</span>  <span class="token key atrule">effect</span><span class="token punctuation">:</span> <span class="token string">'slide'</span> <span class="token comment"># 'fade': 淡入淡出效果</span>  <span class="token key atrule">textAnimated</span><span class="token punctuation">:</span> <span class="token string">'fadeInDown'</span> <span class="token comment"># 文字动画，属性使用 animate.css, https://daneden.github.io/animate.css/</span>  <span class="token key atrule">textDuration</span><span class="token punctuation">:</span> <span class="token string">'0.2s'</span> <span class="token comment"># 文字动画持续时间（单位秒）</span>  <span class="token key atrule">textDelay</span><span class="token punctuation">:</span> <span class="token string">'0.1s'</span> <span class="token comment"># 文字动画延迟时间（单位秒）</span>  <span class="token key atrule">readMoreBtn</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 阅读更多按钮是否显示</span>  <span class="token key atrule">readMoreBtnBackgroundColor</span><span class="token punctuation">:</span> <span class="token string">''</span> <span class="token comment"># 阅读更多按钮背景颜色,空字符串则默认使用主题颜色</span>  <span class="token key atrule">bubble</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 轮播图是否显示气泡,也可以打开底下的花瓣或者雪花特效 sakura（花瓣）: true snow(雪花): true</span>  <span class="token comment"># 当没有文章设置swiper: true时候，轮播图会显示以下default默认内容，可自行切换对应内容</span>  <span class="token key atrule">defaultImg</span><span class="token punctuation">:</span> <span class="token string">'https://w.wallhaven.cc/full/eo/wallhaven-eo678l.jpg'</span> <span class="token comment"># 图片，没有则随机选取</span>  <span class="token key atrule">defaultVideo</span><span class="token punctuation">:</span> <span class="token string">''</span> <span class="token comment"># video，min-width:992px show</span>  <span class="token key atrule">defaultVideoLoadingImg</span><span class="token punctuation">:</span> <span class="token string">'https://img14.360buyimg.com/ddimg/jfs/t1/150557/6/19578/249564/60320406Ed5c42418/0d18299f505e4268.gif'</span> <span class="token comment"># video loading img -- use .gif img, 视频预加载动画，使用gif图片作为loading，为空则视频没有预加载动画</span>  <span class="token key atrule">defaultTile</span><span class="token punctuation">:</span> <span class="token string">'青墨书晚风'</span> <span class="token comment"># 标题</span>  <span class="token key atrule">defaultDesc</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'煮酒洗净尘嚣，论知交'</span><span class="token punctuation">,</span> <span class="token string">'万般付之一笑，共偕老'</span><span class="token punctuation">]</span> <span class="token comment">#描 述，例如 ['煮酒洗净尘嚣，论知交', '万般付之一笑，共偕老']</span>  <span class="token key atrule">defaultLeftBtnText</span><span class="token punctuation">:</span> <span class="token string">'阅读文档'</span> <span class="token comment"># 左边按钮文字, 空字符串则不显示</span>  <span class="token key atrule">defaultLeftBtnLink</span><span class="token punctuation">:</span> <span class="token string">'https://yuang01.gitee.io/2021/02/08/hexo-theme-bamboo-new/'</span> <span class="token comment"># 左边按钮链接 </span>  <span class="token key atrule">defaultRightBtnText</span><span class="token punctuation">:</span> <span class="token string">'下载主题'</span> <span class="token comment"># 右边按钮的文字，空字符串则不显示</span>  <span class="token key atrule">defaultRightBtnLink</span><span class="token punctuation">:</span> <span class="token string">'https://gitee.com/yuang01/hexo-theme-bamboo/repository/archive/dev.zip'</span> <span class="token comment"># 右边的按钮的链接</span>  <span class="token key atrule">defaultDescTyped</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># defaultDesc文字是否开启打字特效  is typed</span>  <span class="token key atrule">defaultDescTypedSpeed</span><span class="token punctuation">:</span> <span class="token number">100</span> <span class="token comment"># defaultDesc 打字速度, typed typeSpeed</span>  <span class="token key atrule">defaultDescTypedBackSpeed</span><span class="token punctuation">:</span> <span class="token number">50</span> <span class="token comment"># defaultDesc 打字返回速度 typed backSpeed</span>  <span class="token key atrule">defaultDescTypedLoop</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># defaultDesc文字的打字特效是否循环  typed loop</span>  <span class="token comment"># defaultAddToSwiper表示：当有文章设置了swiper: true的时候，将上面的 默认内容 放在轮播图的第一页</span>  <span class="token key atrule">defaultAddToSwiper</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 开启这个，则loop默认为false</span>  <span class="token key atrule">bothSideBlur</span><span class="token punctuation">:</span> <span class="token string">'300000px'</span> <span class="token comment"># 轮播图两边模糊程度，px越大越模糊，针对下面的imgwidthFull、full为false的时候</span>  <span class="token comment">## 轮播图样式更改</span>  <span class="token comment"># 轮播图的文字和按钮居中显示 (针对 imgwidthFull和 full都是false的时候)</span>  <span class="token key atrule">textCenter</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment"># 图片宽度为100% (轮播图的文字和按钮只能居中显示)</span>  <span class="token key atrule">imgwidthFull</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment"># 整个轮播图宽高都是100%  (轮播图的文字和按钮只能居中显示)</span>  <span class="token key atrule">full</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># full 优先级大于 imgwidthFull</span>  <span class="token comment"># 两边透明，imgwidthFull/full: false的时候，设置该值为true，则两边的模糊效果为透明</span>  <span class="token key atrule">bothSideTransparent</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>defaultAddToSwiper表示，当有文章设置了swiper:true的时候，将default默认轮播图作为第一张轮播图</li><li>通过textCenter控制轮播图的文字和按钮是否居中显示, imgwidthFull设置轮播图是否宽度为100%，但是高度不为100%，full表示轮播图宽高都是100%</li><li>还可以通过设置defaultVideo参数将默认轮播图的背景设置为视频，视频在屏幕大于992px的时候显示，小于992px则显示图片。</li><li>如果你不想导航透明，则可以设置底下的color_scheme.common.headerMenuTransparent为false</li></ul><blockquote><p>那免费的视频从哪里找呢，我推荐下面两个免费视频网站，直接右键复制网站视频链接就行了，不用下载下来</p></blockquote><div class="tagLink"><a class="link-card" title="mixkit视频网站" href="https://mixkit.co/"><span class="link-card-backdrop" style="background-image: url(https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg)"></span><div class="left"><img src="https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg" class="lazyload placeholder" data-srcset="https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></div><div class="right"><p class="text">mixkit视频网站</p><p class="url">https://mixkit.co/</p></div></a></div><div class="tagLink"><a class="link-card" title="coverr免费视频网站" href="https://coverr.co/"><span class="link-card-backdrop" style="background-image: url(https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg)"></span><div class="left"><img src="https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg" class="lazyload placeholder" data-srcset="https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></div><div class="right"><p class="text">coverr免费视频网站</p><p class="url">https://coverr.co/</p></div></a></div><h2 id="首页座右铭"><a href="#首页座右铭" class="headerlink" title="首页座右铭"></a>首页座右铭</h2><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">motto:  on: true  title: '座右铭'  content: '沉淀后我愿意做个温暖的人，有自己的喜好，有自己的原则，有自己的信仰，不急功近利，不浮夸轻薄。宠辱不惊，淡定安逸，心静如水，不忘初心，方得始终。——凌茜'  background: 'url("https://img10.360buyimg.com/ddimg/jfs/t1/166587/8/21344/72069/6088c24fEda5fdeb6/f9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="首页公告"><a href="#首页公告" class="headerlink" title="首页公告"></a>首页公告</h2><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">notice</span><span class="token punctuation">:</span>  <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">seamless</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 为true时，则无缝不停止滚动，false是会停一下的滚动</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token string">'公告'</span>  <span class="token key atrule">background</span><span class="token punctuation">:</span> <span class="token string">'url("https://img10.360buyimg.com/ddimg/jfs/t1/166587/8/21344/72069/6088c24fEda5fdeb6/f9730ab637b7ca47.png")'</span> <span class="token comment"># url("xxx") or red or #000 or rgba() ..</span>  <span class="token key atrule">list</span><span class="token punctuation">:</span> <span class="token comment"># list相当于数组对象，[&#123;title:'xx',date: 'xx', url: 'xxx', color: 'red'&#125;]根据自己实际情况，增加或者删除</span>    <span class="token punctuation">-</span> <span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token string">'#博客更新到2.0了'</span>      <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token string">'2021-04-28'</span>      <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token string">'http://baidu.com'</span>   <span class="token comment"># 可以为空, 也可以是本地页面地址如 '/archives'</span>      <span class="token key atrule">color</span><span class="token punctuation">:</span> red   <span class="token comment"># 字体颜色</span>    <span class="token punctuation">-</span> <span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token string">'#新增 轮播图支持三种模式了，功能也增强了 ~'</span>      <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token string">'2021-04-28'</span>      <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token string">'http://baidu.com'</span>      <span class="token key atrule">color</span><span class="token punctuation">:</span> red    <span class="token punctuation">-</span> <span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token string">'#新增 支持二级导航'</span>      <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token string">'2021-04-28'</span>      <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token string">'http://baidu.com'</span>      <span class="token key atrule">color</span><span class="token punctuation">:</span> blue    <span class="token punctuation">-</span> <span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token string">'#新增 归档，分类等页面头部图片位置可以设置为视频 ~'</span>      <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token string">'2021-04-28'</span>      <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token string">'http://baidu.com'</span>      <span class="token key atrule">color</span><span class="token punctuation">:</span> <span class="token string">'#42b983'</span>    <span class="token punctuation">-</span> <span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token string">'#新增 头部导航可以设置为在顶部透明，并且可以任意设置背景颜色了 ~'</span>      <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token string">'2021-04-28'</span>      <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token string">'http://baidu.com'</span>    <span class="token punctuation">-</span> <span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token string">'#新增 首页增加了座右铭和公告栏目 ~'</span>      <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token string">'2021-04-28'</span>      <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token string">'http://baidu.com'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="github地址"><a href="#github地址" class="headerlink" title="github地址"></a>github地址</h2><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># github地址, 头部导航右上角的github链接</span><span class="token key atrule">Github</span><span class="token punctuation">:</span>   <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/yuang01/hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>bamboo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="网站favicon和logo"><a href="#网站favicon和logo" class="headerlink" title="网站favicon和logo"></a>网站favicon和logo</h2><p>设置主题文件夹下的<code>_config.yml</code>文件中的<code>favicon</code>和logo属性即可</p><h2 id="页面刷新时预加载动画"><a href="#页面刷新时预加载动画" class="headerlink" title="页面刷新时预加载动画"></a>页面刷新时预加载动画</h2><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">preloader</span><span class="token punctuation">:</span>  <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="回到顶部"><a href="#回到顶部" class="headerlink" title="回到顶部"></a>回到顶部</h2><p>设置主题文件夹下的<code>_config.yml</code>文件中的<code>goTop</code>属性即可控制隐藏显示</p><h2 id="文章详情页图片放大功能"><a href="#文章详情页图片放大功能" class="headerlink" title="文章详情页图片放大功能"></a>文章详情页图片放大功能</h2><p>设置主题文件夹下的<code>_config.yml</code>文件中的<code>fancybox</code>属性即可</p><h2 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h2><p>页脚底部的网站统计功能，使用的是<a href="http://busuanzi.ibruce.info/">不蒜子</a>，设置主题文件夹下的<code>_config.yml</code>文件中的<code>busuanzi</code>属性即可控制隐藏显示<br>页脚信息可以在<code>/layout/_partial/footer.ejs</code> 文件中进行手动修改。本主题使用<a href="http://www.fontawesome.com.cn/faicons/">Font Awesome图标</a></p><blockquote><p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.15.3</code>。</p></blockquote><h2 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h2><p>设置主题文件夹下的<code>_config.yml</code>文件中的<code>donate</code>属性为true，然后更改<code>Alipay</code>和<code>WeChatpay</code>图片路径即可</p><h2 id="文章详情页分享功能"><a href="#文章详情页分享功能" class="headerlink" title="文章详情页分享功能"></a>文章详情页分享功能</h2><p>设置主题文件夹下的<code>_config.yml</code>文件中的<code>sharejs</code>属性true或者false即可</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 分享功能</span><span class="token key atrule">sharejs</span><span class="token punctuation">:</span>   <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">sites</span><span class="token punctuation">:</span> twitter<span class="token punctuation">,</span>facebook<span class="token punctuation">,</span>google<span class="token punctuation">,</span>qq<span class="token punctuation">,</span>qzone<span class="token punctuation">,</span>wechat<span class="token punctuation">,</span>weibo<span class="token punctuation">,</span>douban<span class="token punctuation">,</span>linkedin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="鼠标点击特效"><a href="#鼠标点击特效" class="headerlink" title="鼠标点击特效"></a>鼠标点击特效</h2><p>设置主题文件夹下的<code>_config.yml</code>文件中的<code>cursor_effect</code>属性true或者false即可</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 鼠标点击特效</span><span class="token key atrule">cursor_effect</span><span class="token punctuation">:</span>  <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> explosion  <span class="token comment"># fireworks: 礼花 | explosion: 爆炸 | love: 浮出爱心 | text: 浮出文字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="复制成功提醒"><a href="#复制成功提醒" class="headerlink" title="复制成功提醒"></a>复制成功提醒</h2><p>当复制内容时候，是否显示复制成功提示,提示语可以自己修改<br>设置主题文件夹下的<code>_config.yml</code>文件中的<code>copy</code>属性true或者false即可</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 复制成功提示</span><span class="token key atrule">copy</span><span class="token punctuation">:</span>  <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token string">'成功'</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span> <span class="token string">'复制成功了哦'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="雪花飘落和花瓣飘落特效"><a href="#雪花飘落和花瓣飘落特效" class="headerlink" title="雪花飘落和花瓣飘落特效"></a>雪花飘落和花瓣飘落特效</h2><p>设置主题文件夹下的<code>_config.yml</code>文件中的<code>snow</code>或者<code>sakura</code>属性true或者false即可</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 首页雪花飘落效果--冬天</span><span class="token key atrule">snow</span><span class="token punctuation">:</span>  <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">onlyPc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设为true，只有pc端显示雪花特效</span><span class="token comment"># 首页花瓣飘落效果--春天</span><span class="token key atrule">sakura</span><span class="token punctuation">:</span>  <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">onlyPc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设为true，只有pc端显示花瓣特效</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文章详情页的标题显示位置"><a href="#文章详情页的标题显示位置" class="headerlink" title="文章详情页的标题显示位置"></a>文章详情页的标题显示位置</h2><p>设置主题文件夹下的<code>_config.yml</code>文件中的<code>postTitleTop</code>属性true或者false即可，true的时候，显示在上方的图片中，false显示在文章内容上面</p><h2 id="输入框打字特效"><a href="#输入框打字特效" class="headerlink" title="输入框打字特效"></a>输入框打字特效</h2><p>搜索弹框中的输入框打字特效，设置主题文件夹下的<code>_config.yml</code>文件中的<code>inputEffects</code>属性为true或者false即可。</p><h2 id="live-2d人物"><a href="#live-2d人物" class="headerlink" title="live-2d人物"></a>live-2d人物</h2><p>设置主题文件夹下的<code>_config.yml</code>文件中的<code>live2d</code>属性为true或者false，可以通过<code>modelId</code>属性选择模型，注意，live-2d人物只有在屏幕宽度最小为992px的时候才显示</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">modelId</span><span class="token punctuation">:</span> <span class="token number">2</span>  <span class="token comment"># 0 or 1 or 2 or 3 or 4 or 5 or 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="滚动动画"><a href="#滚动动画" class="headerlink" title="滚动动画"></a>滚动动画</h2><blockquote><p>设置主题文件夹下的<code>_config.yml</code>文件中的<code>aos</code>属性对首页中的文章列表动画进行控制，具体参考官网<a href="https://github.com/michalsnik/aos#animations">aos.js</a><br>目前使用的另一个动画特效</p></blockquote><h2 id="文章详情页目录"><a href="#文章详情页目录" class="headerlink" title="文章详情页目录"></a>文章详情页目录</h2><p>设置主题文件夹下的_config.yml文件中的toc的on属性，控制所有文章是否显示，还可以在在单个文章md页面里通过toc属性控制该文章的目录是否显示。</p><p>toc下的open参数控制所有的文章默认是否展开或者收缩，还可以在单个文章md页面里通过tocOpen参数控制该文章(具体某个文章)的目录默认是否展开收缩,参数如下:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 主题文件夹下的`_config.yml`文件中的`toc`属性</span><span class="token comment"># 文章目录</span><span class="token key atrule">toc</span><span class="token punctuation">:</span>  <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否显示</span>  <span class="token key atrule">heading</span><span class="token punctuation">:</span> h2<span class="token punctuation">,</span> h3<span class="token punctuation">,</span> h4  <span class="token key atrule">open</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否展开，false则收缩</span>  <span class="token key atrule">showBtn</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否显示展开收缩按钮</span>  <span class="token key atrule">showOrderNumber</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否显示序号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 单个文章里控制显示和隐藏，展开和收缩</span><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> 我是文章标题<span class="token key atrule">tags</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'vue'</span><span class="token punctuation">,</span> <span class="token string">'html'</span><span class="token punctuation">]</span><span class="token key atrule">categories</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'前端'</span><span class="token punctuation">,</span> <span class="token string">'运维'</span><span class="token punctuation">,</span> <span class="token string">'攻城狮'</span><span class="token punctuation">]</span><span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 该文章目录不显示</span><span class="token key atrule">tocOpen</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 该文章目录收缩</span><span class="token punctuation">---</span>我是文章内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h2><p>设置主题文件夹下的<code>_config.yml</code>文件中的<code>music</code>属性，控制其显示隐藏和其他一些调整, <code>music</code>中的<code>fixed</code>属性建议使用<code>true</code><br>可以添加多个音乐源</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">music</span><span class="token punctuation">:</span>  <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">autoHide</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment"># hide automaticaly</span>  <span class="token comment">#  server: tencent   #requiremusic platform: netease, tencent, kugou, xiami, baidu</span>  <span class="token comment">#  type: playlist    #require song, playlist, album, search, artist</span>  <span class="token comment">#  id: 8062553743     #requiresong id / playlist id / album id / search keyword</span>  <span class="token key atrule">source</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">server</span><span class="token punctuation">:</span> netease     <span class="token comment"># 歌手-张卫-脱胎换骨</span>      <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">1365053719</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> song    <span class="token punctuation">-</span> <span class="token key atrule">server</span><span class="token punctuation">:</span> netease     <span class="token comment"># 专辑-许嵩单曲集-许嵩</span>      <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">16959</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> album    <span class="token punctuation">-</span> <span class="token key atrule">server</span><span class="token punctuation">:</span> netease     <span class="token comment">#个人歌单</span>      <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">4888271555</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> playlist    <span class="token punctuation">-</span> <span class="token key atrule">server</span><span class="token punctuation">:</span> tencent     <span class="token comment"># 歌手-张卫-机器灵砍菜刀</span>      <span class="token key atrule">id</span><span class="token punctuation">:</span> 003FaEB64D0QIa      <span class="token key atrule">type</span><span class="token punctuation">:</span> song    <span class="token punctuation">-</span> <span class="token key atrule">server</span><span class="token punctuation">:</span> tencent     <span class="token comment"># 歌手-陈奕迅</span>      <span class="token key atrule">id</span><span class="token punctuation">:</span> 003Nz2So3XXYek      <span class="token key atrule">type</span><span class="token punctuation">:</span> artist    <span class="token punctuation">-</span> <span class="token key atrule">server</span><span class="token punctuation">:</span> tencent     <span class="token comment"># 专辑-认了吧-陈奕迅</span>      <span class="token key atrule">id</span><span class="token punctuation">:</span> 003yQidc3s7P65      <span class="token key atrule">type</span><span class="token punctuation">:</span> album    <span class="token punctuation">-</span> <span class="token key atrule">server</span><span class="token punctuation">:</span> tencent     <span class="token comment">#个人歌单</span>      <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">8197627936</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> playlist    <span class="token punctuation">-</span> <span class="token key atrule">server</span><span class="token punctuation">:</span> kugou           <span class="token comment"># 歌手-Gai-兰花草</span>      <span class="token key atrule">id</span><span class="token punctuation">:</span> 0127069EBDBCF0AD6BF0B60CE873835D      <span class="token key atrule">type</span><span class="token punctuation">:</span> song    <span class="token punctuation">-</span> <span class="token key atrule">server</span><span class="token punctuation">:</span> kugou           <span class="token comment"># 歌手-Gai</span>      <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">718960</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> artist    <span class="token punctuation">-</span> <span class="token key atrule">server</span><span class="token punctuation">:</span> kugou         <span class="token comment"># 专辑-一万个理由-郑源</span>      <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">1787575</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> album    <span class="token punctuation">-</span> <span class="token key atrule">server</span><span class="token punctuation">:</span> kugou         <span class="token comment">#个人歌单</span>      <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">3947753</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> playlist  <span class="token key atrule">fixed</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>       <span class="token comment"># 开启吸底模式，建议开启</span>  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token comment"># 是否自动播放</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'#42b983'</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token string">'all'</span>       <span class="token comment"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token string">'random'</span>   <span class="token comment"># 音频循环顺序, 可选值: 'list', 'random'</span>  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token string">'auto'</span>   <span class="token comment"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.7</span>       <span class="token comment"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  <span class="token key atrule">listFolded</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 列表默认折叠</span>  <span class="token key atrule">hideLrc</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>     <span class="token comment"># 隐藏歌词</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="版权信息"><a href="#版权信息" class="headerlink" title="版权信息"></a>版权信息</h2><p>可以在<code>source/_posts/xxx.md</code>文件中设置<code>copyright</code>true或者false，单独设置某个文章的版权信息是否显示，也可以在主题文件夹下的<code>_config.yml</code>文件中的<code>copyright</code>属性设置true或者false对所有文章的版权信息进行显示隐藏控制</p><h2 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h2><p>可以在<code>source/_posts/xxx.md</code>文件中设置<code>top: true</code>，将该文章放在首页的文章置顶栏目中，可以在主题文件夹下的<code>_config.yml</code>文件中的<code>topArticle</code>属性设置true或者false控制首页的文章置顶栏目显示和隐藏。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> Hello World<span class="token key atrule">date</span><span class="token punctuation">:</span> 2021<span class="token punctuation">-</span>10<span class="token punctuation">-</span>21 21<span class="token punctuation">:</span><span class="token number">11</span><span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token punctuation">---</span>我是文章内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h2><p>主题中内置了<code>valine</code>, <code>miniValine</code>, <code>livere</code>, <code>gitment</code>, <code>gitalk</code>, <code>changyan</code>评论<br>通过主题文件夹下的<code>_config.yml</code>文件中的相应属性进行设置<br>推荐使用<code>valine</code>和<code>livere</code><br>这里重点说一下<code>valine</code>评论配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">valine</span><span class="token punctuation">:</span>  <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否启用</span>  <span class="token key atrule">appid</span><span class="token punctuation">:</span> <span class="token comment"># 你的appid --> https://valine.js.org/quickstart.html，请阅读这个获取appid和appkey</span>  <span class="token key atrule">appkey</span><span class="token punctuation">:</span> <span class="token comment"># 你的key</span>  <span class="token key atrule">avatar</span><span class="token punctuation">:</span> <span class="token string">''</span> <span class="token comment"># 匿名者头像选项 https://valine.js.org/avatar.html 访客的头像,最好启用下面的`requiredFields`中的邮箱必填，填写qq邮箱，头像会变成qq头像</span>  <span class="token key atrule">placeholder</span><span class="token punctuation">:</span> <span class="token string">'客官，说点什么吧'</span> <span class="token comment"># 评论内容输入框的 placeholder</span>  <span class="token key atrule">master</span><span class="token punctuation">:</span> <span class="token string">'xxxxxx'</span> <span class="token comment"># 博主标签识别，博主邮箱md5 可以去md5加密网站，例如 https://md5jiami.51240.com/ ，将自己的邮箱输入， 得到 32位小写 的字符串填入这里</span>  <span class="token key atrule">friends</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'xxxxxxx'</span><span class="token punctuation">,</span> <span class="token string">'xxxxxx'</span><span class="token punctuation">]</span> <span class="token comment"># 小伙伴的 邮箱md5， 是个数组</span>  <span class="token key atrule">requiredFields</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'nick'</span><span class="token punctuation">,</span> <span class="token string">'mail'</span><span class="token punctuation">]</span> <span class="token comment"># 设置必填项 ['nick', 'mail'] nick为昵称必填， mail为邮箱必填, 空数组，则不校验</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="鼠标手势"><a href="#鼠标手势" class="headerlink" title="鼠标手势"></a>鼠标手势</h2><p>设置主题文件夹下的_config.yml文件中的cursor属性，可自行替换链接，参数如下:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 鼠标手势</span><span class="token key atrule">cursor</span><span class="token punctuation">:</span>  <span class="token key atrule">pointer</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//zhutix.com/wp<span class="token punctuation">-</span>content/themes/b2/x2.cur  <span class="token key atrule">default</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//zhutix.com/wp<span class="token punctuation">-</span>content/themes/b2/x1.cur  <span class="token key atrule">text</span><span class="token punctuation">:</span>   <span class="token key atrule">zoom-in</span><span class="token punctuation">:</span>   <span class="token key atrule">zoom-out</span><span class="token punctuation">:</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h2><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># wordcount字数统计, 需要 npm i hexo-wordcount 安装</span><span class="token key atrule">wordcount</span><span class="token punctuation">:</span>  <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="天气"><a href="#天气" class="headerlink" title="天气"></a>天气</h2><p>设置主题文件夹<code>_config.yml</code>的weather属性true或者false，控制显示和隐藏</p><h2 id="背影彩带"><a href="#背影彩带" class="headerlink" title="背影彩带"></a>背影彩带</h2><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 背影彩带</span><span class="token key atrule">ribbon</span><span class="token punctuation">:</span>  <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h2><p>设置主题文件夹下的<code>_config.yml</code>文件中的loadingImg属性，可自行修改预加载图片链接</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 图片懒加载</span><span class="token comment"># https://www.npmjs.com/package/vanilla-lazyload</span><span class="token key atrule">lazyload</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">js</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/npm/vanilla<span class="token punctuation">-</span>lazyload@17.1.0/dist/lazyload.min.js  <span class="token key atrule">onlypost</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">loadingImg</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//img2.baidu.com/it/u=2037979560<span class="token punctuation">,</span>2772131037<span class="token important">&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg</span>  <span class="token key atrule">blurIn</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 模糊加载效果 （loadingImg为空时有效）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="关灯"><a href="#关灯" class="headerlink" title="关灯"></a>关灯</h2><p>设置主题文件夹下的<code>_config.yml</code>文件中的dark属性，控制头部导航的开关灯按钮是否显示，控制是否默认显示关灯, 具体如下</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 黑夜模式, 关灯</span><span class="token key atrule">dark</span><span class="token punctuation">:</span>  <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否在头部导航上显示开关灯</span>  <span class="token key atrule">default</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment"># true为默认关灯状态（刷新页面和跳转页面都是关灯状态），false为默认开灯状态(网页第一次打开的时候为开灯状态)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="弹幕"><a href="#弹幕" class="headerlink" title="弹幕"></a>弹幕</h2><p>显示当前页面的弹幕</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 弹幕 只对valine评论有效，需要开启valine评论</span><span class="token key atrule">danmu</span><span class="token punctuation">:</span>  <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设为true，则弹幕完了之后，继续查询评论接口，将该篇文章的评论再显示在弹幕里</span>  <span class="token key atrule">delay</span><span class="token punctuation">:</span> <span class="token number">5000</span> <span class="token comment"># 每条弹幕之间出现的间隔时间</span>  <span class="token key atrule">speed</span><span class="token punctuation">:</span> <span class="token number">20</span> <span class="token comment"># 弹幕运行的速度, 越小越快</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="灯笼"><a href="#灯笼" class="headerlink" title="灯笼"></a>灯笼</h2><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">lantern</span><span class="token punctuation">:</span>  <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">left</span><span class="token punctuation">:</span> <span class="token string">'春'</span> <span class="token comment"># 左边灯笼的文字， 空字符串则没有文字</span>  <span class="token key atrule">right</span><span class="token punctuation">:</span> <span class="token string">'节'</span> <span class="token comment"># 右边灯笼的文字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文章标题打字特效"><a href="#文章标题打字特效" class="headerlink" title="文章标题打字特效"></a>文章标题打字特效</h2><p>文章详情页上的标题打字效果</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 文章详情页图片上的标题打字效果</span><span class="token key atrule">typed</span><span class="token punctuation">:</span>  <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 是否循环</span>  <span class="token key atrule">showCursor</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 是否显示光标</span>  <span class="token key atrule">startDelay</span><span class="token punctuation">:</span> <span class="token number">100</span> <span class="token comment"># 开始延迟</span>  <span class="token key atrule">typeSpeed</span><span class="token punctuation">:</span> <span class="token number">100</span> <span class="token comment"># 打字速度</span>  <span class="token key atrule">backSpeed</span><span class="token punctuation">:</span> <span class="token number">50</span> <span class="token comment"># 删除速度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文章头部气泡显示"><a href="#文章头部气泡显示" class="headerlink" title="文章头部气泡显示"></a>文章头部气泡显示</h2><p>文章详情页头部气泡效果</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 文章详情页图片上的气泡效果</span><span class="token key atrule">bubble</span><span class="token punctuation">:</span>  <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="首页文章图片显示位置"><a href="#首页文章图片显示位置" class="headerlink" title="首页文章图片显示位置"></a>首页文章图片显示位置</h2><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 首页文章图片是否一左一右交错显示</span><span class="token key atrule">homePostImgsPosition</span><span class="token punctuation">:</span>  <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">left</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 当上面的on设置为false（不交叉显示），则指定left为true的时候，图片在左边显示</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="归档、标签、分类、关于我、友情链接页面图片自定义"><a href="#归档、标签、分类、关于我、友情链接页面图片自定义" class="headerlink" title="归档、标签、分类、关于我、友情链接页面图片自定义"></a>归档、标签、分类、关于我、友情链接页面图片自定义</h2><p>通过主题文件夹下的<code>_config.yml</code>文件中的相应属性进行设置，属性如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 归档页面图片 or 'http://xxx'</span><span class="token key atrule">archiveImg</span><span class="token punctuation">:</span> <span class="token string">'/medias/archive.jpg'</span><span class="token comment"># 标签页面图片</span><span class="token key atrule">tagImg</span><span class="token punctuation">:</span> <span class="token string">'/medias/tag.jpg'</span><span class="token comment"># 标签详情页面图片</span><span class="token key atrule">tagDetailImg</span><span class="token punctuation">:</span> <span class="token string">'/medias/tagDetail.jpg'</span><span class="token comment"># 分类页面图片</span><span class="token key atrule">categoriesImg</span><span class="token punctuation">:</span> <span class="token string">'/medias/categories.jpg'</span><span class="token comment">#分类详情页面图片</span><span class="token key atrule">categoryDetailImg</span><span class="token punctuation">:</span> <span class="token string">'/medias/categoryDetail.jpg'</span><span class="token comment"># 关于我页面图片</span><span class="token key atrule">aboutImg</span><span class="token punctuation">:</span> <span class="token string">'/medias/about.jpg'</span><span class="token comment"># 友情链接页面图片</span><span class="token key atrule">friendsImg</span><span class="token punctuation">:</span> <span class="token string">'/medias/friend.jpg'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="更改主题颜色"><a href="#更改主题颜色" class="headerlink" title="更改主题颜色"></a>更改主题颜色</h2><p>默认主题颜色是绿色(#42b983)，可以通过更改主题文件夹<code>hexo-theme-bamboo</code>下的文件：<code>source/css/_partial/custom.styl</code>,将文件中的所有(#42b983)颜色值替换成你想要的颜色，然后更改该文件下的<code>blockquote</code>背景颜色，代码如下:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">// 文章详情页的blockquote，md中的 > 标签的左边框和背景颜色.post-detail</span> <span class="token punctuation">&#123;</span>  <span class="token selector">blockquote</span> <span class="token punctuation">&#123;</span>      <span class="token property">border-left</span><span class="token punctuation">:</span> 4px solid #42b983<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>66<span class="token punctuation">,</span> 185<span class="token punctuation">,</span> 131<span class="token punctuation">,</span> .1<span class="token punctuation">)</span><span class="token punctuation">;</span> // 更改这个背景颜色为你想要的的颜色值  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>blockquote样式指的是下面这个</p><blockquote><p>我是blockquote</p></blockquote><p>例如，我将该文件下的所有颜色设置为<code>skyblue</code>，显示效果如下<br><img src="https://img13.360buyimg.com/ddimg/jfs/t1/120336/2/13322/273081/5f69b8d1E737e6277/8fdc796d2d3a82b3.png" class="lazyload placeholder" data-srcset="https://img13.360buyimg.com/ddimg/jfs/t1/120336/2/13322/273081/5f69b8d1E737e6277/8fdc796d2d3a82b3.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="theme-color"></p><p>代码高亮颜色，可以通过之前介绍的代码高亮进行更改</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>代码高亮如遇到花括号变成了<code>&amp;#123;&amp;#125;</code>这样的字符串，在根目录下输入npm install <a href="mailto:&#x68;&#101;&#120;&#x6f;&#64;&#52;&#x2e;&#50;&#x2e;&#49;">&#x68;&#101;&#120;&#x6f;&#64;&#52;&#x2e;&#50;&#x2e;&#49;</a>即可。</p>]]></content>
      
      
      <categories>
          
          <category> 本站介绍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主题介绍-基本配置</title>
      <link href="/post/ben-zhan-jie-shao/zhu-ti-jie-shao-ji-ben-pei-zhi/"/>
      <url>/post/ben-zhan-jie-shao/zhu-ti-jie-shao-ji-ben-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p>这是一款<span class='p large red'>H</span><span class='p large green'>E</span><span class='p large blue'>X</span><span class='p large info'>O</span>主题</p><blockquote><p><strong>注意</strong>: icon使用的 <a href="https://fontawesome.dashgame.com/">Font Awesome</a> 版本为 <code>5.15.3</code>。</p></blockquote><h2 class="bamboo-h " id="下载">下载</h2><br/><p>首先你需要有一个 <a href="https://hexo.io/zh-cn/">Hexo</a> ，按照官网的指导做法，很容易的就能创建一个hexo博客。</p><div class="tabs" id="tab-id"><ul class="nav-tabs"><li class="tab active"><a class="#tab-id-1">Github安装</a></li><li class="tab"><a class="#tab-id-2">Gitee安装</a></li><li class="tab"><a class="#tab-id-3">npm安装</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-id-1"><p>当你有了hexo博客之后，进入<code>themes</code>文件夹下使用 <code>Git clone</code> 命令来下载:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/jimyfengqi/hexo-theme-bomboo.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div class="tagLink"><a class="link-card" title="hexo-theme-bamboo" href="https://gitub.com/yuang01/hexo-theme-bamboo"><span class="link-card-backdrop" style="background-image: url(https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg)"></span><div class="left"><img src="https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg" class="lazyload placeholder" data-srcset="https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></div><div class="right"><p class="text">hexo-theme-bamboo</p><p class="url">https://gitub.com/yuang01/hexo-theme-bamboo</p></div></a></div><p>或者点击下载zip包，解压放入themes文件夹下</p><p><span class='btn center large'><a class="button" href='https://github.com/jimyfengqi/hexo-theme-bomboo/archive/dev.zip' title='开始下载'><i class='fa fa-download'></i>开始下载</a></span></p></div><div class="tab-pane" id="tab-id-2"><p>当你有了hexo博客之后，进入<code>themes</code>文件夹下使用 <code>Git clone</code> 命令来下载:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://gitee.com/yuang01/hexo-theme-bamboo.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div class="tagLink"><a class="link-card" title="hexo-theme-bamboo" href="https://gitee.com/yuang01/hexo-theme-bamboo"><span class="link-card-backdrop" style="background-image: url(https://img10.360buyimg.com/ddimg/jfs/t1/154000/26/17136/4231/601cb685E622bcee5/1a923dacb1d98f64.jpg)"></span><div class="left"><img src="https://img10.360buyimg.com/ddimg/jfs/t1/154000/26/17136/4231/601cb685E622bcee5/1a923dacb1d98f64.jpg" class="lazyload placeholder" data-srcset="https://img10.360buyimg.com/ddimg/jfs/t1/154000/26/17136/4231/601cb685E622bcee5/1a923dacb1d98f64.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></div><div class="right"><p class="text">hexo-theme-bamboo</p><p class="url">https://gitee.com/yuang01/hexo-theme-bamboo</p></div></a></div><p>或者点击下载zip包，解压放入themes文件夹下</p><p><span class='btn center large'><a class="button" href='https://gitee.com/yuang01/hexo-theme-bamboo/repository/archive/dev.zip' title='开始下载'><i class='fa fa-download'></i>开始下载</a></span></p></div><div class="tab-pane" id="tab-id-3"><blockquote><p>此方法只支持Hexo在5.0.0版本以上<br>通过 npm 安装并不会在 themes 里生成主题文件夹，而是在 node_modules 里生成</p></blockquote><p>在你的博客根目录里</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-theme-bamboo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>升级方法：在博客根目录下，运行 npm update hexo-theme-bamboo</p></blockquote><h3 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h3><p>修改hexo根目录下的站点配置文件_config.yml，把主题改为bamboo</p><p>接着在hexo根目录下新建文件_config.bamboo.yml,从node_modules文件夹下找到hexo-theme-bamboo文件夹下的_config.yml，将里面的内容复制到_config.bamboo.yml文件中即可，在_config.bamboo.yml文件中对主题进行配置</p></div></div></div><h2 class="bamboo-h " id="基本配置">基本配置</h2><br/> <h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的  <code>theme</code> 的值：<code>theme: hexo-theme-bamboo</code></p><h4 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议:"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。<code>author</code>值改为你的名称（如：yuang），<code>description</code>值随便写一段描述（如：千磨万击还坚劲，任尔东西南北风）</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>本主题支持三种代码高亮方式，前两种是hexo内置的highlight和prismjs，后一种是使用的插件hexo-prism-plugin。三种方式看个人喜好选择一种作为高亮</p><div class="tabs" id="tab-2"><ul class="nav-tabs"><li class="tab active"><a class="#tab-2-1">highlight主题默认</a></li><li class="tab"><a class="#tab-2-2">prismjs(推荐)</a></li><li class="tab"><a class="#tab-2-3">hexo-prismjs-plugin</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-2-1"><p>首先需要在根目录下的_config.yml 文件中，将highlight的enable设置为true，这样就开启了highlight的代码高亮，默认这个是开启的。然后你可以在本主题目录下的_config.yml 文件中通过highlight参数，自定义代码高亮颜色，如下所示</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># https://github.com/chriskempson/tomorrow-theme</span><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">background</span><span class="token punctuation">:</span> <span class="token string">'#2d2d2d'</span>  <span class="token key atrule">currentLine</span><span class="token punctuation">:</span> <span class="token string">'#393939'</span>  <span class="token key atrule">selection</span><span class="token punctuation">:</span> <span class="token string">'#515151'</span>  <span class="token key atrule">foreground</span><span class="token punctuation">:</span> <span class="token string">'#cccccc'</span>  <span class="token key atrule">comment</span><span class="token punctuation">:</span> <span class="token string">'#999999'</span>  <span class="token key atrule">red</span><span class="token punctuation">:</span> <span class="token string">'#f2777a'</span>  <span class="token key atrule">orange</span><span class="token punctuation">:</span> <span class="token string">'#f99157'</span>  <span class="token key atrule">yellow</span><span class="token punctuation">:</span> <span class="token string">'#ffcc66'</span>  <span class="token key atrule">green</span><span class="token punctuation">:</span> <span class="token string">'#99cc99'</span>  <span class="token key atrule">aqua</span><span class="token punctuation">:</span> <span class="token string">'#66cccc'</span>  <span class="token key atrule">blue</span><span class="token punctuation">:</span> <span class="token string">'#6699cc'</span>  <span class="token key atrule">purple</span><span class="token punctuation">:</span> <span class="token string">'#cc99cc'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="tab-pane" id="tab-2-2"><p>请先确保你的<span class='p red'>hexo版本为5.0</span> 以上,在根目录下的package.json中可以查看hexo的版本。<br>如果不是5.0.以上，请先升级，例如在根目录下使用如下命令，这个下载的版本号是5.3.0版本，你可以指定下载最新的版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo@5.3.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首先需要在根目录下的_config.yml 文件中，将highlight的enable设置为false，然后<br>将prismjs的enable设置为true，如下所示</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后可以通过本主题目录下的_config.yml 文件中prismjs参数来选择主题<br>例如:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'default'</span> <span class="token comment"># default, coy, dark, funky, okaidia, solarizedlight, tomorrow, twilight</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>另外，当你使用的是prismjs作为代码高亮的话,你还可以在单独的文章中设置代码高亮主题，这样可以实现不同的页面，有不同的代码高亮主题，文章中设置代码如下</p><p>title: Hexo主题–Bamboo介绍<br>date: 2021-01-5 23:28<br>swiper: true<br>swiperImg: ‘/medias/11.jpg’<br>img: ‘/medias/7.jpg’<br>categories: 前端<br>tags: [Hexo, hexo-theme-bamboo]<br>top: true<br>prismjs: dark # 设置该篇文章的代码高亮主题为dark</p></div><div class="tab-pane" id="tab-2-3"><p>如果使用hexo-prism-plugin这个Hexo插件来做代码高亮，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，修改 Hexo 根目录下的_config.yml 文件中的 highlight.enable 的值为 false，prismjs.enable值为false, 并新增该插件相关的配置，主要配置如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span>  <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">'preprocess'</span>    <span class="token comment"># realtime/preprocess</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'tomorrow'</span>    <span class="token comment"># 这里可以选择不同样式的主题</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment"># default false</span>  custom_css<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个插件目前渲染有点小问题，代码高亮如遇到花括号变成了&#123;&#125;这样的字符串，以下方式可解决：<br>将node_modules\hexo-prism-plugin\src\index.js中的map改为如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">'&amp;#39;'</span><span class="token operator">:</span> <span class="token string">'\''</span><span class="token punctuation">,</span>  <span class="token string">'&amp;amp;'</span><span class="token operator">:</span> <span class="token string">'&amp;'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;gt;'</span><span class="token operator">:</span> <span class="token string">'>'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;lt;'</span><span class="token operator">:</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;quot;'</span><span class="token operator">:</span> <span class="token string">'"'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;#123;'</span><span class="token operator">:</span> <span class="token string">'&#123;'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;#125;'</span><span class="token operator">:</span> <span class="token string">'&#125;'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后重启服务，hexo clean &amp;&amp; hexo s即可<br>卸载命令如下，如果你安装了此插件，后来想使用前两种高亮，请先卸载此插件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> un hexo-install prism-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></div></div><p>这个主题采用的是<a href="https://github.com/ele828/hexo-prism-plugin">hexo-prism-plugin</a>这个Hexo插件来做代码高亮，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span>  <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">'preprocess'</span>    <span class="token comment"># realtime/preprocess</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'tomorrow'</span>    <span class="token comment"># 这里可以选择不同样式的主题</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment"># default false</span>  custom_css<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在主题文件夹下的<code>_config.yml</code>文件中设置<code>search</code>为true或者false控制显示隐藏</p><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，也就是导航上的分类页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要手动或者使用命令新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2021-10-14 15:30:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> 2021<span class="token punctuation">-</span>10 15<span class="token punctuation">:</span><span class="token datetime number">30:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"about"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后可以在本主题下的<code>_config.yml</code>文件下，编辑以下字段进行关于我页面信息的更改</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">baseInfo <span class="token comment"># 基本信息，包括年龄，性别，坐标，状态</span>skills   <span class="token comment"># 技能</span>project   <span class="token comment"># 技能</span>socialAccounts <span class="token comment"># 社交账号</span>games   <span class="token comment"># 游戏</span>books   <span class="token comment">#书籍</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><details green><summary pointer> baseInfo基本信息 </summary>              <div class='content'>              <p><code>baseInfo</code>主要包含年龄，性别，坐标，状态，格式如下，<strong>注意空格缩进哦</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">baseInfo</span><span class="token punctuation">:</span>  <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否显示</span>  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">99</span> <span class="token comment"># 年龄</span>  <span class="token key atrule">sex</span><span class="token punctuation">:</span> <span class="token string">'男'</span> <span class="token comment"># 性别</span>  <span class="token key atrule">coordinate</span><span class="token punctuation">:</span> <span class="token string">'火星'</span> <span class="token comment"># 坐标</span>  <span class="token key atrule">status</span><span class="token punctuation">:</span> <span class="token string">'划水中'</span> <span class="token comment"># 状态</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>              </div>            </details><details cyan><summary pointer> skill填写我的技能 </summary>              <div class='content'>              <p><code>skills</code> 填写我的技能，格式如下，<strong>注意空格缩进哦</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 关于我 技能</span><span class="token key atrule">skills</span><span class="token punctuation">:</span>  <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否显示</span>  <span class="token key atrule">data</span><span class="token punctuation">:</span> <span class="token comment"># 这个data不能忘了，下面的字段注意缩进</span>    <span class="token key atrule">HTML5</span><span class="token punctuation">:</span> <span class="token comment"># 这里写你的技能名称，如 HTML5或者java</span>      <span class="token key atrule">background</span><span class="token punctuation">:</span> <span class="token string">'red'</span> <span class="token comment"># 进度条颜色</span>      <span class="token key atrule">percent</span><span class="token punctuation">:</span> 90% <span class="token comment"># 进度条百分比</span>    <span class="token key atrule">JavaScript</span><span class="token punctuation">:</span>      <span class="token key atrule">background</span><span class="token punctuation">:</span> <span class="token string">'linear-gradient(120deg, #a1c4fd 0%, #c2e9fb 100%)'</span>      <span class="token key atrule">percent</span><span class="token punctuation">:</span> 85%    <span class="token key atrule">CSS</span><span class="token punctuation">:</span>      <span class="token key atrule">background</span><span class="token punctuation">:</span> <span class="token string">'#000'</span>      <span class="token key atrule">percent</span><span class="token punctuation">:</span> 70%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>              </div>            </details><details green><summary pointer> socialAccounts填写我的社交账号 </summary>              <div class='content'>              <p><code>socialAccounts</code>填写我的社交账号，格式如下，<strong>注意空格缩进哦</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">socialAccounts</span><span class="token punctuation">:</span>   <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">data</span><span class="token punctuation">:</span> <span class="token comment"># 这个data不能忘了，下面的字段注意缩进</span>    <span class="token key atrule">QQ</span><span class="token punctuation">:</span> <span class="token comment"># 社交软件名称</span>      <span class="token key atrule">icon</span><span class="token punctuation">:</span> fa fa<span class="token punctuation">-</span>qq  <span class="token comment"># 图标，可以为空，前面加上fa，假如图标名称叫fa-quora，就是 fa fa-quora, </span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token number">12345678</span> <span class="token comment"># 账号名称</span>      <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token string">'http://www.baidu.com'</span> <span class="token comment"># 账号链接地址</span>    <span class="token key atrule">微信</span><span class="token punctuation">:</span>      <span class="token key atrule">icon</span><span class="token punctuation">:</span> fa fa<span class="token punctuation">-</span>weixin      <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token number">12345678</span>      <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token string">'http://www.baidu.com'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>              </div>            </details><details green><summary pointer> games填写我的游戏信息 </summary>              <div class='content'>              <p><code>games</code> 填写我的游戏，格式如下，<strong>注意空格缩进哦</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">games</span><span class="token punctuation">:</span>  <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否显示</span>  <span class="token key atrule">data</span><span class="token punctuation">:</span> <span class="token comment"># 这个data不能忘了，下面的字段注意缩进</span>    <span class="token key atrule">王者荣耀</span><span class="token punctuation">:</span> <span class="token comment"># 游戏名称，下面的img是游戏图片</span>      <span class="token key atrule">img</span><span class="token punctuation">:</span> <span class="token string">'https://pic2.zhimg.com/80/v2-54730a36304842b86a57a237b8b39945_720w.jpg?source=1940ef5c'</span>    <span class="token key atrule">英雄杀</span><span class="token punctuation">:</span>      <span class="token key atrule">img</span><span class="token punctuation">:</span> <span class="token string">'https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1909008358,1888649581&amp;fm=26&amp;gp=0.jpg'</span>    <span class="token key atrule">和平精英</span><span class="token punctuation">:</span>      <span class="token key atrule">img</span><span class="token punctuation">:</span> <span class="token string">'https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1595596612190&amp;di=dbf2030780758c4724ecb1f07f2f4f73&amp;imgtype=0&amp;src=http%3A%2F%2Fimgup04.51wxjz.com%2F51wxjz%2F2019-06%2F05%2F09%2F15596983468928_0.png'</span>    <span class="token key atrule">英雄联盟</span><span class="token punctuation">:</span>      <span class="token key atrule">img</span><span class="token punctuation">:</span> <span class="token string">'https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=3035766587,2822701570&amp;fm=26&amp;gp=0.jpg'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>              </div>            </details><details green><summary pointer> books填写我的书籍 </summary>              <div class='content'>              <p><code>books</code> 填写我的书籍，格式如下，<strong>注意空格缩进哦</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">books</span><span class="token punctuation">:</span>  <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否显示</span>  <span class="token key atrule">data</span><span class="token punctuation">:</span> <span class="token comment"># 这个data不能忘了，下面的字段注意缩进</span>    <span class="token key atrule">明朝那些事儿</span><span class="token punctuation">:</span> <span class="token comment"># 书籍名称，下面的img是书籍图片</span>      <span class="token key atrule">img</span><span class="token punctuation">:</span> <span class="token string">'https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=2736238052,2078148140&amp;fm=26&amp;gp=0.jpg'</span>    <span class="token key atrule">春秋左传</span><span class="token punctuation">:</span>      <span class="token key atrule">img</span><span class="token punctuation">:</span> <span class="token string">'https://pic2.zhimg.com/50/v2-6f33f60312de25ddcb795fc81ee91b38_720w.jpg?source=54b3c3a5'</span>    <span class="token key atrule">孙子兵法</span><span class="token punctuation">:</span>      <span class="token key atrule">img</span><span class="token punctuation">:</span> <span class="token string">'https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=710999414,899378807&amp;fm=26&amp;gp=0.jpg'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>              </div>            </details><h3 id="新建友情连接-friends-页"><a href="#新建友情连接-friends-页" class="headerlink" title="新建友情连接 friends 页"></a>新建友情连接 friends 页</h3><div class="tabs" id="tab-3"><ul class="nav-tabs"><li class="tab active"><a class="#tab-3-1">Markdown文件配置(当前使用的)</a></li><li class="tab"><a class="#tab-3-2">新建json文件(旧版用的-不推荐)</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-3-1"><blockquote><p>该功能需要主题版本为2.1.5+</p></blockquote><p>friends 页是用来展示友情连接信息的页面，如果在你的博客 source 目录下还没有 friends/index.md 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-none"><code class="language-none">hexo new page &quot;friends&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 /source/friends/index.md</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> 2021<span class="token punctuation">-</span>010<span class="token punctuation">-</span>17 15<span class="token punctuation">:</span><span class="token datetime number">30:30</span><span class="token key atrule">onlyTitle</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 只显示title</span><span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 不显示文章目录</span><span class="token comment"># type: "friends" # 这个不要了</span><span class="token comment"># layout: "friends" # 这个不要了</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这时候会生成source/friends/index.md文件，在md文件里自定义写友链就行了。</p></div><div class="tab-pane" id="tab-3-2"><p><code>friends</code> 页是用来展示<strong>友情连接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2020-09-14 15:30:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>  <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://pic2.zhimg.com/80/v2-d1bd22e7dc847ae62028ae336d55ded9_720w.jpg?source=1940ef5c"</span><span class="token punctuation">,</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"如梦亦如幻"</span><span class="token punctuation">,</span>  <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"烟雨如江南"</span><span class="token punctuation">,</span>  <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://gitee.com/yuang01"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://pic1.zhimg.com/80/v2-1a60e33c33810a4d81a80282b8ca7a33_720w.jpg?source=1940ef5c"</span><span class="token punctuation">,</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"青灯暮雨"</span><span class="token punctuation">,</span>  <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"山水如墨染"</span><span class="token punctuation">,</span>  <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://gitee.com/yuang01"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://pic2.zhimg.com/80/v2-134122ca13d041f5ec1f2680f2677318_720w.jpg?source=1940ef5c"</span><span class="token punctuation">,</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"寄情山水花草间"</span><span class="token punctuation">,</span>  <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"宛如丹青未干"</span><span class="token punctuation">,</span>  <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://gitee.com/yuang01"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div></div><h3 id="中文链接转拼音（可选的）"><a href="#中文链接转拼音（可选的）" class="headerlink" title="中文链接转拼音（可选的）"></a>中文链接转拼音（可选的）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。<br>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment"># default: '-'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h3 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">hub</span><span class="token punctuation">:</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span>  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 class="bamboo-h " id="Pjax">Pjax</h2><br/><p>页面不刷新跳转，音乐可以不间断播放。关闭则跳转页面时候刷新页面</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">pjax</span><span class="token punctuation">:</span>  <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">animation</span><span class="token punctuation">:</span> circle <span class="token comment"># false, nprogress, circle</span>  <span class="token key atrule">animationColor</span><span class="token punctuation">:</span> <span class="token string">'orangered'</span> <span class="token comment"># animation为 nprogress时候的动画颜色, red or #000 ...</span>  <span class="token key atrule">cacheBust</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># url 地址追加时间戳，用以避免浏览器缓存</span>  <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">5000</span>    <span class="token comment"># The timeout in milliseconds for the XHR requests. Set to 0 to disable the timeout.</span>  <span class="token key atrule">banUrl</span><span class="token punctuation">:</span>          <span class="token comment"># 被屏蔽的 url 地址将不启用 pjax 跳转，可以在控制台下使用 window.location.pathname 获取</span>      <span class="token comment"># - '/xxx/'     </span>      <span class="token comment"># - '/xxx/' </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 本站介绍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django综合篇之网站地图sitemap</title>
      <link href="/post/django-quan-wang-zhan-da-jian/django-zong-he-pian-zhi-wang-zhan-di-tu-sitemap/"/>
      <url>/post/django-quan-wang-zhan-da-jian/django-zong-he-pian-zhi-wang-zhan-di-tu-sitemap/</url>
      
        <content type="html"><![CDATA[<h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><p>网站地图是根据网站的结构、框架、内容，生成的导航网页，是一个网站所有链接的容器。很多网站的连接层次比较深，蜘蛛很难抓取到，网站地图可以方便搜索引擎或者网络蜘蛛抓取网站页面，了解网站的架构，为网络蜘蛛指路，增加网站内容页面的收录概率。网站地图一般存放在域名根目录下并命名为sitemap<br>一个典型的sitemap，其内容片段如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">该 XML 文件并未包含任何关联的样式信息。文档树显示如下。 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>urlset</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>loc</span><span class="token punctuation">></span></span>http://example.com/blog/read/?blogid=63<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>loc</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lastmod</span><span class="token punctuation">></span></span>2020-12-01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lastmod</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>changefreq</span><span class="token punctuation">></span></span>weekly<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>changefreq</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>priority</span><span class="token punctuation">></span></span>0.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>priority</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>loc</span><span class="token punctuation">></span></span>http://example.com/blog/read/?blogid=61<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>loc</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lastmod</span><span class="token punctuation">></span></span>2020-12-01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lastmod</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>changefreq</span><span class="token punctuation">></span></span>weekly<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>changefreq</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>priority</span><span class="token punctuation">></span></span>0.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>priority</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>urlset</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Django自带了一个高级的生成网站地图的框架，我们可以很容易地创建出XML格式的网站地图。创建网站地图，只需编写一个Sitemap类，并在URLconf中编写对应的访问路由。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装sitemap框架的步骤如下：</p><ol><li>在INSTALLED_APPS设置中添加<pre class="line-numbers language-python" data-language="python"><code class="language-python">INSTALLED_APPS <span class="token operator">=</span><span class="token punctuation">[</span> <span class="token string">'django.contrib.sitemaps'</span>  <span class="token string">'django.contrib.site'</span>  <span class="token punctuation">]</span> SITE_ID <span class="token operator">=</span> <span class="token number">1</span>         <span class="token comment"># 设置当前站点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>添加这两个app, 加入SITE_ID = 1来制定当前的站点。<br>然后登陆Django后台，修改SITE为你Django网站的域名和名称<br>执行数据迁移<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python manage.py migrate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="添加sitemap功能"><a href="#添加sitemap功能" class="headerlink" title="添加sitemap功能"></a>添加sitemap功能</h1><h2 id="（1）创建sitemap"><a href="#（1）创建sitemap" class="headerlink" title="（1）创建sitemap"></a>（1）创建sitemap</h2></li></ol><p>创建sitemap.py.内容类似下面的代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>sitemaps <span class="token keyword">import</span> Sitemap<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Blog<span class="token punctuation">,</span> Tag<span class="token punctuation">,</span> Category<span class="token keyword">from</span> user<span class="token punctuation">.</span>models <span class="token keyword">import</span> UserInfo<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> reverse<span class="token comment"># 静态内容加入地图</span><span class="token keyword">class</span> <span class="token class-name">StaticViewSitemap</span><span class="token punctuation">(</span>Sitemap<span class="token punctuation">)</span><span class="token punctuation">:</span>    priority <span class="token operator">=</span> <span class="token number">0.5</span>    changefreq <span class="token operator">=</span> <span class="token string">'daily'</span>    <span class="token keyword">def</span> <span class="token function">items</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">'blog:haystack'</span><span class="token punctuation">,</span> <span class="token string">'blog:about'</span><span class="token punctuation">,</span> <span class="token string">'blog:archives'</span><span class="token punctuation">,</span> <span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">location</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> reverse<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">BlogSitemap</span><span class="token punctuation">(</span>Sitemap<span class="token punctuation">)</span><span class="token punctuation">:</span>    changefreq <span class="token operator">=</span> <span class="token string">"weekly"</span>    priority <span class="token operator">=</span> <span class="token number">0.5</span>    <span class="token comment"># protocol = 'https'</span>    <span class="token keyword">def</span> <span class="token function">items</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> Blog<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">lastmod</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> obj<span class="token punctuation">.</span>modified_time    <span class="token keyword">def</span> <span class="token function">location</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'/blog/read/?blogid=&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">CategorySiteMap</span><span class="token punctuation">(</span>Sitemap<span class="token punctuation">)</span><span class="token punctuation">:</span>    changefreq <span class="token operator">=</span> <span class="token string">"Weekly"</span>    priority <span class="token operator">=</span> <span class="token string">"0.6"</span>    <span class="token keyword">def</span> <span class="token function">items</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> Category<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">lastmod</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> obj<span class="token punctuation">.</span>created_time    <span class="token comment"># 在model里面定义过get_absolute_url方法后,此方法可以省略</span>    <span class="token keyword">def</span> <span class="token function">location</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'/blog/get_categories/?category_name=&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">TagSiteMap</span><span class="token punctuation">(</span>Sitemap<span class="token punctuation">)</span><span class="token punctuation">:</span>    changefreq <span class="token operator">=</span> <span class="token string">"Weekly"</span>    priority <span class="token operator">=</span> <span class="token string">"0.3"</span>    <span class="token keyword">def</span> <span class="token function">items</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> Tag<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">lastmod</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> obj<span class="token punctuation">.</span>created_time    <span class="token keyword">def</span> <span class="token function">location</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'/blog/get_tags/?tag_id=&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">UserSiteMap</span><span class="token punctuation">(</span>Sitemap<span class="token punctuation">)</span><span class="token punctuation">:</span>    changefreq <span class="token operator">=</span> <span class="token string">"Weekly"</span>    priority <span class="token operator">=</span> <span class="token string">"0.3"</span>    <span class="token keyword">def</span> <span class="token function">items</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> UserInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">lastmod</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> obj<span class="token punctuation">.</span>date_joined    <span class="token keyword">def</span> <span class="token function">location</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'/user/profile/?userid=&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="（2）url路由配置"><a href="#（2）url路由配置" class="headerlink" title="（2）url路由配置"></a>（2）url路由配置</h2><p>url.py中加入:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> blog<span class="token punctuation">.</span>blog_sitemap <span class="token keyword">import</span> BlogSitemap<span class="token punctuation">,</span> CategorySiteMap<span class="token punctuation">,</span> TagSiteMap<span class="token punctuation">,</span> UserSiteMap<span class="token punctuation">,</span> StaticViewSitemap<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>sitemaps<span class="token punctuation">.</span>views <span class="token keyword">import</span> sitemapsitemaps <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'blog'</span><span class="token punctuation">:</span> BlogSitemap<span class="token punctuation">,</span>    <span class="token string">'Category'</span><span class="token punctuation">:</span> CategorySiteMap<span class="token punctuation">,</span>    <span class="token string">'Tag'</span><span class="token punctuation">:</span> TagSiteMap<span class="token punctuation">,</span>    <span class="token string">'User'</span><span class="token punctuation">:</span> UserSiteMap<span class="token punctuation">,</span>    <span class="token string">'static'</span><span class="token punctuation">:</span> StaticViewSitemap<span class="token punctuation">&#125;</span>url<span class="token punctuation">(</span><span class="token string">r'^sitemap\.xml$'</span><span class="token punctuation">,</span> sitemap<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'sitemaps'</span><span class="token punctuation">:</span> sitemaps<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        name<span class="token operator">=</span><span class="token string">'sitemap'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，全部完成，运行你的django程序，浏览器输入:</p><p><a href="http://127.0.0.1:8000/sitemap.xml">http://127.0.0.1:8000/sitemap.xml</a></p><p>就可以看见已经成功生成了，然后就可以提交这个地址给搜索引擎。</p><h1 id="Sitemap类详解"><a href="#Sitemap类详解" class="headerlink" title="Sitemap类详解"></a>Sitemap类详解</h1><p><strong>class Sitemap[source]</strong></p><pre><code> Sitemap类可以定义以下方法/属性：</code></pre><p><strong>1.  items[source]</strong></p><pre><code>必须定义。返回对象列表的方法。</code></pre><p>框架不关心对象的类型，重要的是这些对象将被传递给location()，lastmod()，changefreq()和priority()方法。<br><strong>2. location[source]</strong></p><pre><code>可选。 其值可以是一个方法或属性。</code></pre><p>如果是一个方法, 它应该为items()返回的对象的绝对路径.</p><p>如果它是一个属性，它的值应该是一个字符串，表示items()返回的每个对象的绝对路径。</p><p>上面所说的“绝对路径”表示不包含协议和域名的URL。 例子：</p><ul><li>正确：’/foo/bar/‘ </li><li>错误：’example.com/foo/bar/‘</li><li>错误：’<a href="https://example.com/foo/bar/&#39;">https://example.com/foo/bar/&#39;</a></li></ul><p>如果未提供location，框架将调用items()<strong>返回的每个对象上的get_absolute_url()方法</strong>。</p><p>该属性最终反映到HTML页面上的标签。<br><strong>3. lastmod</strong></p><pre><code>可选。 一个方法或属性。表示当前条目最后的修改时间。</code></pre><p><strong>4. changefreq</strong></p><pre><code>可选。 一个方法或属性。表示当前条目修改的频率。</code></pre><p>changefreq的允许值为：</p><pre><code>    &#39;always&#39;  &#39;hourly&#39;  &#39;daily&#39;  &#39;weekly&#39;  &#39;monthly&#39;  &#39;yearly&#39; &#39;never&#39;</code></pre><p><strong>5. priority</strong></p><pre><code>可选。表示当前条目在网站中的权重系数，优先级。</code></pre><p>示例值：0.4，1.0。 页面的默认优先级为0.5，最高为1.0。<br><strong>6. protocol</strong></p><pre><code>可选的。定义网站地图中的网址的协议（‘http’或’https’）。</code></pre><p><strong>7. limit</strong></p><pre><code>可选的。定义网站地图的每个网页上包含的最大超级链接数。</code></pre><p><strong>8. i18n</strong></p><pre><code>可选的。一个boolean属性，定义是否应使用所有语言生成此网站地图。默认值为False。</code></pre><h1 id="通知Google"><a href="#通知Google" class="headerlink" title="通知Google"></a>通知Google</h1><p>当你的sitemap变化的时候，你会想通知Google，以便让它知道对你的站点进行重新索引。 框架就提供了这样的一个函数： </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>sitemaps<span class="token punctuation">.</span>ping_google<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ping_google() 有一个可选的参数 sitemap_url ，它应该是你的站点地图的URL绝对地址</p><p>如果不能够确定你的sitemap URL, ping_google() 会引发 django.contrib.sitemaps.SitemapNotFound 异常。</p><p>我们可以通过模型中的 save() 方法来调用 ping_google() ：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>sitemaps <span class="token keyword">import</span> ping_google <span class="token keyword">class</span> <span class="token class-name">Entry</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># ...</span>  <span class="token keyword">def</span> <span class="token function">save</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">super</span><span class="token punctuation">(</span>Entry<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>      ping_google<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>      <span class="token comment"># Bare 'except' because we could get a variety</span>      <span class="token comment"># of HTTP-related exceptions.</span>      <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个更有效的解决方案是用 cron 脚本或任务调度表来调用 ping_google() ，该方法使用Http直接请求Google服务器，从而减少每次调用 save() 时占用的网络带宽。    </p>]]></content>
      
      
      <categories>
          
          <category> Django全网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django综合篇之celery4 定时任务的实现新闻热榜</title>
      <link href="/post/django-quan-wang-zhan-da-jian/django-zong-he-pian-zhi-celery4-ding-shi-ren-wu-de-shi-xian-xin-wen-re-bang/"/>
      <url>/post/django-quan-wang-zhan-da-jian/django-zong-he-pian-zhi-celery4-ding-shi-ren-wu-de-shi-xian-xin-wen-re-bang/</url>
      
        <content type="html"><![CDATA[<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>系统：Ubuntu系统<br>编辑器：Pycharm<br>Python版本：python3.6（自带celery4.3.0）<br>第三方包依赖： django3.0.8</p><h1 id="本文简介"><a href="#本文简介" class="headerlink" title="本文简介"></a>本文简介</h1><p>这篇文章主要介绍了celery4+django3定时任务的实现, 用于定时获取热门网站的榜单，组成一个新闻聚合网站</p><p>网上有很多celery + django实现定时任务的教程，不过它们大多数是基于djcelery + celery3的； 或者是使用django_celery_beat配置较为繁琐的。</p><p>显然简洁而高效才是我们最终的追求，而celery4已经不需要额外插件即可与django结合实现定时任务了，原生的celery beat就可以很好的实现定时任务功能。</p><p>当然使用原生方案的同时有几点插件所带来的好处被我们放弃了：</p><pre><code>1.插件提供的定时任务管理将不在可用，当我们只需要任务定期执行而不需要人为调度的时候这点忽略不计。2.无法高效的管理或追踪定时任务，定时任务的跟踪其实交给日志更合理，但是对任务的修改就没有那么方便了，不过如果不需要经常变更/增减任务的话这点也在可接受范围内。</code></pre><h1 id="项目内容"><a href="#项目内容" class="headerlink" title="项目内容"></a>项目内容</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">django-admin startproject Websitecd Websitepython3 manage.py startapp hottouch .&#x2F;Website&#x2F;celery.py  .&#x2F;hot&#x2F;tasks.py start-celery.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面的命令分别为：</p><ul><li>创建一个名字为Website的项目</li><li>创建一个名字为hot的应用</li><li>创建celery相关的文件<br>创建完成后，基本的目录结构：<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">..&#x2F;Website&#x2F;├── hot│   ├── admin.py│   ├── apps.py│   ├── __init__.py│   ├── migrations│   │   └── __init__.py│   ├── models.py│   ├── tasks.py│   ├── tests.py│   └── views.py├── manage.py├── start-celery.sh└── Website    ├── asgi.py    ├── celery.py    ├── __init__.py    ├── settings.py    ├── urls.py    └── wsgi.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>其中hot是我们的app，用于新闻聚合，Website则是我们的project。</p><h2 id="模型设计"><a href="#模型设计" class="headerlink" title="模型设计"></a>模型设计</h2><p>需要考虑是否仅仅展示实时的信息<br>如果仅仅展示实时的信息，将获取到的新闻榜单内容做成json格式直接送给前端<br>如果还需要将每条信息排序，统计一下历史信息<br>那么需要设计一个新的model，来存贮每条信息</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># hot/models.py</span><span class="token keyword">class</span> <span class="token class-name">Hot</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    STATUS <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'无效'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'有效'</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    hot_name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>verbose_name<span class="token operator">=</span><span class="token string">'热榜源'</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    type_name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>verbose_name<span class="token operator">=</span><span class="token string">'榜单类型'</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> models<span class="token punctuation">.</span>TextField<span class="token punctuation">(</span>verbose_name<span class="token operator">=</span><span class="token string">'内容'</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    create_time <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>auto_now_add<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> verbose_name<span class="token operator">=</span><span class="token string">"创建时间"</span><span class="token punctuation">)</span>    update_time <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>auto_now<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> verbose_name<span class="token operator">=</span><span class="token string">'更新时间'</span><span class="token punctuation">)</span>    status <span class="token operator">=</span> models<span class="token punctuation">.</span>SmallIntegerField<span class="token punctuation">(</span>choices<span class="token operator">=</span>STATUS<span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> verbose_name<span class="token operator">=</span><span class="token string">'是否有效'</span><span class="token punctuation">)</span>    <span class="token builtin">sorted</span> <span class="token operator">=</span> models<span class="token punctuation">.</span>SmallIntegerField<span class="token punctuation">(</span><span class="token string">'排序'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>hot_name <span class="token operator">+</span> self<span class="token punctuation">.</span>type_name    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        ordering <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'-sorted'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="视图内容"><a href="#视图内容" class="headerlink" title="视图内容"></a>视图内容</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># hot/views.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Hot<span class="token keyword">def</span> <span class="token function">hot</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    返回榜单信息    :param request:    :return:    """</span>    hot_queryset <span class="token operator">=</span> Hot<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>status<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'title'</span><span class="token punctuation">:</span> <span class="token string">'热点聚合'</span><span class="token punctuation">,</span>        <span class="token string">'hot_queryset'</span><span class="token punctuation">:</span> hot_queryset    <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'hot/hot.html'</span><span class="token punctuation">,</span> context<span class="token operator">=</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="task设置"><a href="#task设置" class="headerlink" title="task设置"></a>task设置</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> absolute_import<span class="token punctuation">,</span> unicode_literals<span class="token keyword">import</span> sys<span class="token keyword">import</span> os<span class="token keyword">import</span> django<span class="token keyword">from</span> subprocess <span class="token keyword">import</span> getstatusoutput<span class="token comment"># 将当前目录加入django环境</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"DJANGO_SETTINGS_MODULE"</span><span class="token punctuation">:</span> <span class="token string">"Website.settings"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>django<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">from</span> celery <span class="token keyword">import</span> shared_task<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor<span class="token keyword">from</span> hot<span class="token punctuation">.</span>crawler <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> hot<span class="token punctuation">.</span>models <span class="token keyword">import</span> Hot<span class="token decorator annotation punctuation">@shared_task</span><span class="token keyword">def</span> <span class="token function">run_crawler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    定时一个小时更新一次爬取    :return:    """</span>    crawler_list <span class="token operator">=</span> <span class="token punctuation">[</span>crawler_github<span class="token punctuation">]</span><span class="token comment"># 可以自己添加其他内容</span>    <span class="token keyword">with</span> ThreadPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pool<span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">get_result</span><span class="token punctuation">(</span>future<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token triple-quoted-string string">"""            这个是 add_done_callback()方法来添加回调函数,            future.result()为函数运行的结果            :param future:            :return:            """</span>            crawler_result <span class="token operator">=</span> future<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span>            hot_name <span class="token operator">=</span> crawler_result<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'hot_name'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>            type_name <span class="token operator">=</span> crawler_result<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'type_name'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>                      content <span class="token operator">=</span> crawler_result<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> hot_name<span class="token punctuation">:</span>                hot <span class="token operator">=</span> Hot<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>hot_name<span class="token operator">=</span>hot_name<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token keyword">if</span> <span class="token keyword">not</span> hot<span class="token punctuation">:</span>                    Hot<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>hot_name<span class="token operator">=</span>hot_name<span class="token punctuation">,</span> type_name<span class="token operator">=</span>type_name<span class="token punctuation">,</span> content<span class="token operator">=</span>content<span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    hot<span class="token punctuation">.</span>content <span class="token operator">=</span> content                    hot<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token keyword">for</span> future1 <span class="token keyword">in</span> crawler_list<span class="token punctuation">:</span>            pool<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>future1<span class="token punctuation">)</span><span class="token punctuation">.</span>add_done_callback<span class="token punctuation">(</span>get_result<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'done'</span><span class="token punctuation">)</span>run_crawler<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意到了这里用到自己写的crawler ， 这里面放的是各种爬虫<br>这里拿一个举例</p><h2 id="github-爬虫"><a href="#github-爬虫" class="headerlink" title="github 爬虫"></a>github 爬虫</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">crawler_github</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    获取github 热榜    :return:    """</span>    url <span class="token operator">=</span> <span class="token string">'https://github.com/trending'</span>    headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'Host'</span><span class="token punctuation">:</span> <span class="token string">'github.com'</span><span class="token punctuation">,</span>        <span class="token string">'Referer'</span><span class="token punctuation">:</span> <span class="token string">'https://github.com/explore'</span>    <span class="token punctuation">&#125;</span>    response_html <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>    content_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> response_html<span class="token punctuation">:</span>        tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response_html<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        article_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//article[@class='Box-row']"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> article <span class="token keyword">in</span> article_list<span class="token punctuation">:</span>            title <span class="token operator">=</span> article<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'string(./h1/a)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            href <span class="token operator">=</span> <span class="token string">'https://github.com/%s'</span> <span class="token operator">%</span> article<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./h1/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            describe <span class="token operator">=</span> article<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'string(./p)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>                      content_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'title'</span><span class="token punctuation">:</span> <span class="token string">'%s---%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>title<span class="token punctuation">,</span> describe<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'href'</span><span class="token punctuation">:</span> href <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">'hot_name'</span><span class="token punctuation">:</span> <span class="token string">'GitHub'</span><span class="token punctuation">,</span>            <span class="token string">'type_name'</span><span class="token punctuation">:</span> <span class="token string">'热榜'</span><span class="token punctuation">,</span>            <span class="token string">'crawler_name'</span><span class="token punctuation">:</span> sys<span class="token punctuation">.</span>_getframe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>f_code<span class="token punctuation">.</span>co_name<span class="token punctuation">,</span>            <span class="token string">'content'</span><span class="token punctuation">:</span> content_list<span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># hot/urls.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> viewsapp_name <span class="token operator">=</span> <span class="token string">'hot'</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token comment"># 分类页面</span>    path<span class="token punctuation">(</span><span class="token string">'hot'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>hot<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'hot'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主路由配置</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> includeurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'hot/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'hot.urls'</span><span class="token punctuation">,</span> namespace<span class="token operator">=</span><span class="token string">'hot'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 新闻热榜    ]   </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Celery定时任务配置"><a href="#Celery定时任务配置" class="headerlink" title="Celery定时任务配置"></a>Celery定时任务配置</h1><p>针对celery, 我们需要关心的主要是 celery.py ， settings.py ， tasks.py 和 start-celery.sh 。</p><h2 id="建立celery"><a href="#建立celery" class="headerlink" title="建立celery"></a>建立celery</h2><p>首先是celery.py，想让celery执行任务就必须实例化一个celery app，并把settings.py里的配置传入app：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> absolute_import<span class="token keyword">import</span> os<span class="token keyword">from</span> celery <span class="token keyword">import</span> Celery<span class="token keyword">from</span> celery<span class="token punctuation">.</span>schedules <span class="token keyword">import</span> crontab<span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedelta<span class="token comment"># 设置django环境</span>os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'DJANGO_SETTINGS_MODULE'</span><span class="token punctuation">,</span> <span class="token string">'Website.settings'</span><span class="token punctuation">)</span><span class="token comment"># 创建celery客户端,并起别名(没有实际意义)</span>app <span class="token operator">=</span> Celery<span class="token punctuation">(</span><span class="token string">'Celery_Website'</span><span class="token punctuation">)</span><span class="token comment"># 加载配置:让客户端和worker知道broker的存在，</span><span class="token comment"># - 'django.conf:settings'表示django,conf.settings也就是django项目的配置，celery会根据前面设置的环境变量自动查找并导入</span><span class="token comment"># - namespace表示在settings.py中celery配置项的名字的统一前缀，这里是'CELERY_'，配置项的名字也需要大写</span>app<span class="token punctuation">.</span>config_from_object<span class="token punctuation">(</span><span class="token string">'django.conf:settings'</span><span class="token punctuation">,</span> namespace<span class="token operator">=</span><span class="token string">'CELERY'</span><span class="token punctuation">)</span><span class="token comment"># 自动将异步任务注册到celery_app</span><span class="token comment"># 提示:不需要找tasks.py 因为celery默认会去各个apps下面去找与tasks.py同名的文件</span>app<span class="token punctuation">.</span>autodiscover_tasks<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 配置broker的位置: 方便celery客户端向broker中发布任务,也为了worker从broker中取任务</span>broker_url <span class="token operator">=</span> <span class="token string">"redis://127.0.0.1/14"</span><span class="token comment"># 更新配置信息，也可以在setting里面添加</span>app<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>update<span class="token punctuation">(</span>    CELERYBEAT_SCHEDULE<span class="token operator">=</span><span class="token punctuation">&#123;</span>        <span class="token string">'定时获取热榜'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">'task'</span><span class="token punctuation">:</span> <span class="token string">'hot.tasks.run_crawler'</span><span class="token punctuation">,</span>              <span class="token comment"># 'schedule':  crontab(minute='*/1'),    # 定时任务</span>            <span class="token string">'schedule'</span><span class="token punctuation">:</span>  timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment"># 周期性任务,每十分钟一次</span>            <span class="token string">'args'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="导入celery"><a href="#导入celery" class="headerlink" title="导入celery"></a>导入celery</h2><p>配置就是这么简单，为了能在django里使用这个app，我们需要在Website/<strong>init</strong>.py中导入它：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> absolute_import<span class="token punctuation">,</span> unicode_literals<span class="token keyword">from</span> <span class="token punctuation">.</span>celery <span class="token keyword">import</span> app <span class="token keyword">as</span> celery_app__all__ <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'celery_app'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置celery"><a href="#配置celery" class="headerlink" title="配置celery"></a>配置celery</h2><p>任务配置完成后我们就要配置celery了，我们选择redis作为任务队列，强烈建议在生产环境中使用rabbitmq或者redis作为任务队列或结果缓存后端，而不应该使用关系型数据库：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># setting.py</span><span class="token comment"># redis</span>REDIS_PORT <span class="token operator">=</span> <span class="token number">6379</span>REDIS_DB <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># 从环境变量中取得redis服务器地址</span>REDIS_HOST <span class="token operator">=</span> os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'REDIS_ADDR'</span><span class="token punctuation">,</span> <span class="token string">'redis'</span><span class="token punctuation">)</span> <span class="token comment"># celery settings</span><span class="token comment"># 这两项必须设置，否则不能正常启动celery beat</span>CELERY_ENABLE_UTC <span class="token operator">=</span> <span class="token boolean">True</span>CELERY_TIMEZONE <span class="token operator">=</span> TIME_ZONE<span class="token comment"># 任务队列配置</span>CELERY_BROKER_URL <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'redis://</span><span class="token interpolation"><span class="token punctuation">&#123;</span>REDIS_HOST<span class="token punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>REDIS_PORT<span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>REDIS_DB<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span>CELERY_ACCEPT_CONTENT <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'application/json'</span><span class="token punctuation">,</span> <span class="token punctuation">]</span>CELERY_RESULT_BACKEND <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'redis://</span><span class="token interpolation"><span class="token punctuation">&#123;</span>REDIS_HOST<span class="token punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>REDIS_PORT<span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>REDIS_DB<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span>CELERY_TASK_SERIALIZER <span class="token operator">=</span> <span class="token string">'json'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="设置定时任务"><a href="#设置定时任务" class="headerlink" title="设置定时任务"></a>设置定时任务</h2><p>然后是我们的定时任务设置,前面我们其实已经将定时任务放入celery.py 里面了，当然也可以放在设置文件中：</p><pre class="line-numbers language-none"><code class="language-none">from celery.schedules import crontabCELERY_BEAT_SCHEDULE&#x3D;&#123;    &#39;fetch_news_every-1-hour&#39;: &#123;      &#39;task&#39;: &#39;news.tasks.fetch_all_news&#39;,      &#39;schedule&#39;: crontab(minute&#x3D;0, hour&#x3D;&#39;*&#x2F;1&#39;),    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定时任务配置对象是一个dict，由任务名和配置项组成，主要配置想如下：</p><pre><code>task：任务函数所在的模块，模块路径得写全，否则找不到将无法运行该任务schedule：定时策略，一般使用 celery.schedules.crontab ，上面例子为每小时的0分执行一次任务，具体写法与linux的crontab类似可以参考文档说明args：是个元组，给出任务需要的参数，如果不需要参数也可以不写进配置，就像例子中的一样其余配置项较少用，可以参考文档</code></pre><p>至此，配置celery beat的部分就结束了。</p><h3 id="启动celery-beat"><a href="#启动celery-beat" class="headerlink" title="启动celery beat"></a>启动celery beat</h3><p>配置完成后只需要启动celery了。</p><p>启动之前配置一下环境。不要用root运行celery！不要用root运行celery！不要用root运行celery！重要的事情说三遍。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># start-celery.sh：export REDIS_ADDR&#x3D;127.0.0.1celery -A Website worker -l info -B -f &#x2F;path&#x2F;to&#x2F;log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>-A 表示app所在的目录，-B表示启动celery beat运行定时任务。</p><p>celery正常启动后就可以通过日志来查看任务是否正常运行了：</p>]]></content>
      
      
      <categories>
          
          <category> Django全网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django综合篇之django-haystack配置详解过程</title>
      <link href="/post/django-quan-wang-zhan-da-jian/django-zong-he-pian-zhi-django-haystack-pei-zhi-xiang-jie-guo-cheng/"/>
      <url>/post/django-quan-wang-zhan-da-jian/django-zong-he-pian-zhi-django-haystack-pei-zhi-xiang-jie-guo-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>django是python语言的一个web框架，功能强大。配合一些插件可为web网站很方便地添加搜索功能。</p><p>搜索引擎使用whoosh，是一个纯python实现的全文搜索引擎，小巧简单。</p><p>中文搜索需要进行中文分词，使用jieba。</p><p>直接在django项目中使用whoosh需要关注一些基础细节问题，而通过haystack这一搜索框架，可以方便地在django中直接添加搜索功能，无需关注索引建立、搜索解析等细节问题。</p><p>haystack支持多种搜索引擎，不仅仅是whoosh，使用solr、elastic search等搜索，也可通过haystack，而且直接切换引擎即可，甚至无需修改搜索代码。</p><h1 id="配置搜索"><a href="#配置搜索" class="headerlink" title="配置搜索"></a>配置搜索</h1><h2 id="1-安装相关包"><a href="#1-安装相关包" class="headerlink" title="1.安装相关包"></a>1.安装相关包</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pip install django-haystackpip install whooshpip install jieba<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-配置django的settings"><a href="#2-配置django的settings" class="headerlink" title="2.配置django的settings"></a>2.配置django的settings</h2><p>修改settings.py文件，添加haystack应用：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token string">'haystack'</span><span class="token punctuation">,</span> <span class="token comment">#将haystack放在最后</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在settings中追加haystack的相关配置：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">HAYSTACK_CONNECTIONS <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment"># 此处为默认的WhooshEngine，后面会修改它,因此把它注释掉</span>        <span class="token comment"># 'ENGINE': 'haystack.backends.whoosh_cn_backend.WhooshEngine', </span>        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'blog.whoosh_cn_backend.WhooshEngine'</span><span class="token punctuation">,</span>        <span class="token string">'PATH'</span><span class="token punctuation">:</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'whoosh_index'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment"># 添加此项，当数据库改变时，会自动更新索引，非常方便</span>HAYSTACK_SIGNAL_PROCESSOR <span class="token operator">=</span> <span class="token string">'haystack.signals.RealtimeSignalProcessor'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>HAYSTACK_CONNECTIONS 的 ENGINE 指定了 django haystack 使用的搜索引擎，这里我们使用了 blog.whoosh_cn_backend.WhooshEngine，虽然目前这个引擎还不存在，但我们接下来会创建它。</p></li><li><p>PATH 指定了索引文件需要存放的位置，我们设置为项目根目录 BASE_DIR 下的 whoosh_index 文件夹（在建立索引是会自动创建）。</p></li><li><p>HAYSTACK_SIGNAL_PROCESSOR 指定什么时候更新索引，这里我们使用haystack.signals.RealtimeSignalProcessor，作用是每当有文章更新时就更新索引。由于博客文章更新不会太频繁，因此实时更新没有问题。</p><h2 id="3-添加url"><a href="#3-添加url" class="headerlink" title="3.添加url"></a>3.添加url</h2></li></ul><p>在整个项目的urls.py中，配置搜索功能的url路径：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment"># path('search/', include('haystack.urls')), #这是默认的搜索路由</span>    path<span class="token punctuation">(</span><span class="token string">'blog_search/'</span><span class="token punctuation">,</span> BlogSearchView<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'haystack'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不重新搜索视图，那么添加上面注释掉的路由就可以了。<br>我们添加了自己重新写的一个搜索视图，下面会具体介绍。</p><h2 id="4-在应用目录下，添加一个索引"><a href="#4-在应用目录下，添加一个索引" class="headerlink" title="4.在应用目录下，添加一个索引"></a>4.在应用目录下，添加一个索引</h2><p>在子应用的目录下，创建一个名为 search_indexes.py 的文件。<br><strong>这是 django haystack 的规定</strong>。要相对某个 app 下的数据进行全文检索，就要在该 app 下创建一个 search_indexes.py 文件，然后创建一个 XXIndex 类（XX 为含有被检索数据的模型，如这里的 Blog），并且继承 SearchIndex 和 Indexable。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> haystack <span class="token keyword">import</span> indexes<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Blog   <span class="token comment"># 修改此处，添加自己model</span><span class="token comment"># 类名必须为需要检索的Model_name+Index，这里需要检索Blog，所以创建BlogIndex</span><span class="token keyword">class</span> <span class="token class-name">BlogIndex</span><span class="token punctuation">(</span>indexes<span class="token punctuation">.</span>SearchIndex<span class="token punctuation">,</span> indexes<span class="token punctuation">.</span>Indexable<span class="token punctuation">)</span><span class="token punctuation">:</span>    text <span class="token operator">=</span> indexes<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>document<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> use_template<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    ③ <span class="token comment"># 此外可以存在，可以不存在，看具体需要的数据</span>    <span class="token triple-quoted-string string">"""下面这些字段，在索引类中进行申明，在REST framework中，索引类的字段可以被作为索引查询结果返回数据额来源"""</span>        <span class="token builtin">id</span> <span class="token operator">=</span> indexes<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>model_attr<span class="token operator">=</span><span class="token string">'id'</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> indexes<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>model_attr<span class="token operator">=</span><span class="token string">'name'</span><span class="token punctuation">)</span>    price <span class="token operator">=</span> indexes<span class="token punctuation">.</span>DecimalField<span class="token punctuation">(</span>model_attr<span class="token operator">=</span><span class="token string">'price'</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""也就是说，前端在索引的时候，可以按照text=xxx,也可以按照id=xxx,name=xxx等，我们的数据返回也是返回id,name,price """</span>    <span class="token keyword">def</span> <span class="token function">get_model</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> Blog                     <span class="token comment"># 添加自己model</span>    <span class="token keyword">def</span> <span class="token function">index_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> using<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>get_model<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ul><li><p>修改上文中三处注释即可</p></li><li><p>此文件指定如何通过已有数据来建立索引。get_model处，直接将django中的model放过来，便可以直接完成索引啦，无需关注数据库读取、索引建立等细节。</p></li><li><p>text=indexes.CharField ，指定了将模型类中的哪些字段建立索引，而use_template=True说明后续我们还要指定一个模板文件，告知具体是哪些字段<br>每个索引里面必须有且只能有一个字段为 document=True，这代表 django haystack 和搜索引擎将使用此字段的内容作为索引进行检索(primary field)。注意，如果使用一个字段设置了document=True，则一般约定此字段名为text，这是在 SearchIndex 类里面一贯的命名，以防止后台混乱</p></li><li><p>use_template=True 在 text 字段中，这样就允许我们使用数据模板去建立搜索引擎索引的文件，说得通俗点就是索引里面需要存放一些什么东西，例如 Post 的 title 字段，这样我们可以通过 title 内容来检索 Post 数据了。举个例子，假如你搜索 Python ，那么就可以检索出 title 中含有 Python 的Blog了。</p></li></ul><h2 id="5-指定索引模板文件"><a href="#5-指定索引模板文件" class="headerlink" title="5.指定索引模板文件"></a>5.指定索引模板文件</h2><p>在项目的“templates/search/indexes/应用名称/”下创建“模型类名称_text.txt”文件（例如 templates/search/indexes/blog/blog_text.txt),全小写即可。</p><p>此文件指定将模型中的哪些字段建立索引，写入如下内容：（不要改掉object,可以继续添加其他的字段) </p><pre class="line-numbers language-none"><code class="language-none"># templates&#x2F;search&#x2F;indexes&#x2F;blog&#x2F;blog_text.txt&#123;&#123; object.title &#125;&#125;&#123;&#123; object.body &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="6-指定搜索结果页面"><a href="#6-指定搜索结果页面" class="headerlink" title="6.指定搜索结果页面"></a>6.指定搜索结果页面</h2><p>在templates/search/下面，建立一个search.html页面。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>&#123;% if query %&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>搜索结果如下：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    &#123;% for result in page.object_list %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/&#123;&#123; result.object.id &#125;&#125;/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; result.object.title&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    &#123;% empty %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>啥也没找到<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    &#123;% endfor %&#125;    &#123;% if page.has_previous or page.has_next %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            &#123;% if page.has_previous %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>?q=&#123;&#123; query &#125;&#125;<span class="token entity named-entity" title="&amp;">&amp;amp;</span>page=&#123;&#123; page.previous_page_number &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;% endif %&#125;<span class="token entity named-entity" title="&laquo;">&amp;laquo;</span> 上一页&#123;% if page.has_previous %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>&#123;% endif %&#125;        |            &#123;% if page.has_next %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>?q=&#123;&#123; query &#125;&#125;<span class="token entity named-entity" title="&amp;">&amp;amp;</span>page=&#123;&#123; page.next_page_number &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;% endif %&#125;下一页 <span class="token entity named-entity" title="&raquo;">&amp;raquo;</span>&#123;% if page.has_next %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>&#123;% endif %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    &#123;% endif %&#125;&#123;% endif %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-使用jieba中文分词器"><a href="#7-使用jieba中文分词器" class="headerlink" title="7.使用jieba中文分词器"></a>7.使用jieba中文分词器</h2><p>在haystack的安装文件夹下，找到文件路径如“/usr/local/lib/python3.6/dist-packages/django_haystack-2.8.1-py3.6.egg/haystack/backends/whoosh_backend.py”，复制一份到自己的app 路径下重命名为whoosh_cn_backend.py，然后添加修改如下内容：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 顶部引入jieba中的中文分词器</span><span class="token keyword">from</span> jieba<span class="token punctuation">.</span>analyse <span class="token keyword">import</span> ChineseAnalyzer<span class="token comment"># 在整个py文件中，查找</span>analyzer<span class="token operator">=</span>StemmingAnalyzer<span class="token punctuation">(</span><span class="token punctuation">)</span>全部改为改为analyzer<span class="token operator">=</span>ChineseAnalyzer<span class="token punctuation">(</span><span class="token punctuation">)</span>总共大概有两三处吧<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-修改搜索默认引擎"><a href="#8-修改搜索默认引擎" class="headerlink" title="8.修改搜索默认引擎"></a>8.修改搜索默认引擎</h2><p>如果之前已经做了修改，这一步就可以跳过了，修改settings.py文件</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">HAYSTACK_CONNECTIONS <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment"># 此处为默认的WhooshEngine，后面会修改它,因此把它注释掉</span>        <span class="token comment"># 'ENGINE': 'haystack.backends.whoosh_cn_backend.WhooshEngine', </span>        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'blog.whoosh_cn_backend.WhooshEngine'</span><span class="token punctuation">,</span>        <span class="token string">'PATH'</span><span class="token punctuation">:</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'whoosh_index'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">## 10.实现搜索入口在网页中加入搜索框：&#96;&#96;&#96;html&lt;form method&#x3D;&#39;get&#39; action&#x3D;&quot;&#x2F;blog&#x2F;blog_search&#x2F;&quot; target&#x3D;&quot;_blank&quot;&gt;    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;q&quot;&gt;    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;查询&quot;&gt;&lt;&#x2F;form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，由于我们自定义了search_view的路由，因此，这里的action需要写成写对的位置，或者</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>blog:haystack<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="10-自定义搜索视图"><a href="#10-自定义搜索视图" class="headerlink" title="10. 自定义搜索视图"></a>10. 自定义搜索视图</h2><h2 id="11-序列化API设置"><a href="#11-序列化API设置" class="headerlink" title="11. 序列化API设置"></a>11. 序列化API设置</h2><h3 id="1-安装相关包-1"><a href="#1-安装相关包-1" class="headerlink" title="1.安装相关包"></a>1.安装相关包</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pip install drf-haystack pip install djangorestframework <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装需要的第三方包</p><h3 id="2-编写序列化类"><a href="#2-编写序列化类" class="headerlink" title="2.编写序列化类"></a>2.编写序列化类</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># blog/serializer.py</span><span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> <span class="token punctuation">.</span>search_indexes <span class="token keyword">import</span> BlogIndex<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> ModelSerializer<span class="token keyword">from</span> drf_haystack<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> HaystackSerializerMixin<span class="token keyword">class</span> <span class="token class-name">BlogSerializers</span><span class="token punctuation">(</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Blog        fields <span class="token operator">=</span> <span class="token string">'__all__'</span>        <span class="token keyword">class</span> <span class="token class-name">BlogIndexSerializer</span><span class="token punctuation">(</span>HaystackSerializerMixin<span class="token punctuation">,</span> BlogSerializers<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">(</span>BlogSerializers<span class="token punctuation">.</span>Meta<span class="token punctuation">)</span><span class="token punctuation">:</span>        index_classes <span class="token operator">=</span> <span class="token punctuation">[</span>BlogIndex<span class="token punctuation">]</span>        search_fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">,</span> <span class="token string">'title'</span><span class="token punctuation">,</span> <span class="token string">'content'</span><span class="token punctuation">]</span>  <span class="token comment"># 不能和正常搜索一样使用q参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里序列化Blog数据 和BlogIndex数据</p><p>注意BlogIndexSerializer 中的search_fields ，这里可查询的数据源对应Blog的Model中的数据</p><h3 id="3-视图设置"><a href="#3-视图设置" class="headerlink" title="3.视图设置"></a>3.视图设置</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> drf_haystack<span class="token punctuation">.</span>viewsets <span class="token keyword">import</span> HaystackViewSet<span class="token keyword">from</span> <span class="token punctuation">.</span>serializers <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> <span class="token punctuation">.</span>models improt Blog<span class="token keyword">class</span> <span class="token class-name">BlogSearchViewSet</span><span class="token punctuation">(</span>HaystackViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    返回博客文章搜索列表    """</span>    index_models <span class="token operator">=</span> <span class="token punctuation">[</span>Blog<span class="token punctuation">]</span>    serializer_class <span class="token operator">=</span> BlogIndexSerializer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-配置urls路由"><a href="#4-配置urls路由" class="headerlink" title="4.配置urls路由"></a>4.配置urls路由</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token keyword">from</span> blog <span class="token keyword">import</span> views <span class="token keyword">as</span> blog_view<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> routersrouter <span class="token operator">=</span> routers<span class="token punctuation">.</span>DefaultRouter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 因为视图没有定义query_set字段，因此需要加上basename字段</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r'blog_search'</span><span class="token punctuation">,</span> blog_view<span class="token punctuation">.</span>BlogSearchViewSet<span class="token punctuation">,</span> basename<span class="token operator">=</span><span class="token string">'blog_search'</span><span class="token punctuation">)</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'api/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span>router<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token comment"># API路由</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-生成索引"><a href="#12-生成索引" class="headerlink" title="12.生成索引"></a>12.生成索引</h2><p>手动生成一次索引：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python3 manage.py rebuild_index<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="丰富的自定义"><a href="#丰富的自定义" class="headerlink" title="丰富的自定义"></a>丰富的自定义</h1><p>上面只是快速完成一个基本的搜索引擎，haystack还有更多可自定义，来实现个性化的需求。</p><pre><code>参考官方文档：http://django-haystack.readthedocs.io/en/master/</code></pre><h1 id="自定义搜索view"><a href="#自定义搜索view" class="headerlink" title="自定义搜索view"></a>自定义搜索view</h1><p>上面的配置中，搜索相关的请求被导入到haystack.urls中，如果想自定义搜索的view，实现更多功能，可以修改。</p><h2 id="1-自定义路由"><a href="#1-自定义路由" class="headerlink" title="1.自定义路由"></a>1.自定义路由</h2><p>haystack.urls中内容其实很简单，</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls <span class="token keyword">import</span> url  <span class="token keyword">from</span> <span class="token punctuation">.</span>views <span class="token keyword">import</span> SearchView    urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>      path<span class="token punctuation">(</span><span class="token string">'blog_search/'</span><span class="token punctuation">,</span> BlogSearchView<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'haystack'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-自定义视图"><a href="#2-自定义视图" class="headerlink" title="2.自定义视图"></a>2.自定义视图</h2><p>那么，我们写一个view，继承自SearchView，即可将搜索的url导入到自定义view中处理啦。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> haystack<span class="token punctuation">.</span>views <span class="token keyword">import</span> SearchView<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Blog<span class="token keyword">import</span> json<span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token keyword">class</span> <span class="token class-name">BlogSearchView</span><span class="token punctuation">(</span>SearchView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 重写template的位置</span>    template <span class="token operator">=</span> <span class="token string">'search/blog_search.html'</span>    <span class="token keyword">def</span> <span class="token function">get_context</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        context <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span>BlogSearchView<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>get_context<span class="token punctuation">(</span><span class="token punctuation">)</span>        results <span class="token operator">=</span> self<span class="token punctuation">.</span>results        <span class="token comment"># 当搜索引擎找不到时，重新从数据库中找一遍</span>        <span class="token keyword">if</span> results<span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>            results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            search_blogs <span class="token operator">=</span> Blog<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>title__icontains<span class="token operator">=</span>self<span class="token punctuation">.</span>query<span class="token punctuation">,</span>                                               content__icontains<span class="token operator">=</span>self<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'-created_time'</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> search_blog <span class="token keyword">in</span> search_blogs<span class="token punctuation">:</span>                results<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"object"</span><span class="token punctuation">:</span> search_blog<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># 将result结果返回为Blog列表</span>        results <span class="token operator">=</span> <span class="token punctuation">[</span>blog<span class="token punctuation">[</span><span class="token string">'object'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> blog <span class="token keyword">in</span> results<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token string">'object'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">if</span> results<span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">else</span> results        context<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token string">'title'</span><span class="token punctuation">:</span> <span class="token string">'博客搜索'</span><span class="token punctuation">,</span>            <span class="token string">'results'</span><span class="token punctuation">:</span> results        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> context<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看SearchView的源码或文档，了解每个方法是做什么的，便可有针对性地进行修改。</p><ul><li> 上面重写了template变量，修改了搜索结果页面模板的位置。</li><li> 重写get_context方法，添加一些自己想要的字段，修改results的格式<h2 id="3-高亮搜索关键字"><a href="#3-高亮搜索关键字" class="headerlink" title="3.高亮搜索关键字"></a>3.高亮搜索关键字</h2></li></ul><p>在搜索结果页的模板中，可以使用highlight标签（需要先load一下）</p><pre class="line-numbers language-none"><code class="language-none">&#123;% highlight &lt;text_block&gt; with &lt;query&gt; [css_class &quot;class_name&quot;] [html_tag &quot;span&quot;] [max_length 200] %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>text_block即为全部文字，query为高亮关键字，后面可选参数，可以定义高亮关键字的html标签、css类名，以及整个高亮部分的最长长度。</p><pre><code>高亮部分的源码位于 haystack/templatetags/lighlight.py 和 haystack/utils/lighlighting.py文件中，可复制进行修改，实现自定义高亮功能。</code></pre>]]></content>
      
      
      <categories>
          
          <category> Django全网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django视频网站搭建--step07收藏与点赞功能</title>
      <link href="/post/django-shi-pin-wang-zhan-da-jian/step07-shou-cang-yu-dian-zan-gong-neng/"/>
      <url>/post/django-shi-pin-wang-zhan-da-jian/step07-shou-cang-yu-dian-zan-gong-neng/</url>
      
        <content type="html"><![CDATA[<p>#收藏与点赞功能<br>本节讲一下个人菜单中另外两个比较重要的功能，“我的收藏”与“我的喜欢”。<br>通过学习这两个功能，我们会加深对django中通用视图类的理解与应用。</p><p>##我的收藏<br>###模型<br>上一节已经实现这个模型了<br>我的收藏、我的喜欢，都是与我关联，又因为，我可以收藏多个视频，视频也可以被多个用户收藏，所以用户与视频是属于多对多的关系。<br>所以我们在video模型上添加两个字段liked和collected，分别对应我喜欢和我收藏。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># video/models.py</span><span class="token keyword">class</span> <span class="token class-name">Video</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment"># 观看次数。数据类型是IntegerField，默认是0</span>    view_count <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment"># 喜欢的用户。数据类型是ManyToManyField，这是一种多对多的关系，表示一个视频可以被多个用户喜欢，一个用户也可以喜欢多个视频。记得设置用户表为settings.AUTH_USER_MODEL</span>    liked <span class="token operator">=</span> models<span class="token punctuation">.</span>ManyToManyField<span class="token punctuation">(</span>settings<span class="token punctuation">.</span>AUTH_USER_MODEL<span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> related_name<span class="token operator">=</span><span class="token string">"liked_videos"</span><span class="token punctuation">)</span>    <span class="token comment"># 收藏的用户。数据类型是ManyToManyField，这是一种多对多的关系，表示一个视频可以被多个用户收藏，一个用户也可以收藏多个视频。设置用户表为settings.AUTH_USER_MODEL</span>    collected <span class="token operator">=</span> models<span class="token punctuation">.</span>ManyToManyField<span class="token punctuation">(</span>settings<span class="token punctuation">.</span>AUTH_USER_MODEL<span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> related_name<span class="token operator">=</span><span class="token string">"collected_videos"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    created_time <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>auto_now_add<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出liked和collected字段都是属于ManyToManyField类型，表示视频与用户是多对多的关系。</p><p>并分别设置它们的别名为”liked_videos”和”collected_videos”，通过别名也可以访问到数据。<br>###路由设置<br>下面我们来添加两者的路由，添加在users/urls.py下面。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">path<span class="token punctuation">(</span><span class="token string">'&lt;int:pk>/collect_videos/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>CollectListView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'collect_videos'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>path<span class="token punctuation">(</span><span class="token string">'&lt;int:pk>/like_videos/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>LikeListView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'like_videos'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中，我的收藏的视图类是CollectListView，我的喜欢的视图类是LikeListView。我们先来实现CollectListView</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># userprofile/views.py</span><span class="token keyword">class</span> <span class="token class-name">CollectListView</span><span class="token punctuation">(</span>generic<span class="token punctuation">.</span>ListView<span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> User    template_name <span class="token operator">=</span> <span class="token string">'users/collect_videos.html'</span>    context_object_name <span class="token operator">=</span> <span class="token string">'video_list'</span>    paginate_by <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">def</span> <span class="token function">get_context_data</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> object_list<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        context <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span>CollectListView<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>get_context_data<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        paginator <span class="token operator">=</span> context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'paginator'</span><span class="token punctuation">)</span>        page <span class="token operator">=</span> context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'page_obj'</span><span class="token punctuation">)</span>        page_list <span class="token operator">=</span> get_page_list<span class="token punctuation">(</span>paginator<span class="token punctuation">,</span> page<span class="token punctuation">)</span>        context<span class="token punctuation">[</span><span class="token string">'page_list'</span><span class="token punctuation">]</span> <span class="token operator">=</span> page_list        <span class="token keyword">return</span> context    <span class="token keyword">def</span> <span class="token function">get_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        user <span class="token operator">=</span> get_object_or_404<span class="token punctuation">(</span>User<span class="token punctuation">,</span> pk<span class="token operator">=</span>self<span class="token punctuation">.</span>kwargs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'pk'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        videos <span class="token operator">=</span> user<span class="token punctuation">.</span>collected_videos<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> videos<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与首页展示的功能类似，这里同样继承了ListView通用视图类。并使用了公共函数get_page_list对数据进行分页。<br>在获取收藏数据列表时，我们用的是user.collected_videos.all()，其中collected_videos就是前面定义的别名。<br>并通过配置template_name将数据传递给模板文件users/collect_videos.html。<br>###前端代码<br>模板文件关键代码</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我的收藏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui unstackable items<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &#123;% for item in video_list %&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui tiny image<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            &#123;% thumbnail item.cover "300x200" crop="center" as im %&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui image<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123; im.url &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            &#123;% empty %&#125;            &#123;% endthumbnail %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>middle aligned content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>video:detail<span class="token punctuation">'</span> item.pk %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; item.title &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    &#123;% empty %&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>暂无数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    &#123;% endfor %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>&#123;% include "base/page_nav.html" %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>##我的喜欢</p><p>下面来开发我的喜欢功能</p><p>该功能与我的收藏功能类似。因为前面已经添加了like_videos路由，我们直接写LikeListView的代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">LikeListView</span><span class="token punctuation">(</span>generic<span class="token punctuation">.</span>ListView<span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> User    template_name <span class="token operator">=</span> <span class="token string">'users/like_videos.html'</span>    context_object_name <span class="token operator">=</span> <span class="token string">'video_list'</span>    paginate_by <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">def</span> <span class="token function">get_context_data</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> object_list<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        context <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span>LikeListView<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>get_context_data<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        paginator <span class="token operator">=</span> context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'paginator'</span><span class="token punctuation">)</span>        page <span class="token operator">=</span> context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'page_obj'</span><span class="token punctuation">)</span>        page_list <span class="token operator">=</span> get_page_list<span class="token punctuation">(</span>paginator<span class="token punctuation">,</span> page<span class="token punctuation">)</span>        context<span class="token punctuation">[</span><span class="token string">'page_list'</span><span class="token punctuation">]</span> <span class="token operator">=</span> page_list        <span class="token keyword">return</span> context    <span class="token keyword">def</span> <span class="token function">get_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        user <span class="token operator">=</span> get_object_or_404<span class="token punctuation">(</span>User<span class="token punctuation">,</span> pk<span class="token operator">=</span>self<span class="token punctuation">.</span>kwargs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'pk'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        videos <span class="token operator">=</span> user<span class="token punctuation">.</span>liked_videos<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> videos<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与我的收藏的模式一模一样，同样是继承ListView并设置相关model与template_name变量。最终通过users/like_videos.html来渲染。</p>]]></content>
      
      
      <categories>
          
          <category> Django视频网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django视频网站搭建--step3首页功能</title>
      <link href="/post/django-shi-pin-wang-zhan-da-jian/step3-shou-ye-gong-neng/"/>
      <url>/post/django-shi-pin-wang-zhan-da-jian/step3-shou-ye-gong-neng/</url>
      
        <content type="html"><![CDATA[<p>#首页功能<br>在本讲中，我们开始首页功能的开发，在开发过程中，<br>学习到Django中的通用视图类、分页对象paginator以及foreignKey外键的使用。</p><p>首页拆解为4个小的业务模块来开发，分别是：列表显示、分页功能、搜索功能、分类功能。</p><p>下面我们分别对这四个功能模块进行开发讲解。<br>开发思路</p><p>开发一个功能的基本思路是：先新建应用，然后分析功能涉及到哪些业务，从而分析出需要的数据库字段，然后编写模型，之后就是展示阶段，通过url路由配置视图函数，来将模型里面的数据显示出来。</p><p>ok，我们通过命令建立应用，命名为video。执行后，django将为我们新建video文件夹。</p><pre><code>python3 manage.py startapp video</code></pre><p>下面的功能模块开发都在该应用(video)下进行。<br>##建模型</p><p>此处，我们需要建立两个模型，分别是分类表(classification)和视频列表(video)。</p><p>他们是多对一的关系(一个分类对应多个视频，一个视频对应一个分类)。</p><p>首先编写Classification表，在model.py下面，我们键入如下代码。</p><p>字段有title(分类名称)和status(是否启用)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">class</span> <span class="token class-name">Classification</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    list_display <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span><span class="token punctuation">)</span>    title <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    status <span class="token operator">=</span> models<span class="token punctuation">.</span>BooleanField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        db_table <span class="token operator">=</span> <span class="token string">"v_classification"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字段说明</p><pre><code>title      分类名称。数据类型是CharField，最大长度为max_length=100，允许为空null=Truestatus     是否启用。数据类型是BooleanField,默认为default=Truedb_table   表名</code></pre><p>然后编写Video模型，根据网站业务，我们设置了title(标题)、 desc(描述)、 classification(分类)、file(视频文件)、cover(封面)、status(发布状态)等字段。</p><p>其中classification是一个ForeignKey外键字段，表示一个分类对应多个视频，一个视频对应一个分类(多对一)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">class</span> <span class="token class-name">Video</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    STATUS_CHOICES <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'发布中'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'未发布'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    title <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>                             <span class="token comment"># 标题</span>    desc <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>                              <span class="token comment"># 描述</span>    classification <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>Classification<span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>     <span class="token comment"># 外键关联分类</span>    <span class="token builtin">file</span> <span class="token operator">=</span> models<span class="token punctuation">.</span>FileField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">)</span>                                                     <span class="token comment"># 视频文件地址</span>    cover <span class="token operator">=</span> models<span class="token punctuation">.</span>ImageField<span class="token punctuation">(</span>upload_to<span class="token operator">=</span><span class="token string">'cover/'</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>                        <span class="token comment"># 封面,设置了存贮目录</span>    status <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> choices<span class="token operator">=</span>STATUS_CHOICES<span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>      <span class="token comment"># 发布状态</span>    created_time <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>auto_now_add<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>            <span class="token comment"># 创建时间 自动生成时间</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        db_table <span class="token operator">=</span> <span class="token string">"v_video"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字段说明</p><pre><code>title       视频标题。数据类型是charField，最大长度为max_length=100，允许为空null=Truedesc        视频描述。数据类型是charField，最大长度为max_length=255，允许为空null=Truefile        视频文件地址。数据类型是fileField。其中存的是视频文件的地址，在之后的视频管理中我们将会对视频的上传进行具体的讲解。cover       视频封面。数据类型是ImageField。存储目录为upload_to=‘cover/’，允许为空null=Truestatus      视频状态。是一个选择状态，用choices设置多选元祖。created_time 创建时间。数据类型是DateTimeField 。设置自动生成时间auto_now_add=True</code></pre><p>ForeignKey  表明一种一对多的关联关系。</p><p>比如这里我们的视频和分类的关系，一个视频只能对应一个分类，而一个分类下可以有多个视频。</p><p>更多关于ForeinkKey的说明，可以参看 <a href="https://docs.djangoproject.com/zh-hans/3.1/topics/db/examples/many_to_one/" title="官方介绍">ForeignKey</a></p><p>将新建好的模型注册一下,在video/admin.py 注册如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment"># Register your models here.)</span>admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>Classification<span class="token punctuation">)</span>admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>Video<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>##路由配置和注册app</p><p>要想访问到首页，必须先配置好路由。在video下建立urls.py文件<br>命名空间为app的名字‘video’，添加路由信息</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> viewsapp_name <span class="token operator">=</span> <span class="token string">'video'</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>IndexView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'search/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>SearchListView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'search'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时在project中的urls.py 添加路由信息</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>IndexView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'search/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>SearchListView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'search'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在设置中添加安装和使用的app， settings。py</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'django.contrib.admin'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.auth'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.contenttypes'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.sessions'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.messages'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.staticfiles'</span><span class="token punctuation">,</span>    <span class="token string">'users'</span><span class="token punctuation">,</span>    <span class="token string">'video'</span><span class="token punctuation">,</span>                     <span class="token comment"># 新添加的app</span>    <span class="token string">'sorl.thumbnail'</span><span class="token punctuation">,</span>            <span class="token comment"># 本次使用的app，通过thumbnail添加缩略图  </span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一条path语句就代表一条路由信息。这样我们就可以在浏览器输入127.0.0.1:8000/video/index来访问首页了。<br>##显示列表<br>显示列表数据非常简单，我们使用django中内置的视图模版类ListView来显示，首先在view.py中编写IndexView类，用它来显示列表数据。键入如下代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">IndexView</span><span class="token punctuation">(</span>generic<span class="token punctuation">.</span>ListView<span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> Video    template_name <span class="token operator">=</span> <span class="token string">'video/index.html'</span>    context_object_name <span class="token operator">=</span> <span class="token string">'video_list'</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>此处，我们使用了django提供的通用视图类ListView, ListView使用很简单，只需要我们简单的配置几行代码，即可将数据库里面的数据渲染到前端。比如上述代码中，我们配置了</p><pre><code>model = Video, 作用于Video模型template_name = ‘video/index.html’ ，告诉ListView要使用我们已经创建的模版文件。context_object_name = ‘video_list’ ，上下文变量名，告诉ListView，在前端模版文件中，可以使用该变量名来展现数据。</code></pre><p>##分类功能</p><p>在写分类功能之前，我们先学习一个回调函数 get_context_data()</p><p>这是ListView视图类中的一个函数，在 get_context_data() 函数中，可以传一些额外内容到模板。</p><p>因此我们可以使用该函数来传递分类数据。</p><p>要使用它，很简单。</p><p>只需要在IndexView类下面，追加get_context_data()的实现即可。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">IndexView</span><span class="token punctuation">(</span>generic<span class="token punctuation">.</span>ListView<span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> Video    template_name <span class="token operator">=</span> <span class="token string">'video/index.html'</span>    context_object_name <span class="token operator">=</span> <span class="token string">'video_list'</span>     <span class="token keyword">def</span> <span class="token function">get_context_data</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> object_list<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        context <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span>IndexView<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>get_context_data<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        classification_list <span class="token operator">=</span> Classification<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>status<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span>        context<span class="token punctuation">[</span><span class="token string">'classification_list'</span><span class="token punctuation">]</span> <span class="token operator">=</span> classification_list        <span class="token keyword">return</span> context<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述代码中，我们将分类数据通过Classification.objects.filter(status=True).values()从数据库里面过滤出来，然后赋给classification_list，最后放到context字典里面。</p><p>在前端模板（templates/video/index.html）中，就可以通过classification_list来取数据。添加代码</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classification<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui red label<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>全部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    &#123;% for item in classification_list %&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui label<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; item.title &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    &#123;% endfor %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然现在只是实现了分类展示效果，我们还需要继续实现点击效果，即点击不同的分类，显示不同的视频列表。</p><p>我们先给每个分类按钮加上href链接</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classification<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui red label<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>home<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>全部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    &#123;% for item in classification_list %&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui label<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>?c=&#123;&#123; item.id &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; item.title &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    &#123;% endfor %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过添加?c= 这里用c代表分类的id，点击后，会传到视图类中，在视图类中，我们使用 get_queryset() 函数，将get数据取出来。通过self.request.GET.get(“c”, None) 赋给c，判断c是否为None，如果为None，就响应全部，如果有值，就通过get_object_or_404(Classification, pk=self.c)先获取当前类，然后classification.video_set获取外键数据。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>c <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>c<span class="token punctuation">:</span>        classification <span class="token operator">=</span> get_object_or_404<span class="token punctuation">(</span>Classification<span class="token punctuation">,</span> pk<span class="token operator">=</span>self<span class="token punctuation">.</span>c<span class="token punctuation">)</span>        <span class="token keyword">return</span> classification<span class="token punctuation">.</span>video_set<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'-created_time'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> Video<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>status<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'-created_time'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>##分页功能</p><p>在Django中，有现成的分页解决方案，我们开发者省了不少事情。如果是简单的分页，只需要配置一下paginate_by即可实现。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">IndexView</span><span class="token punctuation">(</span>generic<span class="token punctuation">.</span>ListView<span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> Video    template_name <span class="token operator">=</span> <span class="token string">'video/index.html'</span>    context_object_name <span class="token operator">=</span> <span class="token string">'video_list'</span>    paginate_by <span class="token operator">=</span> <span class="token number">12</span>    c <span class="token operator">=</span> <span class="token boolean">None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样每页的分页数据就能正确的显示出来来，现在来完善底部的页码条。</p><p>页码列表需要视图类和模板共同来完成，我们先来写视图类。</p><p>在前面我们已经写过get_context_data了，该函数的主要功能就是传递额外的数据给模板。这里，我们就利用get_context_data来传递页码数据。</p><p>我们先定义一个工具函数，叫get_page_list。<br> 在项目根目录下，新建一个文件helpers.py该文件当作一个全局的工具类，用来存放各种工具函数。</p><p> 把get_page_list放到helpers.py里面 该函数用来生产页码列表，不但这里可以使用，以后在其他地方也可以调用该函数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_page_list</span><span class="token punctuation">(</span>paginator<span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">:</span>    page_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> paginator<span class="token punctuation">.</span>num_pages <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> page<span class="token punctuation">.</span>number <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>            start_page <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">elif</span> page<span class="token punctuation">.</span>number <span class="token operator">></span> paginator<span class="token punctuation">.</span>num_pages <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">:</span>            start_page <span class="token operator">=</span> paginator<span class="token punctuation">.</span>num_pages <span class="token operator">-</span> <span class="token number">9</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            start_page <span class="token operator">=</span> page<span class="token punctuation">.</span>number <span class="token operator">-</span> <span class="token number">5</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>start_page<span class="token punctuation">,</span> start_page <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            page_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> paginator<span class="token punctuation">.</span>num_pages <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            page_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> page_list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分页逻辑：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> 页数<span class="token operator">>=</span><span class="token number">10</span><span class="token punctuation">:</span>    当前页<span class="token operator">&lt;=</span><span class="token number">5</span>时，起始页为<span class="token number">1</span>    当前页<span class="token operator">></span><span class="token punctuation">(</span>总页数<span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span>时，起始页为<span class="token punctuation">(</span>总页数<span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">)</span>    其他情况 起始页为<span class="token punctuation">(</span>当前页<span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>举例：</p><pre><code>假设一共16页情况1: 当前页==5  则页码列表为[1,2,3,4,5,6,7,8,9,10]情况2: 当前页==8  则页码列表为[3,4,5,6,7,8,9,10,11,12]情况3: 当前页==15 则页码列表为[7,8,9,10,11,12,13,14,15,16]`</code></pre><p>当然你看到这个逻辑会有点乱，建议大家读着代码，多试验几遍。</p><p>当拿到页码列表，我们继续改写get_context_data()函数。 将获取到的classification_list追加到context字典中。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>c <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_context_data</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> object_list<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    context <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span>IndexView<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>get_context_data<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    classification_list <span class="token operator">=</span> Classification<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>status<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span>    context<span class="token punctuation">[</span><span class="token string">'classification_list'</span><span class="token punctuation">]</span> <span class="token operator">=</span> classification_list    paginator <span class="token operator">=</span> context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'paginator'</span><span class="token punctuation">)</span>             <span class="token comment"># 返回的是分页对象</span>    page <span class="token operator">=</span> context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'page_obj'</span><span class="token punctuation">)</span>                   <span class="token comment"># 返回的是当前页码</span>    page_list <span class="token operator">=</span> get_page_list<span class="token punctuation">(</span>paginator<span class="token punctuation">,</span> page<span class="token punctuation">)</span>    context<span class="token punctuation">[</span><span class="token string">'page_list'</span><span class="token punctuation">]</span> <span class="token operator">=</span> page_list    context<span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>c    context<span class="token punctuation">[</span><span class="token string">'classification_list'</span><span class="token punctuation">]</span> <span class="token operator">=</span> classification_list    <span class="token keyword">return</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当数据传递给模板之后，模板就负责显示出来就行了。</p><p>因为分页功能比较常用，所以需要把它单独拿出来封装到一个单独的文件中，我们新建templates/base/page_nav.html文件。然后在index.html里面我们将该文件include进来。</p><pre><code>&#123;% include "base/page_nav.html" %&#125;</code></pre><p>打开page_nav.html，写入代码</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&#123;% if is_paginated %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video-page<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui circular labels<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        &#123;% if page_obj.has_previous %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui circular label<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>?page=&#123;&#123; page_obj.previous_page_number &#125;&#125;&#123;% if c %&#125;&amp;c=&#123;&#123;c&#125;&#125;&#123;% endif %&#125;&#123;% if q %&#125;&amp;q=&#123;&#123;q&#125;&#125;&#123;% endif %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&lt;">&amp;lt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        &#123;% endif %&#125;        &#123;% for i in page_list %&#125;        &#123;% if page_obj.number == i %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui red circular label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; i &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        &#123;% else %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui circular label<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>?page=&#123;&#123; i &#125;&#125;&#123;% if c %&#125;&amp;c=&#123;&#123;c&#125;&#125;&#123;% endif %&#125;&#123;% if q %&#125;&amp;q=&#123;&#123;q&#125;&#125;&#123;% endif %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; i &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        &#123;% endif %&#125;        &#123;% endfor %&#125;        &#123;% if page_obj.has_next %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui circular label<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>?page=&#123;&#123; page_obj.next_page_number &#125;&#125;&#123;% if c %&#125;&amp;c=&#123;&#123;c&#125;&#125;&#123;% endif %&#125;&#123;% if q %&#125;&amp;q=&#123;&#123;q&#125;&#125;&#123;% endif %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        &#123;% endif %&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>&#123;% endif %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中，我们用到了page_obj对象的几个属性：</p><pre><code>    has_previous    previous_page_number    next_page_number</code></pre><p>通过这几个属性，即可实现复杂的页码显示效果。其中我们还这href里面加了</p><pre><code>&#123;% if c %&#125;&amp;c=&#123;&#123;c&#125;&#125;</code></pre><p>代表分类的id。<br>##搜索功能</p><p>要实现搜索，我们需要一个搜索框</p><p>因为搜索框是很多页面都需要的，所以我们把代码写到templates/base/header.html文件里面。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui small icon input v-video-search<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prompt<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123; q &#125;&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>搜索视频<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>v-search<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search icon<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">cursor</span><span class="token punctuation">:</span>pointer<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>点击搜索或回车的代码写在了static/js/header.js里面。</p><p>我们还需要配置一下路由，添加一行搜索的路由。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">app_name <span class="token operator">=</span> <span class="token string">'video'</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>IndexView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'search/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>SearchListView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'search'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>搜索路由指向的视图类为SearchListView</p><p>下面我们来写SearchListView的代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SearchListView</span><span class="token punctuation">(</span>generic<span class="token punctuation">.</span>ListView<span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> Video    template_name <span class="token operator">=</span> <span class="token string">'video/search.html'</span>    context_object_name <span class="token operator">=</span> <span class="token string">'video_list'</span>    paginate_by <span class="token operator">=</span> <span class="token number">8</span>    q <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">def</span> <span class="token function">get_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>q <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Video<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>title__contains<span class="token operator">=</span>self<span class="token punctuation">.</span>q<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>status<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_context_data</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> object_list<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        context <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span>SearchListView<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>get_context_data<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        paginator <span class="token operator">=</span> context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'paginator'</span><span class="token punctuation">)</span>        page <span class="token operator">=</span> context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'page_obj'</span><span class="token punctuation">)</span>        page_list <span class="token operator">=</span> get_page_list<span class="token punctuation">(</span>paginator<span class="token punctuation">,</span> page<span class="token punctuation">)</span>        context<span class="token punctuation">[</span><span class="token string">'page_list'</span><span class="token punctuation">]</span> <span class="token operator">=</span> page_list        context<span class="token punctuation">[</span><span class="token string">'q'</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>q        <span class="token keyword">return</span> context<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关键代码就是Video.objects.filter(title__contains=self.q).filter(status=0)<br>title__contains是包含的意思，表示查询title包含q的记录。利用filter将数据过滤出来。这里写了两层过滤，第一层过滤搜索关键词，第二层过滤status已发布的视频。</p><p>另外，这里也用到了get_context_data来存放额外的数据，包括分页数据、q关键词。</p><p>配置模板文件是templates/video/search.html</p><p>因此模板代码写在search.html里面</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui unstackable items<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &#123;% for item in video_list %&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui tiny image<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            &#123;% thumbnail item.cover "300x200" crop="center" as im %&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui image<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123; im.url &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            &#123;% empty %&#125;            &#123;% endthumbnail %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>middle aligned content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>video:detail<span class="token punctuation">'</span> item.pk %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; item.title &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    &#123;% empty %&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>暂无数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    &#123;% endfor %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>&#123;% include "base/page_nav.html" %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>##其他<br>media 媒体文件需要添加<br>在设置中需要添加</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 媒体文件上传路径，包括视频封面，个人头像</span>MEDIA_ROOT <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'upload'</span><span class="token punctuation">)</span>MEDIA_URL <span class="token operator">=</span> <span class="token string">'/upload/'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>同时需要讲媒体文件路径加入到路由表中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf <span class="token keyword">import</span> settings<span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls<span class="token punctuation">.</span>static <span class="token keyword">import</span> staticurlpatterns <span class="token operator">+=</span> static<span class="token punctuation">(</span>settings<span class="token punctuation">.</span>MEDIA_URL<span class="token punctuation">,</span> document_root<span class="token operator">=</span>settings<span class="token punctuation">.</span>MEDIA_ROOT<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Django视频网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django视频网站搭建--step5详情页面开发</title>
      <link href="/post/django-shi-pin-wang-zhan-da-jian/step5-xiang-qing-ye-mian-kai-fa/"/>
      <url>/post/django-shi-pin-wang-zhan-da-jian/step5-xiang-qing-ye-mian-kai-fa/</url>
      
        <content type="html"><![CDATA[<p>#详情页面开发<br>在本讲中，我们开始详情页功能的开发.</p><p>详情页就是对单个视频进行播放并展示视频的相关信息，比如视频标题、描述、评论信息、相关推荐等。</p><p>我们将会学习到通用视图类DetailView的使用、评论动态加载、以及如何通过ajax实现喜欢和收藏功能，并通过一段段很酷的代码来说明这些功能。</p><p>#整体功能</p><ul><li>1.详情页功能。</li><li>2.对单个视频进行展示，包括标题、描述、观看次数</li><li>3.点赞和收藏功能。</li><li>4.评论功能，通过上拉网页即可分页加载评论列表，用户还能添加评论。</li><li>5.侧栏推荐视频列表，推荐逻辑为推荐观看次数最多的视频。</li><li>6.list页面点击某个视频或者其标题跳转到详情页。</li></ul><p>我们把详情页分为4个小的业务模块来开发，分别是：视频详情显示、喜欢和收藏功能、评论功能、推荐功能。下面我们分别对这四个功能模块进行开发讲解。<br>##视频详情显示</p><p>上一讲中，我们已经建立了video模型，所以不必再新建模型，我们就在video模型的基础上进行扩展。</p><p>上一讲，我们创建的字段有</p><pre><code>title       视频标题。数据类型是charField，最大长度为max_length=100，允许为空null=Truedesc        视频描述。数据类型是charField，最大长度为max_length=255，允许为空null=Truefile        视频文件地址。数据类型是fileField。其中存的是视频文件的地址，在之后的视频管理中我们将会对视频的上传进行具体的讲解。cover       视频封面。数据类型是ImageField。存储目录为upload_to=‘cover/’，允许为空null=Truestatus      视频状态。是一个选择状态，用choices设置多选元祖。created_time 创建时间。数据类型是DateTimeField 。设置自动生成时间auto_now_add=True</code></pre><p>这些字段目前是不够用的，我们再加几个字段，需要加<strong>观察次数、喜欢的用户、收藏的用户</strong>。</p><p>video模型扩展后如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Video</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    STATUS_CHOICES <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'发布中'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'未发布'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    title <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    desc <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">,</span>blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    classification <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>Classification<span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token builtin">file</span> <span class="token operator">=</span> models<span class="token punctuation">.</span>FileField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">)</span>    cover <span class="token operator">=</span> models<span class="token punctuation">.</span>ImageField<span class="token punctuation">(</span>upload_to<span class="token operator">=</span><span class="token string">'cover/'</span><span class="token punctuation">,</span>blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    status <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">,</span>choices<span class="token operator">=</span>STATUS_CHOICES<span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    view_count <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    liked <span class="token operator">=</span> models<span class="token punctuation">.</span>ManyToManyField<span class="token punctuation">(</span>settings<span class="token punctuation">.</span>AUTH_USER_MODEL<span class="token punctuation">,</span>                                   blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> related_name<span class="token operator">=</span><span class="token string">"liked_videos"</span><span class="token punctuation">)</span>    collected <span class="token operator">=</span> models<span class="token punctuation">.</span>ManyToManyField<span class="token punctuation">(</span>settings<span class="token punctuation">.</span>AUTH_USER_MODEL<span class="token punctuation">,</span>                                   blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> related_name<span class="token operator">=</span><span class="token string">"collected_videos"</span><span class="token punctuation">)</span>    created_time <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>auto_now_add<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新增了3个字段</p><pre><code>view_count 观看次数。数据类型是IntegerField，默认是0liked 喜欢的用户。数据类型是ManyToManyField，这是一种多对多的关系，                表示一个视频可以被多个用户喜欢，一个用户也可以喜欢多个视频。                记得设置用户表为settings.AUTH_USER_MODELcollected 收藏的用户。数据类型是ManyToManyField，这是一种多对多的关系，                    表示一个视频可以被多个用户收藏，一个用户也可以收藏多个视频。                    设置用户表为settings.AUTH_USER_MODEL更多关于ManyToManyField的使用介绍，可以查询django官网的介绍。</code></pre><p>下面就是详情展示阶段，我们先配置好详情页的路由信息，在video/urls.py中追加detail的路由信息。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">video<span class="token operator">/</span>urls<span class="token punctuation">.</span>pyapp_name <span class="token operator">=</span> <span class="token string">'video'</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>IndexView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'search/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>SearchListView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'search'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'detail/&lt;int:pk>/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>VideoDetailView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'detail'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>path(&#39;detail/&lt;int:pk&gt;/&#39;, views.VideoDetailView.as_view(), name=&#39;detail&#39;)</code></pre><p>即表示详情信息，注意每条视频都是有自己的主键的，所以设置路径匹配为detail/<a href="int:pk">int:pk</a>/,其中<a href="int:pk">int:pk</a>表示主键，</p><p>这是django中表示主键的一种方法。这样我们就可以在浏览器输入127.0.0.1:8000/video/detail/xxx来访问详情了。</p><p>如何显示详情呢，django为我们提供了DetailView。</p><p>urls.py中设置的视图类是VideoDetailView，我们让VideoDetailView继承DetailView即可。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">VideoDetailView</span><span class="token punctuation">(</span>generic<span class="token punctuation">.</span>DetailView<span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> Video    template_name <span class="token operator">=</span> <span class="token string">'video/detail.html'</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>看起来超级简单，django就是如此的酷，只需要我们配置几行代码，就能实现很强大的功能。</p><p>这里我们配置model为Video模型，模板为video/detail.html，其它的工作都不用管，全都交给django去干</p><p>模板文件位于templates/video/detail.html，它的代码比较简单，这里就不贴了。</p><p>##观看次数<br>观看次数的展示，本质上就是数据库里的一个自增字段，每次观看的时候，view_count自动加1。</p><p>对于这个小需求，我们需要做两件事情，首先这video模型里面，添加一个次数自增函数，命名为increase_view_count，这很简单，如下所示：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">increase_view_count</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>view_count <span class="token operator">+=</span> <span class="token number">1</span>    self<span class="token punctuation">.</span>save<span class="token punctuation">(</span>update_fields<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'view_count'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后，还需要我们在VideoDetailView视图类里面调用到这个函数。这个时候get_object()派上用场了。</p><p>因为每次调用DetailView的时候，django都会回调get_object()这个函数。</p><p>因此我们可以把increase_view_count()放到get_object()里面执行。完美的代码如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">VideoDetailView</span><span class="token punctuation">(</span>generic<span class="token punctuation">.</span>DetailView<span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> Video    template_name <span class="token operator">=</span> <span class="token string">'video/detail.html'</span>    <span class="token keyword">def</span> <span class="token function">get_object</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> queryset<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        obj <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_object<span class="token punctuation">(</span><span class="token punctuation">)</span>        obj<span class="token punctuation">.</span>increase_view_count<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 通过调用Video中的increase_view_count 获取观看次数</span>        <span class="token keyword">return</span> obj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>##点赞收藏功能<br>目前为止，我们就能在详情页看到标题、描述、观看次数、收藏次数、喜欢次数。</p><p>虽然可以显示收藏人数、喜欢人数。但是目前还没实现点击喜欢/收藏的功能。下面我们来实现。</p><p>收藏和点赞是一组动作，因此可以用ajax来实现：用户点击后调用后端接口，接口返回json数据，前端显示结果。</p><p>既然需要接口，那我们先添加喜欢/收藏接口的路由，在video/urls.py追加代码如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">path<span class="token punctuation">(</span><span class="token string">'like/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>like<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'like'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>path<span class="token punctuation">(</span><span class="token string">'collect/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>collect<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'collect'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>由于两个功能实现非常类似，限于篇幅，这里只说明一下功能。</p><p>我们先写like函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@ajax_required</span><span class="token decorator annotation punctuation">@require_http_methods</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">like</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>is_authenticated<span class="token punctuation">:</span>        <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"请先登录"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    video_id <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">[</span><span class="token string">'video_id'</span><span class="token punctuation">]</span>    video <span class="token operator">=</span> Video<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pk<span class="token operator">=</span>video_id<span class="token punctuation">)</span>    user <span class="token operator">=</span> request<span class="token punctuation">.</span>user    video<span class="token punctuation">.</span>switch_like<span class="token punctuation">(</span>user<span class="token punctuation">)</span>    <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"likes"</span><span class="token punctuation">:</span> video<span class="token punctuation">.</span>count_likers<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"user_liked"</span><span class="token punctuation">:</span> video<span class="token punctuation">.</span>user_liked<span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先判断用户是否登录，如果登录了则调用switch_like(user)来实现喜欢或不喜欢功能，最后返回json。</p><p>注意这里添加了两个注解@ajax_required和@require_http_methods([“POST”])，分别验证request必须是ajax和post请求。<br>这两个装饰器ajax_required是由自己的helper实现的，目的是加载ajax</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">utils<span class="token operator">/</span>video_helpers<span class="token punctuation">.</span>py<span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponseBadRequest<span class="token keyword">def</span> <span class="token function">ajax_required</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Not a mixin, but a nice decorator to validate than a request is AJAX"""</span>    <span class="token keyword">def</span> <span class="token function">wrap</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> request<span class="token punctuation">.</span>is_ajax<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> HttpResponseBadRequest<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> f<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    wrap<span class="token punctuation">.</span>__doc__ <span class="token operator">=</span> f<span class="token punctuation">.</span>__doc__    wrap<span class="token punctuation">.</span>__name__ <span class="token operator">=</span> f<span class="token punctuation">.</span>__name__    <span class="token keyword">return</span> wrap<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>require_http_methods方法则是自带的，要求请求的方式是POST.</p><p>switch_like()函数则写在了video/model.py里面</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 用户已经点击过喜欢了，就移除，没点击就添加</span><span class="token keyword">def</span> <span class="token function">switch_like</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> user <span class="token keyword">in</span> self<span class="token punctuation">.</span>liked<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>liked<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>user<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>liked<span class="token punctuation">.</span>add<span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token comment"># 统计喜欢人数</span><span class="token keyword">def</span> <span class="token function">count_likers</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> self<span class="token punctuation">.</span>liked<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 判断用户是否喜欢</span><span class="token keyword">def</span> <span class="token function">user_liked</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> user <span class="token keyword">in</span> self<span class="token punctuation">.</span>liked<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有的后端工作都准备好了，我们再把视线转向前端。前端主要是写ajax代码。</p><p>由于ajax代码量较大，我们封装到一个单独的js文件中 ==&gt; static/js/detail.js</p><p>在detail.js中，我们先实现点赞的ajax调用：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">static</span><span class="token operator">/</span>js<span class="token operator">/</span>detail<span class="token punctuation">.</span>js<span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 写入csrf</span>    $<span class="token punctuation">.</span><span class="token function">getScript</span><span class="token punctuation">(</span><span class="token string">"/static/js/csrftoken.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 喜欢</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#like"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> video_id <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#like"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"video-id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            url<span class="token operator">:</span> <span class="token string">'/video/like/'</span><span class="token punctuation">,</span>            data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                video_id<span class="token operator">:</span> video_id<span class="token punctuation">,</span>                <span class="token string">'csrf_token'</span><span class="token operator">:</span> csrftoken            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            type<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>            dataType<span class="token operator">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>            <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">var</span> code <span class="token operator">=</span> data<span class="token punctuation">.</span>code                <span class="token keyword">if</span><span class="token punctuation">(</span>code <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">var</span> likes <span class="token operator">=</span> data<span class="token punctuation">.</span>likes                    <span class="token keyword">var</span> user_liked <span class="token operator">=</span> data<span class="token punctuation">.</span>user_liked                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#like-count'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>likes<span class="token punctuation">)</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>user_liked <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#like'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">"grey"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#like'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"grey"</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">var</span> msg <span class="token operator">=</span> data<span class="token punctuation">.</span>msg                    <span class="token function">alert</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"点赞失败"</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码中，关键代码是$.ajax()函数，我们传入了参数：video_id和csrftoken。</p><p>其中csrftoken可通过/static/js/csrftoken.js生成。</p><p>在success回调中，通过判断user_liked的值来确定自己是否喜欢过，然后改变模板中相应的css。</p><p>##推荐功能</p><p>每个网站都有自己的推荐功能，且都有自己的推荐逻辑。这里的推荐逻辑是根据访问次数最高的n个视频来降序排序，然后推荐给用户的。</p><p>实现起来非常容易，我们知道详情页实现用的是VideoDetailView，我们可以在get_context_data()中把推荐内容传递给前端模板。</p><p>只需要我们改写VideoDetailView的get_context_date()函数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_context_data</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    context <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span>VideoDetailView<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>get_context_data<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    recommend_list <span class="token operator">=</span> Video<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get_recommend_list<span class="token punctuation">(</span><span class="token punctuation">)</span>    context<span class="token punctuation">[</span><span class="token string">'recommend_list'</span><span class="token punctuation">]</span> <span class="token operator">=</span> recommend_list    <span class="token keyword">return</span> context<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改写后，我们添加了一行</p><pre><code>recommend_list = Video.objects.get_recommend_list()</code></pre><p>我们把获取推荐列表的函数get_recommend_list()封装到了Video模型里面。<br>在Video/models.py里面,我们追加代码:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">VideoQuerySet</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>query<span class="token punctuation">.</span>QuerySet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get_recommend_list</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>status<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'-view_count'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>关键是self.filter(status=0).order_by(‘-view_count’)[:4]，通过order_by把view_count降序排序，并选取前4条数据。</p><p>注意此处我们用了VideoQuerySet查询器，需要我们在Video下面添加一行依赖。表示用VideoQuerySet作为Video的查询管理器。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">objects <span class="token operator">=</span> VideoQuerySet<span class="token punctuation">.</span>as_manager<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当模板拿到数据后，即可渲染显示。这里我们将推荐侧栏的代码封装到templates/video/recommend.html里面。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"># templates/video/recommend.html&#123;% load thumbnail %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video-side-title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>推荐列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui unstackable divided items<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &#123;% for item in recommend_list %&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui tiny image<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            &#123;% thumbnail item.cover "300x200" crop="center" as im %&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui image<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123; im.url &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            &#123;% empty %&#125;            &#123;% endthumbnail %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>middle aligned content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> header-title<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>video:detail<span class="token punctuation">'</span> item.pk %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; item.title &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>meta<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; item.view_count &#125;&#125;次观看<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    &#123;% empty %&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>暂无推荐<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    &#123;% endfor %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并在detail.html中将它包含进来</p><pre><code>&#123;% include "video/recommend.html" %&#125;</code></pre><p>##评论功能</p><p>评论区位于详情页下侧，显示效果如下。共分为两个部分：评论form和评论列表。</p><p>评论功能是一个独立的模块，该功能通用性较高，在其他很多网站中都有评论功能，</p><p>为了避免以后开发其他网站时重复造轮子，我们建立一个新的应用，命名为comment</p><pre class="line-numbers language-shell" data-language="shell"><div class="caption"><span>script</span></div><code class="language-shell">python3 manage.py startapp comment<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来，我们创建comment模型</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 位于comment/models.py</span><span class="token keyword">class</span> <span class="token class-name">Comment</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    user <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>settings<span class="token punctuation">.</span>AUTH_USER_MODEL<span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">)</span>    nickname <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    avatar <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    video <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>Video<span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">)</span>    content <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>    timestamp <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>auto_now_add<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>     <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        db_table <span class="token operator">=</span> <span class="token string">"v_comment"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>user 用户。数据类型是ForeignKey，外键是settings.AUTH_USER_MODEL，并设置为级联删除on_delete=models.CASCADEnickname 用户昵称。数据类型是CharField。avatar 头像。数据类型是CharField。video 对应的视频。数据类型是ForeignKey，对应Video模型，级联删除 on_delete=models.CASCADEcontent 评论内容。 数据类型是CharField。timestamp 评论时间。 数据类型是DateTimeField。</code></pre><p>有了模型之后，我们就可以专心写业务代码了，首先在comment下建立路由文件urls.py。并写入代码:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> viewsapp_name <span class="token operator">=</span> <span class="token string">'comment'</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'submit_comment/&lt;int:pk>'</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>submit_comment<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'submit_comment'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'get_comments/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>get_comments<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'get_comments'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们配置了两条路由信息：评论提交 和 获取评论。</p><p>提交评论，需要一个form，我们把form放到video/forms.py</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django <span class="token keyword">import</span> forms<span class="token keyword">from</span> comment<span class="token punctuation">.</span>models <span class="token keyword">import</span> Comment<span class="token keyword">class</span> <span class="token class-name">CommentForm</span><span class="token punctuation">(</span>forms<span class="token punctuation">.</span>ModelForm<span class="token punctuation">)</span><span class="token punctuation">:</span>    content <span class="token operator">=</span> forms<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>error_messages<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'required'</span><span class="token punctuation">:</span> <span class="token string">'不能为空'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        widget<span class="token operator">=</span>forms<span class="token punctuation">.</span>Textarea<span class="token punctuation">(</span>attrs <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'placeholder'</span><span class="token punctuation">:</span> <span class="token string">'请输入评论内容'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Comment        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在video/views.py的VideoDetailView下添加form的相关代码。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">VideoDetailView</span><span class="token punctuation">(</span>generic<span class="token punctuation">.</span>DetailView<span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> Video    template_name <span class="token operator">=</span> <span class="token string">'video/detail.html'</span>    <span class="token keyword">def</span> <span class="token function">get_object</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> queryset<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        obj <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_object<span class="token punctuation">(</span><span class="token punctuation">)</span>        obj<span class="token punctuation">.</span>increase_view_count<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> obj    <span class="token keyword">def</span> <span class="token function">get_context_data</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        context <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span>VideoDetailView<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>get_context_data<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        form <span class="token operator">=</span> CommentForm<span class="token punctuation">(</span><span class="token punctuation">)</span>         context<span class="token punctuation">[</span><span class="token string">'form'</span><span class="token punctuation">]</span> <span class="token operator">=</span> form         <span class="token keyword">return</span> context<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在get_context_data()函数里面，我们把form传递给模板。</p><p>同样的，提交评论也是异步的，我们用ajax实现，我们打开static/js/detail.js，写入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 提交评论</span><span class="token keyword">var</span> frm <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#comment_form'</span><span class="token punctuation">)</span>frm<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        type<span class="token operator">:</span> frm<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'method'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        url<span class="token operator">:</span> frm<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'action'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        dataType<span class="token operator">:</span><span class="token string">'json'</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> frm<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> code <span class="token operator">=</span> data<span class="token punctuation">.</span>code            <span class="token keyword">var</span> msg <span class="token operator">=</span> data<span class="token punctuation">.</span>msg            <span class="token keyword">if</span><span class="token punctuation">(</span>code <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#id_content'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.comment-list'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prepend</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#comment-result'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"评论成功"</span><span class="token punctuation">)</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.info'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeOut</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#comment-result'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.info'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeOut</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>评论通过ajax提交后，我们在submit_comment()中就能接收到这个请求。处理如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">submit_comment</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>pk<span class="token punctuation">)</span><span class="token punctuation">:</span>    video <span class="token operator">=</span> get_object_or_404<span class="token punctuation">(</span>Video<span class="token punctuation">,</span> pk <span class="token operator">=</span> pk<span class="token punctuation">)</span>    form <span class="token operator">=</span> CommentForm<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>    <span class="token keyword">if</span> form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        new_comment <span class="token operator">=</span> form<span class="token punctuation">.</span>save<span class="token punctuation">(</span>commit<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        new_comment<span class="token punctuation">.</span>user <span class="token operator">=</span> request<span class="token punctuation">.</span>user        new_comment<span class="token punctuation">.</span>nickname <span class="token operator">=</span> request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>nickname        new_comment<span class="token punctuation">.</span>avatar <span class="token operator">=</span> request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>avatar        new_comment<span class="token punctuation">.</span>video <span class="token operator">=</span> video        new_comment<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        data<span class="token punctuation">[</span><span class="token string">'nickname'</span><span class="token punctuation">]</span> <span class="token operator">=</span> request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>nickname        data<span class="token punctuation">[</span><span class="token string">'avatar'</span><span class="token punctuation">]</span> <span class="token operator">=</span> request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>avatar        data<span class="token punctuation">[</span><span class="token string">'timestamp'</span><span class="token punctuation">]</span> <span class="token operator">=</span> datetime<span class="token punctuation">.</span>fromtimestamp<span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>timestamp<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span> <span class="token operator">=</span> new_comment<span class="token punctuation">.</span>content        comments <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        comments<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        html <span class="token operator">=</span> render_to_string<span class="token punctuation">(</span>            <span class="token string">"comment/comment_single.html"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"comments"</span><span class="token punctuation">:</span> comments<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"code"</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"html"</span><span class="token punctuation">:</span> html<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"code"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'msg'</span><span class="token punctuation">:</span><span class="token string">'评论失败!'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在接收函数中，通过form自带的验证函数来保存记录，然后将这条记录返回到前端模板。</p><p>下面我们开始评论列表的开发。</p><p>评论列表部分，我们使用了的是上拉动态加载的方案，即当页面拉到最下侧时，js加载代码会自动的获取下一页的数据并显示出来。</p><p>前端部分，我们使用了一种基于js的开源加载插件。基于这个插件，可以很容易实现网页的上拉动态加载效果。</p><p>它使用超级简单，仅需要调用$(’.comments’).dropload({})即可。我们把调用的代码封装在static/js/load_comments.js里面。</p><p>完整的调用代码如下：</p><pre class="line-numbers language-none"><code class="language-none">$(function()&#123;    &#x2F;&#x2F; 页数    var page &#x3D; 0;    &#x2F;&#x2F; 每页展示15个    var page_size &#x3D; 15;    &#x2F;&#x2F; dropload    $(&#39;.comments&#39;).dropload(&#123;        scrollArea : window,        loadDownFn : function(me)&#123;            page++;            $.ajax(&#123;                type: &#39;GET&#39;,                url: comments_url,                data:&#123;                     video_id: video_id,                     page: page,                     page_size: page_size                &#125;,                dataType: &#39;json&#39;,                success: function(data)&#123;                    var code &#x3D; data.code                    var count &#x3D; data.comment_count                    if(code &#x3D;&#x3D; 0)&#123;                        $(&#39;#id_comment_label&#39;).text(count + &quot;条评论&quot;);                        $(&#39;.comment-list&#39;).append(data.html);                        me.resetload();                    &#125;else&#123;                        me.lock();                        me.noData();                        me.resetload();                    &#125;                &#125;,                error: function(xhr, type)&#123;                    me.resetload();                &#125;            &#125;);        &#125;    &#125;);&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不用过多的解释，这段代码已经非常非常清晰了，本质还是ajax的接口请求调用，调用后返回结果更新前端网页内容。</p><p>我们看到ajax调用的接口是get_comments，我们继续来实现它，它位于comment/views.py中。<br>代码如下所示，当获取到page和page_size后，使用paginator对象来实现分页。最后通过render_to_string将html传递给模板。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">comment<span class="token operator">/</span>view<span class="token punctuation">.</span>py<span class="token keyword">def</span> <span class="token function">get_comments</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> request<span class="token punctuation">.</span>is_ajax<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> HttpResponseBadRequest<span class="token punctuation">(</span><span class="token punctuation">)</span>    page <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'page'</span><span class="token punctuation">)</span>    page_size <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'page_size'</span><span class="token punctuation">)</span>    video_id <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'video_id'</span><span class="token punctuation">)</span>    video <span class="token operator">=</span> get_object_or_404<span class="token punctuation">(</span>Video<span class="token punctuation">,</span> pk<span class="token operator">=</span>video_id<span class="token punctuation">)</span>    comments <span class="token operator">=</span> video<span class="token punctuation">.</span>comment_set<span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'-timestamp'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    comment_count <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>comments<span class="token punctuation">)</span>    paginator <span class="token operator">=</span> Paginator<span class="token punctuation">(</span>comments<span class="token punctuation">,</span> page_size<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        rows <span class="token operator">=</span> paginator<span class="token punctuation">.</span>page<span class="token punctuation">(</span>page<span class="token punctuation">)</span>    <span class="token keyword">except</span> PageNotAnInteger<span class="token punctuation">:</span>        rows <span class="token operator">=</span> paginator<span class="token punctuation">.</span>page<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> EmptyPage<span class="token punctuation">:</span>        rows <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        code <span class="token operator">=</span> <span class="token number">0</span>        html <span class="token operator">=</span> render_to_string<span class="token punctuation">(</span>            <span class="token string">"comment/comment_single.html"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"comments"</span><span class="token punctuation">:</span> rows<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        code <span class="token operator">=</span> <span class="token number">1</span>        html <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token string">"code"</span><span class="token punctuation">:</span>code<span class="token punctuation">,</span>        <span class="token string">"html"</span><span class="token punctuation">:</span> html<span class="token punctuation">,</span>        <span class="token string">"comment_count"</span><span class="token punctuation">:</span> comment_count    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>##列表页面跳转<br>在首页里面已经加载了视频内容，现在还没有点击挑战到详情页，现在加上</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>video:detail<span class="token punctuation">'</span> item.pk %&#125;<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>               &#123;% thumbnail item.cover "300x200" crp="center" as im %&#125;               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui image<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123; im.url &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               &#123;% empty %&#125;               &#123;% endthumbnail %&#125;               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>large play icon v-play-icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>video:detail<span class="token punctuation">'</span> item.pk %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; item.title &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>meta<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>发布于&#123;&#123; item.created_time|time_since&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                   &#123;&#123; item.view_count&#125;&#125;次观看               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和recommend页面一样，通过 video:detail 方法组合调用detail方法，访问到详情页面</p>]]></content>
      
      
      <categories>
          
          <category> Django视频网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django视频网站搭建--step06个人中心功能</title>
      <link href="/post/django-shi-pin-wang-zhan-da-jian/step06-ge-ren-zhong-xin-gong-neng/"/>
      <url>/post/django-shi-pin-wang-zhan-da-jian/step06-ge-ren-zhong-xin-gong-neng/</url>
      
        <content type="html"><![CDATA[<p>#个人中心功能<br>从本讲起，我们开始个人中心功能的开发。个人中心里面包括以下几个部分</p><ul><li>个人资料</li><li>修改密码</li><li>订阅设置</li><li>意见反馈</li></ul><p>通过这部分的开发，我们将会接触到更多django的用法。</p><p>##整体功能</p><p>个人中心模块是对用户的信息进行展示并可以编辑。</p><p>其中个人资料、修改密码、订阅设置是对用户信息的编辑，反馈建议是属于创建新数据。<br>##个人资料</p><p>这里主要是对个人资料进行编辑，先显示用户原有的信息，</p><p>然后用户即可对其进行修改并保存，对于编辑功能，django有自己的解决方案，</p><p>即通过通用视图类UpdateView对模型进行更改。关于Update的介绍，同学们可查阅官网介绍</p><p>因为前面已经建立过user模型，所以这里就不用再次建立了，我们直接使用之前的user模型即可。<br>###建立form<br>首先需要新建一张form来存放个人信息，它和userprofile中的User model差不多，但这里时一个form</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#userprofile/forms.py</span><span class="token keyword">from</span> django <span class="token keyword">import</span> forms<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token comment"># 头像大小，这里只是限制图片大小，后面可以直接修改其大小</span><span class="token keyword">def</span> <span class="token function">avatar_file_size</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>    limit <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span>    <span class="token keyword">if</span> value<span class="token punctuation">.</span>size <span class="token operator">></span> limit<span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValidationError<span class="token punctuation">(</span><span class="token string">'头像文件太大了，请限制在2M之内'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">ProfileForm</span><span class="token punctuation">(</span>forms<span class="token punctuation">.</span>ModelForm<span class="token punctuation">)</span><span class="token punctuation">:</span>    nickname <span class="token operator">=</span> forms<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>min_length<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>                               max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>                               required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                               error_messages<span class="token operator">=</span><span class="token punctuation">&#123;</span>                                   <span class="token string">'min_length'</span><span class="token punctuation">:</span> <span class="token string">'昵称至少4个字符'</span><span class="token punctuation">,</span>                                   <span class="token string">'min_length'</span><span class="token punctuation">:</span> <span class="token string">'昵称不能多于20个字符'</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                               widget<span class="token operator">=</span>forms<span class="token punctuation">.</span>TextInput<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    avatar <span class="token operator">=</span> forms<span class="token punctuation">.</span>ImageField<span class="token punctuation">(</span>required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> validators<span class="token operator">=</span><span class="token punctuation">[</span>avatar_file_size<span class="token punctuation">]</span><span class="token punctuation">,</span>                              widget<span class="token operator">=</span>forms<span class="token punctuation">.</span>FileInput<span class="token punctuation">(</span>attrs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'n'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    email <span class="token operator">=</span> forms<span class="token punctuation">.</span>EmailField<span class="token punctuation">(</span>required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                             error_messages<span class="token operator">=</span><span class="token punctuation">&#123;</span>                                 <span class="token string">'invalid'</span><span class="token punctuation">:</span> <span class="token string">'请输入有效的Email地址'</span><span class="token punctuation">,</span>                             <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                             widget<span class="token operator">=</span>forms<span class="token punctuation">.</span>EmailInput<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    gender <span class="token operator">=</span> forms<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>min_length<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>max_length<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                             widget<span class="token operator">=</span>forms<span class="token punctuation">.</span>HiddenInput<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    mobile <span class="token operator">=</span> forms<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>min_length<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span>max_length<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span>required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                             error_messages<span class="token operator">=</span><span class="token punctuation">&#123;</span>                                 <span class="token string">'min_length'</span><span class="token punctuation">:</span> <span class="token string">'请输入11位手机号'</span><span class="token punctuation">,</span>                                 <span class="token string">'max_length'</span><span class="token punctuation">:</span> <span class="token string">'请输入11位手机号'</span><span class="token punctuation">,</span>                             <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                             widget<span class="token operator">=</span>forms<span class="token punctuation">.</span>NumberInput<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> User        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'nickname'</span><span class="token punctuation">,</span> <span class="token string">'avatar'</span><span class="token punctuation">,</span> <span class="token string">'email'</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">,</span> <span class="token string">'mobile'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里对头像图片做了一个限制,主要时限制其尺寸，目前先这样限制，后面有时间会把这里修改一下，直接把上传的图片进行缩放或者放大，弄成统一尺寸</p><p>其他各个字段也有对应的限制规则</p><p>##更新路由表</p><p>其次我们做的就是在users/urls.py中添加个人资料的路由，</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># users/urls.py</span>path<span class="token punctuation">(</span><span class="token string">'profile/&lt;int:pk>/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>ProfileView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'profile'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以看到，这里我们需要传一个int参数做为主键，并传递给视图类ProfileView。<br>###更新视图<br>下面我们转向ProfileView，它的写法超级简单</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>mixins <span class="token keyword">import</span> LoginRequiredMixin<span class="token keyword">from</span> utils<span class="token punctuation">.</span>video_helpers <span class="token keyword">import</span> AuthorRequiredMixin<span class="token keyword">from</span> django<span class="token punctuation">.</span>views <span class="token keyword">import</span> generic<span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> messages<span class="token keyword">class</span> <span class="token class-name">ProfileView</span><span class="token punctuation">(</span>LoginRequiredMixin<span class="token punctuation">,</span>AuthorRequiredMixin<span class="token punctuation">,</span> generic<span class="token punctuation">.</span>UpdateView<span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> User    form_class <span class="token operator">=</span> ProfileForm    template_name <span class="token operator">=</span> <span class="token string">'users/profile.html'</span>    <span class="token keyword">def</span> <span class="token function">get_success_url</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        messages<span class="token punctuation">.</span>success<span class="token punctuation">(</span>self<span class="token punctuation">.</span>request<span class="token punctuation">,</span> <span class="token string">"保存成功"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> reverse<span class="token punctuation">(</span><span class="token string">'userprofile:profile'</span><span class="token punctuation">,</span> kwargs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'pk'</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>pk<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里继承了UpdateView来实现更新操作，和DetailView类似，我们这里也设置了model和template_name 还有form_class。</p><p>当更新成功后，django会回调get_success_url来将结果告诉模板，因此我们可以在get_success_url里面做一些定制的工作，我们可以传一些自己的参数。</p><p>简单的几行代码，就实现了个人资料的更新，再次彰显了django框架的强大。</p><p>可以看到我们还继承了LoginRequiredMixin和AuthorRequiredMixin两个类，这两个类属于公共类，</p><p>其中LoginRequiredMixin的用途是：只允许登录的用户访问该视图类，</p><p>AuthorRequiredMixin的用途是：只允许用户自己查看自己的个人资料，别人是无法查看的。</p><p>其中AuthorRequiredMixin的代码位于videoproject/utils/helpers.py。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> PermissionDenied<span class="token comment"># 只允许用户自己查看自己的个人资料，别人是无法查看的</span><span class="token keyword">class</span> <span class="token class-name">AuthorRequiredMixin</span><span class="token punctuation">(</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        obj <span class="token operator">=</span> self<span class="token punctuation">.</span>get_object<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> obj <span class="token operator">!=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>user<span class="token punctuation">:</span>            <span class="token keyword">raise</span> PermissionDenied        <span class="token keyword">return</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>dispatch<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前端代码最后统一再讲</p><p>##修改密码</p><p>同样的，修改密码也是属于更新操作。</p><p>模型当然是用user模型，不必再建。<br>###更新路由<br>我们先添加路由</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">path<span class="token punctuation">(</span><span class="token string">'change_password/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>change_password<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'change_password'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>###添加form<br>新增一个改密码的表单</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># userprofile/forms.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>forms <span class="token keyword">import</span> PasswordChangeForm<span class="token comment"># 改密码</span><span class="token keyword">class</span> <span class="token class-name">ChangePwdForm</span><span class="token punctuation">(</span>PasswordChangeForm<span class="token punctuation">)</span><span class="token punctuation">:</span>    old_password <span class="token operator">=</span> forms<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>error_messages<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'required'</span><span class="token punctuation">:</span> <span class="token string">'不能为空'</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                                   widget<span class="token operator">=</span>forms<span class="token punctuation">.</span>PasswordInput<span class="token punctuation">(</span>attrs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'placeholder'</span><span class="token punctuation">:</span> <span class="token string">'请输入旧密码'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    new_password1 <span class="token operator">=</span> forms<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>error_messages<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'required'</span><span class="token punctuation">:</span> <span class="token string">'不能为空'</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                                    widget<span class="token operator">=</span>forms<span class="token punctuation">.</span>PasswordInput<span class="token punctuation">(</span>attrs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'placeholder'</span><span class="token punctuation">:</span> <span class="token string">'请输入新密码'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    new_password2 <span class="token operator">=</span> forms<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>error_messages<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'required'</span><span class="token punctuation">:</span> <span class="token string">'不能为空'</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                                    widget<span class="token operator">=</span>forms<span class="token punctuation">.</span>PasswordInput<span class="token punctuation">(</span>attrs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'placeholder'</span><span class="token punctuation">:</span> <span class="token string">'请输入确认密码'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>###添加视图函数<br>修改密码比较特殊，需要对密码进行特殊处理，因此我们通过视图函数change_password来手写代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># userprofile/views.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth <span class="token keyword">import</span> update_session_auth_hash<span class="token keyword">from</span> <span class="token punctuation">.</span>forms <span class="token keyword">import</span> ChangePwdForm<span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> messages<span class="token comment"># 修改密码</span><span class="token keyword">def</span> <span class="token function">change_password</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        form <span class="token operator">=</span> ChangePwdForm<span class="token punctuation">(</span>request<span class="token punctuation">.</span>user<span class="token punctuation">,</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>        <span class="token keyword">if</span> form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            user <span class="token operator">=</span> form<span class="token punctuation">.</span>save<span class="token punctuation">(</span>commit<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> user<span class="token punctuation">.</span>is_staff <span class="token keyword">and</span> <span class="token keyword">not</span> user<span class="token punctuation">.</span>is_superuser<span class="token punctuation">:</span>                user<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>                update_session_auth_hash<span class="token punctuation">(</span>request<span class="token punctuation">,</span> user<span class="token punctuation">)</span>  <span class="token comment"># 更新session 非常重要！</span>                messages<span class="token punctuation">.</span>success<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'修改成功'</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'userprofile:change_password'</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                messages<span class="token punctuation">.</span>warning<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'无权修改管理员密码'</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'userprofile:change_password'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>form<span class="token punctuation">.</span>errors<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        form <span class="token operator">=</span> ChangePwdForm<span class="token punctuation">(</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span>                  <span class="token string">'registration/change_password.html'</span><span class="token punctuation">,</span>                  <span class="token punctuation">&#123;</span><span class="token string">'form'</span><span class="token punctuation">:</span> form<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当拿到form之后，通过验证form合法性，然后调用user.save()来保存修改。<br>然后通过update_session_auth_hash来更新session, 密码更改之后一定要更新会话。</p><p>这样就实现了修改密码功能。</p><p>##订阅设置</p><p>很多网站都有订阅设置功能，当用户订阅了网站内容之后，网站有了新内容，向订阅用户推送相关内容。<br>###添加表单<br>订阅功能也需要添加表单</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># userprofile/forms.py</span><span class="token keyword">class</span> <span class="token class-name">SubscribeForm</span><span class="token punctuation">(</span>forms<span class="token punctuation">.</span>ModelForm<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> User        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'subscribe'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>###路由设置<br>我们先在users/urls.py下添加订阅功能的路由</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">path<span class="token punctuation">(</span><span class="token string">'subscribe/&lt;int:pk>/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>SubscribeView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'subscribe'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们设置的订阅视图类为SubscribeView，因为订阅的功能和修改个人资料功能类似，也是属于更新操作，所以同样是使用UpdateView来更新。<br>###添加视图</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># userprofile/views.py</span><span class="token keyword">class</span> <span class="token class-name">SubscribeView</span><span class="token punctuation">(</span>LoginRequiredMixin<span class="token punctuation">,</span>AuthorRequiredMixin<span class="token punctuation">,</span> generic<span class="token punctuation">.</span>UpdateView<span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> User    form_class <span class="token operator">=</span> SubscribeForm    template_name <span class="token operator">=</span> <span class="token string">'users/subscribe.html'</span>    <span class="token keyword">def</span> <span class="token function">get_success_url</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        messages<span class="token punctuation">.</span>success<span class="token punctuation">(</span>self<span class="token punctuation">.</span>request<span class="token punctuation">,</span> <span class="token string">"保存成功"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> reverse<span class="token punctuation">(</span><span class="token string">'userprofile:subscribe'</span><span class="token punctuation">,</span> kwargs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'pk'</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>pk<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>订阅功能实现和Profile的实现有点类似<br>##反馈与建议<br>###添加model<br>这里我们需要在users/models.py下新建一个反馈表，命名为Feedback，</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Feedback</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    contact <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span>    timestamp <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>auto_now_add<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        db_table <span class="token operator">=</span> <span class="token string">"v_feedback"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该表一共有3个字段，分别是</p><pre><code>contact 联系方式content 内容timestamp 时间</code></pre><p>###添加表单<br>写完model之后，还需要添加表单类</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># userprofile/forms.py</span><span class="token keyword">class</span> <span class="token class-name">FeedbackForm</span><span class="token punctuation">(</span>forms<span class="token punctuation">.</span>ModelForm<span class="token punctuation">)</span><span class="token punctuation">:</span>    content <span class="token operator">=</span> forms<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>min_length<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>                              max_length<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span>                              error_messages<span class="token operator">=</span><span class="token punctuation">&#123;</span>                                   <span class="token string">'min_length'</span><span class="token punctuation">:</span> <span class="token string">'至少4个字符'</span><span class="token punctuation">,</span>                                   <span class="token string">'max_length'</span><span class="token punctuation">:</span> <span class="token string">'不能多于200个字符'</span><span class="token punctuation">,</span>                                   <span class="token string">'required'</span><span class="token punctuation">:</span> <span class="token string">'内容不能为空'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                              widget<span class="token operator">=</span>forms<span class="token punctuation">.</span>Textarea<span class="token punctuation">(</span>attrs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'placeholder'</span><span class="token punctuation">:</span> <span class="token string">'请输入内容'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    contact <span class="token operator">=</span> forms<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                              widget<span class="token operator">=</span>forms<span class="token punctuation">.</span>TextInput<span class="token punctuation">(</span>attrs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'placeholder'</span><span class="token punctuation">:</span> <span class="token string">'请输入联系方式'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Feedback        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">,</span> <span class="token string">'contact'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写完model之后，我们就能写业务代码了。<br>###设置路由<br>先添加路由</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">path<span class="token punctuation">(</span><span class="token string">'feedback/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>FeedbackView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'feedback'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们设置路由指向FeedbackView视图类。<br>###视图业务<br>我们直接贴出FeedbackView的代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># userprofile/views.py</span><span class="token keyword">from</span> ratelimit<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> ratelimit<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>mixins <span class="token keyword">import</span> LoginRequiredMixin<span class="token keyword">from</span> django<span class="token punctuation">.</span>views <span class="token keyword">import</span> generic<span class="token keyword">class</span> <span class="token class-name">FeedbackView</span><span class="token punctuation">(</span>LoginRequiredMixin<span class="token punctuation">,</span> generic<span class="token punctuation">.</span>CreateView<span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> Feedback    form_class <span class="token operator">=</span> FeedbackForm    template_name <span class="token operator">=</span> <span class="token string">'users/feedback.html'</span>    <span class="token decorator annotation punctuation">@ratelimit</span><span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token string">'ip'</span><span class="token punctuation">,</span> rate<span class="token operator">=</span><span class="token string">'2/m'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        was_limited <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'limited'</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> was_limited<span class="token punctuation">:</span>            messages<span class="token punctuation">.</span>warning<span class="token punctuation">(</span>self<span class="token punctuation">.</span>request<span class="token punctuation">,</span> <span class="token string">"操作太频繁了，请1分钟后再试"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'userprofile/feedback.html'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'form'</span><span class="token punctuation">:</span> FeedbackForm<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>post<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_success_url</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        messages<span class="token punctuation">.</span>success<span class="token punctuation">(</span>self<span class="token punctuation">.</span>request<span class="token punctuation">,</span> <span class="token string">"提交成功"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> reverse<span class="token punctuation">(</span><span class="token string">'userprofile:feedback'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们看到这个地方继承的是CreateView类，该类属于新建通用视图类。只要我们配置好model、form_class、template_name，django就自动为我们创建记录。</p><p>另外，我们还使用了一种限流量的技术：ratelimit。这是一个第三方类库，通过使用他，可以防止恶意提交数据。它使用超级简单，只需要配置好key和rate即可，key代表业务，rate代表速率，这里我们设置key为ip，即限制ip地址，rate为’2/m’，表示每分钟限制请求2次。超过2次就提示用户操作频繁。</p><p>这样我们就完美的实现了用户反馈。</p><p>##前端业务<br>前端主要修改或添加这些内容</p><pre class="line-numbers language-none"><code class="language-none">── base│   ├── base.html│   ├── header.html│   ├── left_nav.html│   ├── menu.html│   └── page_nav.html├── registration|   └── change_password.html└── ── users    ├── feedback.html    ├── profile.html    └── subscribe.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从base里面就有加载header,header 加载menu,而menu页面就是加载个人信息的页面</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&#123;% if user.is_authenticated %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui inline dropdown<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>v-header-avatar<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span>inline-block<span class="token punctuation">;</span><span class="token property">font-weight</span><span class="token punctuation">:</span>bold<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>        &#123;% thumbnail user.avatar "200x200" crop="center" as im %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui avatar image<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123; im.url &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        &#123;% empty %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui avatar image<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% static <span class="token punctuation">'</span>img/img_default_avatar.png<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        &#123;% endthumbnail %&#125;        &#123;&#123; user.username &#125;&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dropdown icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript">window<span class="token punctuation">.</span>location<span class="token operator">=</span><span class="token string">'&#123;% url '</span>userprofile<span class="token operator">:</span>profile<span class="token string">' user.pk %&#125;'</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>个人资料<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript">window<span class="token punctuation">.</span>location<span class="token operator">=</span><span class="token string">'&#123;% url '</span>userprofile<span class="token operator">:</span>profile<span class="token string">' user.pk %&#125;'</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bookmark icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>我的收藏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript">window<span class="token punctuation">.</span>location<span class="token operator">=</span><span class="token string">'&#123;% url '</span>userprofile<span class="token operator">:</span>profile<span class="token string">' user.pk %&#125;'</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>heart icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>我的喜欢<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript">window<span class="token punctuation">.</span>location<span class="token operator">=</span><span class="token string">'&#123;% url '</span>userprofile<span class="token operator">:</span>logout<span class="token string">' %&#125;'</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sign-out icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>退出<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>&#123;% else %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui tiny secondary basic button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>v-header-login<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>userprofile:login<span class="token punctuation">'</span> %&#125;?next=&#123;&#123; request.path &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>&#123;% endif %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果用户登录的话，就能看到用户头像，点击显示下拉菜单，里面有个人资料，(我的收藏，我的喜欢, 这两个功能后面实现) 退出功能<br>用户没登录的话，就显示登录2字<br>点击个人资料能跳转到新的页面</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&#123;% extends 'base/base.html' %&#125;&#123;% load static %&#125;&#123;% load thumbnail %&#125;&#123;% block content %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>v-settings<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui two column grid <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>four wide column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            &#123;% include "base/left_nav.html" %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>twelve wide column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>v-settings-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui form<span class="token punctuation">"</span></span> <span class="token attr-name">novalidate</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>userprofile:profile<span class="token punctuation">'</span> form.instance.pk %&#125;<span class="token punctuation">"</span></span>                      <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    &#123;% csrf_token %&#125;                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sixteen wide inline field v-form-field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>头像<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>v-inline-middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id_avatar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                &#123;% thumbnail user.avatar "200x200" crop="center" as im %&#125;                                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui mini circular image<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123; im.url &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                &#123;% empty %&#125;                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui mini circular  image<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% static <span class="token punctuation">'</span>img/img_default_avatar.png<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                &#123;% endthumbnail %&#125;                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                            &#123;&#123;form.avatar&#125;&#125;                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file_is_choose<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>n<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文件已选择<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sixteen wide inline field v-form-field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>昵称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                        &#123;&#123;form.nickname&#125;&#125;                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sixteen wide inline field v-form-field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>Email<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                        &#123;&#123;form.email&#125;&#125;                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sixteen wide inline field v-form-field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>手机号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                        &#123;&#123;form.mobile&#125;&#125;                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sixteen wide inline field v-form-field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui selection  dropdown<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            &#123;&#123;form.gender&#125;&#125;                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dropdown icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>default text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>请选择<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">data-value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>M<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">data-value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>F<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui primary button<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>保存<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                    &#123;% include "base/form_errors.html" %&#125;                    &#123;% include "base/form_messages.html" %&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>&#123;% endblock content %&#125;&#123;% block script %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.ui .dropdown'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dropdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#id_avatar"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#file_is_choose"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% static <span class="token punctuation">'</span>js/left_nav.js<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>&#123;% endblock script %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个页面有几点注意</p><ul><li>1.继承base页面</li><li>2.包含 <code>&#123;% include "base/left_nav.html" %&#125;</code>，即把菜单单独拿出来，点击跳转,<br>  通过最下面的<code>&lt;script src=&quot;&#123;% static 'js/left_nav.js' %&#125;&quot;&gt;&lt;/script&gt;</code>加载新的页面</li><li>3.性别选择这里通过调用下来菜单选择，下拉菜单的调用是通过js实现的</li></ul><p>然后其他几个页面类似<br>##其他<br>订阅设置可能需要设置邮箱，这里就没设置，后面再完善</p>]]></content>
      
      
      <categories>
          
          <category> Django视频网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django综合篇之添加xadmin功能</title>
      <link href="/post/django-quan-wang-zhan-da-jian/django-zong-he-pian-zhi-tian-jia-xadmin-gong-neng/"/>
      <url>/post/django-quan-wang-zhan-da-jian/django-zong-he-pian-zhi-tian-jia-xadmin-gong-neng/</url>
      
        <content type="html"><![CDATA[<p>#添加xadmin功能</p><p>django2.0,以及django3.0直接使用xadmin功能已经不太友好了<br>如果直接使用pip的方式安装 django-xadmin会遇到很多错误的坑<br>这里使用一个新的方式添加xadmin功能<br>##下载文件<br>在这里<a href="https://gitee.com/voldemort/xadmin-django3/tree/master">https://gitee.com/voldemort/xadmin-django3/tree/master</a> 我们需要的xadmin内容</p><p>下载之后只使用xadmin这个文件夹<br>将整个文件夹复制 然后在自己的项目文件夹下新建文件夹 extra_apps,然后xadmin粘贴过来</p><p>同时需要安装</p><pre><code>django-crispy-forms==1.8.1django-import-export==2.0.2django-reversion==3.0.7django-formtools==2.2.0future==0.18.2httplib2==0.9.2six==1.14.0</code></pre><p>上面标注的版本,最好是大于等于其版本<br>DjangoUEditor是根据老的xadmin新添加的功能</p><pre class="line-numbers language-none"><code class="language-none">##添加到项目中settings.py下新增&#96;&#96;&#96;pythonimport syssys.path.insert(0,os.path.join(BASE_DIR,&#39;extra_apps&#39;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样我们的项目就可以访问到xadmin了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'django.contrib.admin'</span><span class="token punctuation">,</span><span class="token comment">#管理网站</span>    <span class="token string">'django.contrib.auth'</span><span class="token punctuation">,</span><span class="token comment">#认证模块</span>    <span class="token string">'django.contrib.contenttypes'</span><span class="token punctuation">,</span><span class="token comment">#内部框架</span>    <span class="token string">'django.contrib.sessions'</span><span class="token punctuation">,</span><span class="token comment">#会话管理</span>    <span class="token string">'django.contrib.messages'</span><span class="token punctuation">,</span><span class="token comment">#消息框架</span>    <span class="token string">'django.contrib.staticfiles'</span><span class="token punctuation">,</span><span class="token comment">#映射的静态资源</span>    <span class="token string">'xadmin'</span><span class="token punctuation">,</span>                   <span class="token comment"># xadmin　　相关</span>    <span class="token string">'crispy_forms'</span><span class="token punctuation">,</span>             <span class="token comment"># xadmin　　相关</span>    <span class="token string">'DjangoUeditor'</span><span class="token punctuation">,</span>            <span class="token comment"># xadmin　　内的富文本编辑器</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将xadmin添加到项目中,毕竟他也是一个新的app,同时添加的还有crispy_forms</p><p>##添加路由<br>urls.py中新增路由</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include<span class="token keyword">import</span> xadmin    <span class="token comment"># 富文本相关url</span>    path<span class="token punctuation">(</span><span class="token string">'xadmin/'</span><span class="token punctuation">,</span> xadmin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>                      <span class="token comment"># xadmin相关</span>    path<span class="token punctuation">(</span><span class="token string">'ueditor/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'DjangoUeditor.urls'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment"># 富文本编辑器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>##将自己的app注册到xadmin<br>在admin.py同级目录下建立adminx.py,配置格式如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> xadmin<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment"># Register your models here.</span><span class="token keyword">import</span> xadmin<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> xadmin <span class="token keyword">import</span> views<span class="token comment"># 此类可以定义admin后台显示的字段，比如文章列表显示标题，创建时间，</span><span class="token keyword">class</span> <span class="token class-name">BlogAdmin</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""博客文章"""</span>    <span class="token comment"># 展示的字段</span>    list_display <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'title'</span><span class="token punctuation">,</span> <span class="token string">'excerpt'</span><span class="token punctuation">,</span> <span class="token string">'read_num'</span><span class="token punctuation">,</span> <span class="token string">'appreciate'</span><span class="token punctuation">,</span>                    <span class="token string">'created_time'</span><span class="token punctuation">,</span> <span class="token string">'tags'</span><span class="token punctuation">,</span> <span class="token string">'category'</span><span class="token punctuation">,</span> <span class="token string">'status'</span><span class="token punctuation">]</span>    <span class="token comment"># 按文章名进行搜索</span>    search_fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span>    <span class="token comment"># 筛选</span>    list_filter <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'title'</span><span class="token punctuation">,</span> <span class="token string">'created_time'</span><span class="token punctuation">,</span> <span class="token string">'category'</span><span class="token punctuation">,</span> <span class="token string">'status'</span><span class="token punctuation">]</span>    <span class="token comment"># 修改图标</span>    model_icon <span class="token operator">=</span> <span class="token string">'fa fa-file-text'</span>    <span class="token comment"># 修改默认排序</span>    ordering <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'-id'</span><span class="token punctuation">]</span>    <span class="token comment"># 设置只读字段</span>    readonly_fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'read_num'</span><span class="token punctuation">]</span>    <span class="token comment"># 不显示某一字段</span>    exclude <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">]</span>    list_display_link <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span>    style_fields <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'content'</span><span class="token punctuation">:</span> <span class="token string">'ueditor'</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">CategoryAdmin</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""分类"""</span>    list_display <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'created_time'</span><span class="token punctuation">]</span>    search_fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>    model_icon <span class="token operator">=</span> <span class="token string">'fa fa-file-text'</span><span class="token keyword">class</span> <span class="token class-name">TagAdmin</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""标签"""</span>    list_display <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">]</span>    search_fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>    model_icon <span class="token operator">=</span> <span class="token string">'fa fa-file-text'</span>xadmin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>Blog<span class="token punctuation">,</span> BlogAdmin<span class="token punctuation">)</span>xadmin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>Category<span class="token punctuation">,</span> CategoryAdmin<span class="token punctuation">)</span>xadmin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>Tag<span class="token punctuation">,</span> TagAdmin<span class="token punctuation">)</span><span class="token comment"># 修改xadmin的基础配置</span><span class="token keyword">class</span> <span class="token class-name">BaseSetting</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 允许使用主题</span>    enable_themes <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token comment"># 开启自定义主题</span>    use_bootswatch <span class="token operator">=</span> <span class="token boolean">True</span><span class="token comment"># 修改xadmin的全局配置</span><span class="token keyword">class</span> <span class="token class-name">GlobalSetting</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    site_title <span class="token operator">=</span> <span class="token string">'自己的全站'</span>    site_footer <span class="token operator">=</span> <span class="token string">'2020中自己建立的全站'</span>    <span class="token comment"># Models收起功能</span>    menu_style <span class="token operator">=</span> <span class="token string">'accordion'</span>xadmin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>views<span class="token punctuation">.</span>CommAdminView<span class="token punctuation">,</span> GlobalSetting<span class="token punctuation">)</span>xadmin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>views<span class="token punctuation">.</span>BaseAdminView<span class="token punctuation">,</span> BaseSetting<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>##更新数据库<br>建立与xadmin相关的表,并将表添加到数据库</p><pre><code>python manage.py makemigrationspython manage.py migrate</code></pre><p>##更换xadmin的logo<br>base.py更改源码,换logo</p><pre><code>base.png</code></pre><p>##汉化显示菜单名字</p><p>首先自己定义的model文件中，对于每一个变量，添加参数verbose_name</p><pre><code>author = models.ForeignKey(UserInfo, verbose_name=&#39;作者&#39;, on_delete=models.CASCADE)title = models.CharField(max_length=128, verbose_name=&quot;标题&quot;)</code></pre><p>对于app.py文件做出对应的修改</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>apps <span class="token keyword">import</span> AppConfig<span class="token keyword">class</span> <span class="token class-name">BlogConfig</span><span class="token punctuation">(</span>AppConfig<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'blog'</span>    verbose_name <span class="token operator">=</span> <span class="token string">"博客管理"</span>　　　<span class="token comment">#对应汉化</span>    mean_icon <span class="token operator">=</span> <span class="token string">'fa fa-user'</span>　<span class="token comment"># 添加图标</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后一步，相对应的app下面的__init__.py文件中，添加如下：</p><pre><code>default_app_config = &quot;blog.apps.BlogConfig&quot;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Django全网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django视频网站搭建--step16后台邮件管理</title>
      <link href="/post/django-shi-pin-wang-zhan-da-jian/step16-hou-tai-you-jian-guan-li/"/>
      <url>/post/django-shi-pin-wang-zhan-da-jian/step16-hou-tai-you-jian-guan-li/</url>
      
        <content type="html"><![CDATA[<p>#邮件管理功能</p><p>订阅功能已经实现了：当用户订阅开启订阅功能后，网站会通过后台给用户发送网站最新的一些动向。<br>但是有时候需要关闭推送功能，比如网站邮件做一些调整之类的。</p><p>因此需要灵活的设置发送邮件功能。</p><p>本节来实现这个功能<br>###路由设置</p><p>我们先来写订阅推送的路由，</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -----------------------设置----------------------------</span>path<span class="token punctuation">(</span><span class="token string">'setting/&lt;int:pk>/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>SettingView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'setting'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同时修改myadmin/base.html文件</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui divider<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>myadmin:setting<span class="token punctuation">'</span> 1 %&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>setting<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>设置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将路由设置为 SettingView</p><h2 id="视图设置"><a href="#视图设置" class="headerlink" title="视图设置"></a>视图设置</h2><p> SettingView 的代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 需admin手动添加1条记录</span><span class="token keyword">class</span> <span class="token class-name">SettingView</span><span class="token punctuation">(</span>SuperUserRequiredMixin<span class="token punctuation">,</span> generic<span class="token punctuation">.</span>UpdateView<span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> Setting    form_class <span class="token operator">=</span> SettingForm    template_name <span class="token operator">=</span> <span class="token string">'myadmin/setting.html'</span>    <span class="token keyword">def</span> <span class="token function">get_success_url</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        messages<span class="token punctuation">.</span>success<span class="token punctuation">(</span>self<span class="token punctuation">.</span>request<span class="token punctuation">,</span> <span class="token string">"保存成功"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> reverse<span class="token punctuation">(</span><span class="token string">'myadmin:setting'</span><span class="token punctuation">,</span> kwargs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'pk'</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>kwargs<span class="token punctuation">[</span><span class="token string">'pk'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一个更新视图类，功能和前面的user、video的 update方法类似</p><p>使用model和form_class 向前端传递更新数据<br>##模型表单的创建<br>这里模板Setting和表单SettingForm需要重新创建</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># myadmin/models.py</span><span class="token keyword">class</span> <span class="token class-name">Setting</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    switch_mail <span class="token operator">=</span> models<span class="token punctuation">.</span>BooleanField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        db_table <span class="token operator">=</span> <span class="token string">"v_setting"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个模型只有一个布尔型字段，决定是否开启邮件服务</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SettingForm</span><span class="token punctuation">(</span>forms<span class="token punctuation">.</span>ModelForm<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Setting        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'switch_mail'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>表单内容也很简单</p><h2 id="注册添加数据"><a href="#注册添加数据" class="headerlink" title="注册添加数据"></a>注册添加数据</h2><p>表单创建完毕需要进行数据迁移</p><pre class="line-numbers language-none"><code class="language-none">python3 manage.py makemigrationspython3 manage.py migrate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是现在表单中没有数据，所以两种方法，</p><ul><li>一个直接进行数据库操作，在这个表中插入一条数据</li><li>将模型Settings添加注册到admin后台，通过自带的后台手动添加<br>如果添加到admin后台，不要忘了修改admin文件<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># myadmin/admin.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> myadmin<span class="token punctuation">.</span>models <span class="token keyword">import</span> Settingadmin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>Setting<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>##前端文件<br>现在添加前端文件，就能看到这个功能了,这是一个单选框，保存成功页面简单的提示一下<pre class="line-numbers language-html" data-language="html"><code class="language-html">&#123;% extends 'myadmin/base.html' %&#125;&#123;% load static %&#125;&#123;% load thumbnail %&#125;&#123;% block content %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui grid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>网站设置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui divider<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>v-form-wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui form<span class="token punctuation">"</span></span> <span class="token attr-name">novalidate</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>myadmin:setting<span class="token punctuation">'</span> 1 %&#125;<span class="token punctuation">"</span></span>                  <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                &#123;% csrf_token %&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui checkbox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                      &#123;&#123;form.switch_mail&#125;&#125;                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>开启邮件服务<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui primary button<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>保存<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                &#123;% include "base/form_errors.html" %&#125;                &#123;% include "base/form_messages.html" %&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>&#123;% endblock content %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>##修改发送邮件逻辑<br>前端基本功能实现了，下面实现本节的核心功能</li></ul><p>前端点击已经能实现数据的更新了，现在需要讲这个数据利用起来</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 订阅推送功能</span><span class="token keyword">class</span> <span class="token class-name">SubscribeView</span><span class="token punctuation">(</span>SuperUserRequiredMixin<span class="token punctuation">,</span> generic<span class="token punctuation">.</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>is_superuser<span class="token punctuation">:</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment"># 分组,两个一组，分别发送邮件</span>        email_list <span class="token operator">=</span> <span class="token punctuation">[</span>email_list<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>email_list<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        switch_mail_flag <span class="token operator">=</span> Setting<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>switch_mail   <span class="token comment"># 获取是否发送邮件标志位</span>        <span class="token keyword">if</span> email_list<span class="token punctuation">:</span>            <span class="token keyword">for</span> to_list <span class="token keyword">in</span> email_list<span class="token punctuation">:</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> switch_mail_flag<span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"send email to %s"</span> <span class="token operator">%</span> to_list<span class="token punctuation">)</span>                        send_html_email<span class="token punctuation">(</span>subject<span class="token punctuation">,</span> html_message<span class="token punctuation">,</span> to_list<span class="token punctuation">)</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"邮件服务未开启"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment"># 通知前端服务未开启</span>                <span class="token keyword">except</span> smtplib<span class="token punctuation">.</span>SMTPException <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在发送邮件前，获取switch_mail这个值，根据它的值决定是否发送邮件</p><p>如果服务未开启，通知前端</p>]]></content>
      
      
      <categories>
          
          <category> Django视频网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django视频网站搭建--step15数据总览功能</title>
      <link href="/post/django-shi-pin-wang-zhan-da-jian/step15-shu-ju-zong-lan-gong-neng/"/>
      <url>/post/django-shi-pin-wang-zhan-da-jian/step15-shu-ju-zong-lan-gong-neng/</url>
      
        <content type="html"><![CDATA[<p>#数据总览功能<br>数据总览功能，是对网站中产生的数据进行一个统计，统计出视频数、发布数、用户数、评论数，等等。让管理者对网站数据有一个清晰的认识，做到心中有数。</p><p>在本站中，笔者一共列举了下面几种数据：视频数、发布中<br>未发布、用户数、用户新增、评论数、评论新增，等几项内容。</p><p>我们把所有的数据都封装到了一个函数里面，即 IndexView 它位于后台管理的首页。<br>##路由设置</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">path<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>IndexView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>##视图设置<br>通过IndexView实现视图，IndexView代码如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">IndexView</span><span class="token punctuation">(</span>AdminUserRequiredMixin<span class="token punctuation">,</span> generic<span class="token punctuation">.</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        video_count <span class="token operator">=</span> Video<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get_count<span class="token punctuation">(</span><span class="token punctuation">)</span>        video_has_published_count <span class="token operator">=</span> Video<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get_published_count<span class="token punctuation">(</span><span class="token punctuation">)</span>        video_not_published_count <span class="token operator">=</span> Video<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get_not_published_count<span class="token punctuation">(</span><span class="token punctuation">)</span>        user_count <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>        user_today_count <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>exclude<span class="token punctuation">(</span>date_joined__lt<span class="token operator">=</span>datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>        comment_count <span class="token operator">=</span> Comment<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get_count<span class="token punctuation">(</span><span class="token punctuation">)</span>        comment_today_count <span class="token operator">=</span> Comment<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get_today_count<span class="token punctuation">(</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"video_count"</span><span class="token punctuation">:</span> video_count<span class="token punctuation">,</span>                <span class="token string">"video_has_published_count"</span><span class="token punctuation">:</span> video_has_published_count<span class="token punctuation">,</span>                <span class="token string">"video_not_published_count"</span><span class="token punctuation">:</span> video_not_published_count<span class="token punctuation">,</span>                <span class="token string">"user_count"</span><span class="token punctuation">:</span> user_count<span class="token punctuation">,</span>                <span class="token string">"user_today_count"</span><span class="token punctuation">:</span> user_today_count<span class="token punctuation">,</span>                <span class="token string">"comment_count"</span><span class="token punctuation">:</span> comment_count<span class="token punctuation">,</span>                <span class="token string">"comment_today_count"</span><span class="token punctuation">:</span> comment_today_count<span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> render<span class="token punctuation">(</span>self<span class="token punctuation">.</span>request<span class="token punctuation">,</span> <span class="token string">'myadmin/index.html'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与视频相关的统计，我们封装到了Video的models.py下面, 之前已经写好了，现在来调用它</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># video/models.py</span><span class="token keyword">class</span> <span class="token class-name">VideoQuerySet</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>query<span class="token punctuation">.</span>QuerySet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 视频总数</span>    <span class="token keyword">def</span> <span class="token function">get_count</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 发布数</span>    <span class="token keyword">def</span> <span class="token function">get_published_count</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>status<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 未发布数</span>    <span class="token keyword">def</span> <span class="token function">get_not_published_count</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>status<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上数据，大都使用了filter过滤器进行了过滤，最后通过count()函数返回给业务方。</p><p>与用户相关的统计，我们直接通过count和exclude将相关数据过滤出来。</p><p>与评论相关的统计，封装到了Comment的models.py下面，</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">CommentQuerySet</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>query<span class="token punctuation">.</span>QuerySet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 评论总数</span>    <span class="token keyword">def</span> <span class="token function">get_count</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 今日新增</span>    <span class="token keyword">def</span> <span class="token function">get_today_count</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>exclude<span class="token punctuation">(</span>timestamp__lt<span class="token operator">=</span>datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，今日新增评论，我们通过exclude来过滤时间，使用了 lt 标签来过滤</p>]]></content>
      
      
      <categories>
          
          <category> Django视频网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django视频网站搭建--step14后台反馈功能</title>
      <link href="/post/django-shi-pin-wang-zhan-da-jian/step14-hou-tai-fan-kui-gong-neng/"/>
      <url>/post/django-shi-pin-wang-zhan-da-jian/step14-hou-tai-fan-kui-gong-neng/</url>
      
        <content type="html"><![CDATA[<p>#后天反馈功能<br>用户反馈管理功能，是对前端用户反馈的问题进行展示，并可实现删除功能。</p><p>它可以实时的跟踪到用户对网站的各种意见和吐槽，开发者能及时修缮网站功能或者修改网站bug。</p><p>##路由设置<br>反馈管理包括反馈列表和反馈删除，它们的路由是</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">path<span class="token punctuation">(</span><span class="token string">'feedback_list/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>FeedbackListView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'feedback_list'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>path<span class="token punctuation">(</span><span class="token string">'feedback_delete/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>feedback_delete<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'feedback_delete'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>分别表示反馈列表和反馈删除功能。<br>修改myadmin/base.html</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>myadmin:feedback_list<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>feedback_list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>用户反馈<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>##视图设置<br>列表是由FeedbackListView负责来展示，代码如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">FeedbackListView</span><span class="token punctuation">(</span>AdminUserRequiredMixin<span class="token punctuation">,</span> generic<span class="token punctuation">.</span>ListView<span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> Feedback            <span class="token comment"># 复用之前userprofile中定义的模型</span>    template_name <span class="token operator">=</span> <span class="token string">'myadmin/feedback_list.html'</span>    context_object_name <span class="token operator">=</span> <span class="token string">'feedback_list'</span>    paginate_by <span class="token operator">=</span> <span class="token number">10</span>            <span class="token comment"># 每页10条</span>    q <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">def</span> <span class="token function">get_context_data</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> object_list<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        context <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span>FeedbackListView<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>get_context_data<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        paginator <span class="token operator">=</span> context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'paginator'</span><span class="token punctuation">)</span>        page <span class="token operator">=</span> context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'page_obj'</span><span class="token punctuation">)</span>        page_list <span class="token operator">=</span> get_page_list<span class="token punctuation">(</span>paginator<span class="token punctuation">,</span> page<span class="token punctuation">)</span>        context<span class="token punctuation">[</span><span class="token string">'page_list'</span><span class="token punctuation">]</span> <span class="token operator">=</span> page_list        context<span class="token punctuation">[</span><span class="token string">'q'</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>q        <span class="token keyword">return</span> context    <span class="token keyword">def</span> <span class="token function">get_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>q <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Feedback<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>content__contains<span class="token operator">=</span>self<span class="token punctuation">.</span>q<span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'-timestamp'</span><span class="token punctuation">)</span> <span class="token comment"># 根据内容查询按时间排序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样是继承自ListView通用视图，同样是配置了model、template、分页。</p><p>在get_context_data()函数中，传递了分页数据；在get_queryset()中，传递了搜索数据。</p><p>当你删除一条的时候，会触发相应的ajax代码，ajax位于static/js/myadmin/feedback_list.js，</p><p>ajax最终的幕后黑手是feedback_delete接口，它位于myadmin/views.py，</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@ajax_required</span><span class="token decorator annotation punctuation">@require_http_methods</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">feedback_delete</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>     feedback_id <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">[</span><span class="token string">'feedback_id'</span><span class="token punctuation">]</span>    instance <span class="token operator">=</span> Feedback<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span>feedback_id<span class="token punctuation">)</span>    instance<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"success"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取到 feedback 实例后，通过instance.delete()删除</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>反馈建议展示页面有个小bug，字数过长的时候，显示有点问题，会看不到后面的删除按钮</p>]]></content>
      
      
      <categories>
          
          <category> Django视频网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django视频网站搭建--step13后台订阅推送功能</title>
      <link href="/post/django-shi-pin-wang-zhan-da-jian/step13-hou-tai-ding-yue-tui-song-gong-neng/"/>
      <url>/post/django-shi-pin-wang-zhan-da-jian/step13-hou-tai-ding-yue-tui-song-gong-neng/</url>
      
        <content type="html"><![CDATA[<p>#订阅邮件推送功能<br>本讲我们会讲到一些关于发邮件的技术。</p><p>订阅功能是一个很常见的功能，当用户订阅某个网站后，网站会通过后台给用户发送网站最新的一些动向，一般是通过邮件来发送的。</p><p>当你阅读完本节内容，会对发邮件的流程有一个大概的了解。</p><h2 id="配置相关参数"><a href="#配置相关参数" class="headerlink" title="配置相关参数"></a>配置相关参数</h2><p>发送邮件是需要配置相关参数的，且每个邮件服务商都有自己的配置值，笔者使用的是163邮箱，在settings.py追加如下配置</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">EMAIL_BACKEND <span class="token operator">=</span> <span class="token string">'django.core.mail.backends.smtp.EmailBackend'</span><span class="token comment"># 邮件配置</span>EMAIL_USE_SSL <span class="token operator">=</span> <span class="token boolean">True</span>EMAIL_HOST <span class="token operator">=</span> <span class="token string">'smtp.163.com'</span>EMAIL_PORT <span class="token operator">=</span> <span class="token number">465</span>EMAIL_HOST_USER <span class="token operator">=</span> <span class="token string">''</span>        <span class="token comment"># 163邮箱可用</span>EMAIL_HOST_PASSWORD <span class="token operator">=</span> <span class="token string">''</span>    <span class="token comment"># 邮箱密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一定要记得配置 EMAIL_BACKEND， 因为django默认配置的是一种模拟发邮件的 BackEnd ，并不能使用，故要替换。<br>###路由设置</p><p>我们先来写订阅推送的路由，</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">path<span class="token punctuation">(</span><span class="token string">'subscribe/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>SubscribeView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'subscribe'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同时修改myadmin/base.html文件</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>myadmin:subscribe<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>subscribe<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>订阅通知<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将路由设置为 SubscribeView</p><h2 id="视图设置"><a href="#视图设置" class="headerlink" title="视图设置"></a>视图设置</h2><p> SubscribeView 的代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 订阅推送功能</span><span class="token keyword">class</span> <span class="token class-name">SubscribeView</span><span class="token punctuation">(</span>SuperUserRequiredMixin<span class="token punctuation">,</span> generic<span class="token punctuation">.</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        video_list <span class="token operator">=</span> Video<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get_published_list<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">"myadmin/subscribe.html"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'video_list'</span><span class="token punctuation">:</span> video_list<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>is_superuser<span class="token punctuation">:</span>            <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"无权限"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        video_id <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">[</span><span class="token string">'video_id'</span><span class="token punctuation">]</span>        video <span class="token operator">=</span> Video<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span>video_id<span class="token punctuation">)</span>      <span class="token comment"># 通过主键获取到视频的当前实例</span>        subject <span class="token operator">=</span> video<span class="token punctuation">.</span>title        context <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'video'</span><span class="token punctuation">:</span> video<span class="token punctuation">,</span> <span class="token string">'site_url'</span><span class="token punctuation">:</span> settings<span class="token punctuation">.</span>SITE_URL<span class="token punctuation">&#125;</span>                          <span class="token comment"># 使用SITE_URL构建网址</span>        html_message <span class="token operator">=</span> render_to_string<span class="token punctuation">(</span><span class="token string">'myadmin/mail_template.html'</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span>        email_list <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>subscribe<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>values_list<span class="token punctuation">(</span><span class="token string">'email'</span><span class="token punctuation">,</span> flat<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># 获取到所有订阅用户的email地址到email_list</span>        <span class="token comment"># 分组,两个一组，分别发送邮件</span>        email_list <span class="token operator">=</span> <span class="token punctuation">[</span>email_list<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>email_list<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> email_list<span class="token punctuation">:</span>            <span class="token keyword">for</span> to_list <span class="token keyword">in</span> email_list<span class="token punctuation">:</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    send_html_email<span class="token punctuation">(</span>subject<span class="token punctuation">,</span> html_message<span class="token punctuation">,</span> to_list<span class="token punctuation">)</span>                <span class="token keyword">except</span> smtplib<span class="token punctuation">.</span>SMTPException <span class="token keyword">as</span> e<span class="token punctuation">:</span>                    logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span>e<span class="token punctuation">)</span>                    <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"发送失败"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"success"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"邮件列表为空"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一个普通的视图类，功能是由get和post共同来完成的。</p><p>get中设置了要显示的模板文件myadmin/subscribe.html</p><p>当我们要给用户发送邮件的时候，需要先选择要推送的视频。然后点击通知订阅用户，即可触发ajax发送代码</p><p>，ajax代码位于static/js/myadmin/send_mail.js，里面最终调用的是SubscribeView中的post方法，</p><p>post方法中，我们先通过主键获取到视频的当前实例，并且还获取到所有订阅用户的email地址放到email_list中，</p><p>最后调用send_html_email将邮件发送出去，send_html_email封装在video_helpers.py，它的具体代码是</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">send_html_email</span><span class="token punctuation">(</span>subject<span class="token punctuation">,</span> html_message<span class="token punctuation">,</span> to_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    plain_message <span class="token operator">=</span> strip_tags<span class="token punctuation">(</span>html_message<span class="token punctuation">)</span>    from_email <span class="token operator">=</span> settings<span class="token punctuation">.</span>EMAIL_HOST_USER    send_mail<span class="token punctuation">(</span>subject<span class="token punctuation">,</span> plain_message<span class="token punctuation">,</span> from_email<span class="token punctuation">,</span> to_list<span class="token punctuation">,</span> html_message<span class="token operator">=</span>html_message<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">send_email</span><span class="token punctuation">(</span>subject<span class="token punctuation">,</span> content<span class="token punctuation">,</span> to_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        message <span class="token operator">=</span> <span class="token punctuation">(</span>subject<span class="token punctuation">,</span> content<span class="token punctuation">,</span> settings<span class="token punctuation">.</span>EMAIL_HOST_USER<span class="token punctuation">,</span> to_list<span class="token punctuation">)</span>        send_mass_mail<span class="token punctuation">(</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> smtplib<span class="token punctuation">.</span>SMTPException <span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"--> send fail"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"fail"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"--> send success"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从代码可以看出，程序最终调用的是django自带的 send_mass_mail 函数，该函数封装了发送邮件的细节。</p><p>当然还可以使用 send_mail 函数，send_mail每次发邮件都会建立一个连接，发多封邮件时建立多个连接。</p><p>而 send_mass_mail 是建立单个连接发送多封邮件，所以一次性发送多封邮件时 send_mass_mail 要优于 send_mail。</p>]]></content>
      
      
      <categories>
          
          <category> Django视频网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django视频网站搭建--step12后台用户管理功能</title>
      <link href="/post/django-shi-pin-wang-zhan-da-jian/step12-hou-tai-yong-hu-guan-li-gong-neng/"/>
      <url>/post/django-shi-pin-wang-zhan-da-jian/step12-hou-tai-yong-hu-guan-li-gong-neng/</url>
      
        <content type="html"><![CDATA[<p>#后台用户管理功能<br>用户管理功能,跟其他功能也类似，增删改查</p><p>##路由设置<br>先在urls.py下添加相关的路由</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">path<span class="token punctuation">(</span><span class="token string">'user_add/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>UserAddView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'user_add'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>path<span class="token punctuation">(</span><span class="token string">'user_list/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>UserListView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'user_list'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>path<span class="token punctuation">(</span><span class="token string">'user_edit/&lt;int:pk>'</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>UserEditView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'user_edit'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>path<span class="token punctuation">(</span><span class="token string">'user_delete/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>user_delete<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'user_delete'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>#用户添加<br>添加用户前需要创建一个表单来存贮用户相关的数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">UserAddForm</span><span class="token punctuation">(</span>forms<span class="token punctuation">.</span>ModelForm<span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> forms<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>min_length<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>                               max_length<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>                               error_messages<span class="token operator">=</span><span class="token punctuation">&#123;</span>                                   <span class="token string">'min_length'</span><span class="token punctuation">:</span> <span class="token string">'用户名不少于4个字符'</span><span class="token punctuation">,</span>                                   <span class="token string">'max_length'</span><span class="token punctuation">:</span> <span class="token string">'用户名不能多于30个字符'</span><span class="token punctuation">,</span>                                   <span class="token string">'required'</span><span class="token punctuation">:</span> <span class="token string">'用户名不能为空'</span><span class="token punctuation">,</span>                               <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                               widget<span class="token operator">=</span>forms<span class="token punctuation">.</span>TextInput<span class="token punctuation">(</span>attrs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'placeholder'</span><span class="token punctuation">:</span> <span class="token string">'请输入用户名'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> forms<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>min_length<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>                               max_length<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>                               error_messages<span class="token operator">=</span><span class="token punctuation">&#123;</span>                                   <span class="token string">'min_length'</span><span class="token punctuation">:</span> <span class="token string">'密码不少于4个字符'</span><span class="token punctuation">,</span>                                   <span class="token string">'max_length'</span><span class="token punctuation">:</span> <span class="token string">'密码不能多于30个字符'</span><span class="token punctuation">,</span>                                   <span class="token string">'required'</span><span class="token punctuation">:</span> <span class="token string">'密码不能为空'</span><span class="token punctuation">,</span>                               <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                               widget<span class="token operator">=</span>forms<span class="token punctuation">.</span>PasswordInput<span class="token punctuation">(</span>attrs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'placeholder'</span><span class="token punctuation">:</span> <span class="token string">'请输入密码'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> User        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token string">'password'</span><span class="token punctuation">,</span> <span class="token string">'is_staff'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要是用户名和密码，is_staff元素<br>用户添加的视图类是UserAddView</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">UserAddView</span><span class="token punctuation">(</span>SuperUserRequiredMixin<span class="token punctuation">,</span> generic<span class="token punctuation">.</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        form <span class="token operator">=</span> UserAddForm<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> render<span class="token punctuation">(</span>self<span class="token punctuation">.</span>request<span class="token punctuation">,</span> <span class="token string">'myadmin/user_add.html'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'form'</span><span class="token punctuation">:</span> form<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        form <span class="token operator">=</span> UserAddForm<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>        <span class="token keyword">if</span> form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            user <span class="token operator">=</span> form<span class="token punctuation">.</span>save<span class="token punctuation">(</span>commit<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>            password <span class="token operator">=</span> form<span class="token punctuation">.</span>cleaned_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span>            user<span class="token punctuation">.</span>set_password<span class="token punctuation">(</span>password<span class="token punctuation">)</span>            user<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> render<span class="token punctuation">(</span>self<span class="token punctuation">.</span>request<span class="token punctuation">,</span> <span class="token string">'myadmin/user_add_success.html'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> render<span class="token punctuation">(</span>self<span class="token punctuation">.</span>request<span class="token punctuation">,</span> <span class="token string">'myadmin/user_add.html'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'form'</span><span class="token punctuation">:</span> form<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一个普通的视图类，通过get()和post()来完成用户添加的功能，get里面负责页面的展示，post里面负责逻辑处理。</p><p>在get中，初始化form为UserAddForm，因为添加的用户是有类别的，所以在UserAddForm中应用了is_staff字段来表示管理员。</p><p>在post中，我们通过user.set_password(password)来设置新密码。user.save()来保存记录到数据库。</p><p>保存成功后会跳转到myadmin/user_add_success.html页面。</p><p>##用户列表</p><p>用户添加成功后，当你点击用户列表，即可看到用户列表数据。</p><p>使用的是UserListView视图类，该类是继承自ListView通用视图类的。因此 只需要我们添加实现列表功能。UserListView代码如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">UserListView</span><span class="token punctuation">(</span>AdminUserRequiredMixin<span class="token punctuation">,</span> generic<span class="token punctuation">.</span>ListView<span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> User    template_name <span class="token operator">=</span> <span class="token string">'myadmin/user_list.html'</span>    context_object_name <span class="token operator">=</span> <span class="token string">'user_list'</span>    paginate_by <span class="token operator">=</span> <span class="token number">10</span>    q <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">def</span> <span class="token function">get_context_data</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> object_list<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        context <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span>UserListView<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>get_context_data<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        paginator <span class="token operator">=</span> context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'paginator'</span><span class="token punctuation">)</span>        page <span class="token operator">=</span> context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'page_obj'</span><span class="token punctuation">)</span>        page_list <span class="token operator">=</span> get_page_list<span class="token punctuation">(</span>paginator<span class="token punctuation">,</span> page<span class="token punctuation">)</span>        context<span class="token punctuation">[</span><span class="token string">'page_list'</span><span class="token punctuation">]</span> <span class="token operator">=</span> page_list        context<span class="token punctuation">[</span><span class="token string">'q'</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>q        <span class="token keyword">return</span> context    <span class="token keyword">def</span> <span class="token function">get_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>q <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>username__contains<span class="token operator">=</span>self<span class="token punctuation">.</span>q<span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'-date_joined'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跟之前一样，通过ListView展现数据。</p><p>我们知道ListView是有多个回调函数的，这里就是通过get_context_data()和get_queryset()回调函数来实现列表中的功能的。</p><p>在get_context_data()中实现了列表分页功能，在get_queryset()中实现了搜索功能。</p><p>##用户编辑<br>当你点击编辑按钮的时候，即可进入编辑页面。<br>编辑页面也需要创建一个表单来存贮它的数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">username_validate</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> value <span class="token operator">==</span> <span class="token string">"admin"</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValidationError<span class="token punctuation">(</span><span class="token string">'不能编辑超级管理员'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">UserEditForm</span><span class="token punctuation">(</span>forms<span class="token punctuation">.</span>ModelForm<span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> forms<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>min_length<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>                               max_length<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>                               required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                               validators<span class="token operator">=</span><span class="token punctuation">[</span>username_validate<span class="token punctuation">]</span><span class="token punctuation">,</span>                               error_messages<span class="token operator">=</span><span class="token punctuation">&#123;</span>                                  <span class="token string">'min_length'</span><span class="token punctuation">:</span> <span class="token string">'至少4个字符'</span><span class="token punctuation">,</span>                                  <span class="token string">'max_length'</span><span class="token punctuation">:</span> <span class="token string">'不能多于30个字符'</span><span class="token punctuation">,</span>                                  <span class="token string">'required'</span><span class="token punctuation">:</span> <span class="token string">'用户名不能为空'</span>                               <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                               widget<span class="token operator">=</span>forms<span class="token punctuation">.</span>TextInput<span class="token punctuation">(</span>attrs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'placeholder'</span><span class="token punctuation">:</span> <span class="token string">'请输入用户名'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> User        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token string">'is_staff'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的视图设置如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">UserEditView</span><span class="token punctuation">(</span>SuperUserRequiredMixin<span class="token punctuation">,</span> generic<span class="token punctuation">.</span>UpdateView<span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> User    form_class <span class="token operator">=</span> UserEditForm    template_name <span class="token operator">=</span> <span class="token string">'myadmin/user_edit.html'</span>    <span class="token keyword">def</span> <span class="token function">get_success_url</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        messages<span class="token punctuation">.</span>success<span class="token punctuation">(</span>self<span class="token punctuation">.</span>request<span class="token punctuation">,</span> <span class="token string">"保存成功"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> reverse<span class="token punctuation">(</span><span class="token string">'myadmin:user_edit'</span><span class="token punctuation">,</span> kwargs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'pk'</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>kwargs<span class="token punctuation">[</span><span class="token string">'pk'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样是继承自UpdateView，仅需要配置好model、form_class、template_name即可</p><p>##用户删除</p><p>当你点击删除按钮的时候，会弹出确认框让你删除。然后网站通过ajax调用user_delete来实现真正的删除操作，其中，ajax代码位于static/js/myadmin/user_list.js</p><p>真正的删除函数是user_delete，下面是它的真面目</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@ajax_required</span><span class="token decorator annotation punctuation">@require_http_methods</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">user_delete</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>     user_id <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">[</span><span class="token string">'user_id'</span><span class="token punctuation">]</span>    instance <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span>user_id<span class="token punctuation">)</span>     instance<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"success"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先获取到当前用户的实例，然后通过 instance.delete()删除.</p><p>##前端页面<br>照例需要修改base.html文件</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>myadmin:user_list<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>用户列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>myadmin:user_add<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>添加用户<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其他需要添加的文件如下</p><pre class="line-numbers language-none"><code class="language-none">新文件：   static&#x2F;js&#x2F;myadmin&#x2F;user_list.js修改：     templates&#x2F;myadmin&#x2F;base.html新文件：   templates&#x2F;myadmin&#x2F;user_add.html新文件：   templates&#x2F;myadmin&#x2F;user_add_success.html新文件：   templates&#x2F;myadmin&#x2F;user_edit.html新文件：   templates&#x2F;myadmin&#x2F;user_list.html新文件：   templates&#x2F;myadmin&#x2F;user_list_modal.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Django视频网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django视频网站搭建--step11后台评论功能</title>
      <link href="/post/django-shi-pin-wang-zhan-da-jian/step11-hou-tai-ping-lun-gong-neng/"/>
      <url>/post/django-shi-pin-wang-zhan-da-jian/step11-hou-tai-ping-lun-gong-neng/</url>
      
        <content type="html"><![CDATA[<p>#后台评论功能<br>本讲中来讲评论管理功能，数据库中的每一条是来自用户的评价，</p><p>因此后台中的评论管理只有评论列表和评论删除功能，没有增加评论和编辑评论。<br>##路由设置<br>照例我们先添加评论管理的相关路由</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># myadmin/urls.py</span>    <span class="token comment"># ----------------------评论管理----------------------------</span>    path<span class="token punctuation">(</span><span class="token string">'comment_list/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>CommentListView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'comment_list'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'comment_delete/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>comment_delete<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'comment_delete'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>只添加列表和删除功能<br>##视图设置<br>首先是评论列表的展示，我们通过CommentListView视图类来实现，该类依然是继承ListView来实现的。代码如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">CommentListView</span><span class="token punctuation">(</span>AdminUserRequiredMixin<span class="token punctuation">,</span> generic<span class="token punctuation">.</span>ListView<span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> Comment    template_name <span class="token operator">=</span> <span class="token string">'myadmin/comment_list.html'</span>    context_object_name <span class="token operator">=</span> <span class="token string">'comment_list'</span>    paginate_by <span class="token operator">=</span> <span class="token number">10</span>    q <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">def</span> <span class="token function">get_context_data</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> object_list<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        context <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span>CommentListView<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>get_context_data<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        paginator <span class="token operator">=</span> context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'paginator'</span><span class="token punctuation">)</span>        page <span class="token operator">=</span> context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'page_obj'</span><span class="token punctuation">)</span>        page_list <span class="token operator">=</span> get_page_list<span class="token punctuation">(</span>paginator<span class="token punctuation">,</span> page<span class="token punctuation">)</span>        context<span class="token punctuation">[</span><span class="token string">'page_list'</span><span class="token punctuation">]</span> <span class="token operator">=</span> page_list        context<span class="token punctuation">[</span><span class="token string">'q'</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>q        <span class="token keyword">return</span> context    <span class="token keyword">def</span> <span class="token function">get_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>q <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Comment<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>content__contains<span class="token operator">=</span>self<span class="token punctuation">.</span>q<span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'-timestamp'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过继承ListView来实现评论列表的展示，通过get_context_data()来实现分页功能，通过get_queryset()来实现搜索功能。</p><p>下面我们继续实现删除功能，该功能比较简单，只需要通过ajax将video_id传给删除接口即可，</p><p>ajax的代码位于static/js/myadmin/comment_list.js，</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 写入csrf</span>$<span class="token punctuation">.</span><span class="token function">getScript</span><span class="token punctuation">(</span><span class="token string">"/static/js/csrftoken.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.comment-delete'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> tr <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closest</span><span class="token punctuation">(</span><span class="token string">"tr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> comment_id <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>tr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"comment-id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.ui.tiny.modal.delete'</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">modal</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>          closable  <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token function-variable function">onDeny</span>    <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token function-variable function">onApprove</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                url<span class="token operator">:</span> api_comment_delete<span class="token punctuation">,</span>                data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token string">'comment_id'</span><span class="token operator">:</span>comment_id<span class="token punctuation">,</span>                    <span class="token string">'csrf_token'</span><span class="token operator">:</span> csrftoken                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                type<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>                dataType<span class="token operator">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>                <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token keyword">var</span> code <span class="token operator">=</span> data<span class="token punctuation">.</span>code                     <span class="token keyword">var</span> msg <span class="token operator">=</span> data<span class="token punctuation">.</span>msg                     <span class="token keyword">if</span><span class="token punctuation">(</span>code <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                        <span class="token function">alert</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token operator">+</span>data<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">modal</span><span class="token punctuation">(</span><span class="token string">'show'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除评论的接口是api_comment_delete，最终会调用到comment_delete，代码如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@ajax_required</span><span class="token decorator annotation punctuation">@require_http_methods</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">comment_delete</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>     comment_id <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">[</span><span class="token string">'comment_id'</span><span class="token punctuation">]</span>    instance <span class="token operator">=</span> Comment<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span>comment_id<span class="token punctuation">)</span>    instance<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"success"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>逻辑还算清晰，即先拿到评论的id，然后获取到该条评论，最后instance.delete()删除</p><p>##前端设置<br>先看一下需要修改的文件</p><pre class="line-numbers language-none"><code class="language-none">修改：     templates&#x2F;myadmin&#x2F;base.html新文件：   templates&#x2F;myadmin&#x2F;comment_list.html新文件：   templates&#x2F;myadmin&#x2F;comment_list_modal.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中base.html文件需要将评论地址添加进去,实现跳转</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>myadmin:comment_list<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>comment_list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>评论列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>comment_list.html文件为新添加的文件，大体布局跟video_list.html类似</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&#123;% extends 'myadmin/base.html' %&#125;&#123;% load static %&#125;&#123;% load video_tag %&#125;&#123;% block content %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui grid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui header six wide column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>评论列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>v-title-extra ten wide column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui action input v-admin-search<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Search...<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;q&#125;&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>v-search<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui small button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>搜索<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui divider<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui unstackable single line striped selectable table<span class="token punctuation">"</span></span>  <span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>#id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>用户<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>昵称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>视频名字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>评论内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>评论时间<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>操作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video-list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            &#123;% for item in comment_list %&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">comment-id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;item.id&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span> &#123;&#123;item.user_id&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span> &#123;&#123;item.user.username&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span> &#123;&#123;item.nickname&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span> &#123;&#123;item.video.title&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span> &#123;&#123; item.content | comment_slice &#125;&#125; <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span> &#123;&#123;item.timestamp|date:'Y-m-d H:i'&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui button comment-delete<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            &#123;% empty %&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>暂时没有评论<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>            &#123;% endfor %&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tfoot</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    &#123;% include 'myadmin/page_nav.html' %&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tfoot</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>&#123;% endblock content %&#125;&#123;% block modal %&#125;&#123;% include "myadmin/comment_list_modal.html" %&#125;&#123;% endblock modal %&#125;&#123;% block script %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> search_url <span class="token operator">=</span> <span class="token string">"&#123;% url 'myadmin:comment_list' %&#125;"</span>    <span class="token keyword">var</span> api_comment_delete <span class="token operator">=</span> <span class="token string">"&#123;% url 'myadmin:comment_delete' %&#125;"</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% static <span class="token punctuation">'</span>js/myadmin/comment_list.js<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>&#123;% endblock script %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小功能，它调用了自定义标签 video_tag，使用这个里面的函数时需要的时候需要提前注册<br>在设置中添加libraries</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># videoproject/settings.py</span>TEMPLATES <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>         <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token string">'OPTIONS'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">'context_processors'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'libraries'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">'my_customs_tag'</span><span class="token punctuation">:</span> <span class="token string">'video.templatetags.video_tag'</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自定义的标签文件，先注册，然后添加自己想用的函数.</p><p>这里仅仅是添加一个函数，处理评论在页面显示过长的问题, 超过50个字直接截断</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django <span class="token keyword">import</span> templateregister <span class="token operator">=</span> template<span class="token punctuation">.</span>Library<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 分词</span><span class="token decorator annotation punctuation">@register<span class="token punctuation">.</span>filter</span><span class="token keyword">def</span> <span class="token function">comment_slice</span><span class="token punctuation">(</span>comment<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> comment<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'...'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Django视频网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django视频网站搭建--step09后台视频管理功能</title>
      <link href="/post/django-shi-pin-wang-zhan-da-jian/step09-hou-tai-shi-pin-guan-li-gong-neng/"/>
      <url>/post/django-shi-pin-wang-zhan-da-jian/step09-hou-tai-shi-pin-guan-li-gong-neng/</url>
      
        <content type="html"><![CDATA[<p>#后台视频管理功能<br>从本讲开始，我们开始视频管理功能的开发，视频管理包括</p><ul><li>视频上传</li><li>视频列表</li><li>视频编辑</li><li>视频删除</li></ul><p>这一讲非常重要，因为将学习到一些之前没有学过的技术，比如大文件上传技术。<br>##视频上传</p><p>我们先来实现视频的上传，视频的上传采用的是分块上传的策略，并用了分块上传类库：django_chunked_upload，使用该类库，再配合前端上传js库（jquery.fileupload.js），即可完美的实现文件的分块上传功能。<br>###路由设置<br>照例先编写添加视频的路由</p><p>添加视频，当然需要上传视频的页面，我们的页面是video_add路由来显示，通过urls .py中指定</p><pre class="line-numbers language-none"><code class="language-none"># myadmin&#x2F;urls.pypath(&#39;video_add&#x2F;&#39;, views.AddVideoView.as_view(), name&#x3D;&#39;video_add&#39;),    #上传视频path(&#39;chunked_upload&#x2F;&#39;,  views.MyChunkedUploadView.as_view(), name&#x3D;&#39;api_chunked_upload&#39;),  # 上传接口path(&#39;chunked_upload_complete&#x2F;&#39;, views.MyChunkedUploadCompleteView.as_view(),name&#x3D;&#39;api_chunked_upload_complete&#39;),  # 上传视频完成接口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>###添加视图<br>AddViewView仅仅用来显示上传页面，它的代码很简单</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">AddVideoView</span><span class="token punctuation">(</span>SuperUserRequiredMixin<span class="token punctuation">,</span> TemplateView<span class="token punctuation">)</span><span class="token punctuation">:</span>    template_name <span class="token operator">=</span> <span class="token string">'myadmin/video_add.html'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>只是继承了TemplateView来显示myadmin/video_add.html<br>###前端</p><pre class="line-numbers language-none"><code class="language-none">templates&#x2F;myadmin&#x2F;├── base.html                       # 基础页面├── login.html                      # 登录页面├── video_add.html                  # 添加视频页面├── video_edit.html                 # 编辑视频页面├── video_list.html                 # 列表页面├── video_list_modal.html           ├── video_publish.html              # 发布页面，跟编辑页面类似└── video_publish_success.html      # 发布成功页面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>myadmin/video_add.html中实现了上传视频的全过程，视频的上传采用的是分块上传的策略，</p><p>前端使用的是js上传库（jquery.fileupload.js），后端使用的是django_chunked_upload。</p><p>上传的逻辑是这样的：</p><ul><li>前端先选择一个文件，通过jquery.fileupload.js中的$.fileupload()方法来上传文件；</li><li>后端接收到后分批返回已上传块的进度；</li><li>前端根据进度来更新界面；</li></ul><p>由于上传前需要做一些校验的操作，代码较复杂，所以我们把上传的代码封装到了一个js中:static/js/myadmin/video_upload.js，<br>这些内容基本都是django_chunked_upload中的demo模板内容，主要的代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#chunked_upload"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fileupload</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  url<span class="token operator">:</span> api_chunked_uplad<span class="token punctuation">,</span>  dataType<span class="token operator">:</span> <span class="token string">"json"</span><span class="token punctuation">,</span>  maxChunkSize<span class="token operator">:</span> <span class="token number">100000</span><span class="token punctuation">,</span> <span class="token comment">// Chunks of 100 kB</span>  formData<span class="token operator">:</span> form_data<span class="token punctuation">,</span>  <span class="token function-variable function">add</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// Called before starting upload</span>    <span class="token keyword">var</span> fileSize <span class="token operator">=</span> data<span class="token punctuation">.</span>originalFiles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'size'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> type <span class="token operator">=</span> data<span class="token punctuation">.</span>originalFiles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>fileSize <span class="token operator">></span> <span class="token number">100000000</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'文件太大了，请上传100M以内的文件'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>type<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"video/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'视频格式不正确'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    form_data<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">calculate_md5</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Again, chunks of 100 kB</span>    data<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#progress_label'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#progress_layout'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">chunkdone</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// Called after uploading each chunk</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>form_data<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      form_data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>        <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"upload_id"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token operator">:</span> data<span class="token punctuation">.</span>result<span class="token punctuation">.</span>upload_id<span class="token punctuation">&#125;</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> progress <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>loaded <span class="token operator">/</span> data<span class="token punctuation">.</span>total <span class="token operator">*</span> <span class="token number">100.0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>progress<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>progress <span class="token operator">></span> lastprogress<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        lastprogress <span class="token operator">=</span> progress        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#upload_progress'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">progress</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            percent<span class="token operator">:</span> progress        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">done</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// Called when the file has completely uploaded</span>    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      type<span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>      url<span class="token operator">:</span> api_chunked_upload_complete<span class="token punctuation">,</span>      data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        csrfmiddlewaretoken<span class="token operator">:</span> csrf<span class="token punctuation">,</span>        upload_id<span class="token operator">:</span> data<span class="token punctuation">.</span>result<span class="token punctuation">.</span>upload_id<span class="token punctuation">,</span>        md5<span class="token operator">:</span> md5      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      dataType<span class="token operator">:</span> <span class="token string">"json"</span><span class="token punctuation">,</span>      <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#upload_label'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">'上传成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#upload_progress'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">progress</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            percent<span class="token operator">:</span> <span class="token number">100</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#next_layout'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#next'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            window<span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token string">'/myadmin/video_publish/'</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>video_id        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在$.fileupload()方法中，有一个回调方法chunkdone()，该方法是用来更新进度的，告诉前端已经上传了多少字节。</p><p>另外还有一个回调方法done()，该方法表示上传完毕，前端可在里面做一些额外的事情。</p><p>上传完毕后，调用了一个接口api_chunked_upload_complete，来给后端发送一个回执：我已上传完毕。<br>###上传成功视图<br>api_chunked_upload和api_chunked_upload_complete的路由已经配好</p><p>在MyChunkedUploadCompleteView中，我们在利用Video模型创建了这条视频</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># myadmin/models.py</span><span class="token keyword">from</span> chunked_upload<span class="token punctuation">.</span>models <span class="token keyword">import</span> ChunkedUpload<span class="token comment"># 上传视频模块用到的， 基本没改动和demo一样</span>MyChunkedUpload <span class="token operator">=</span> ChunkedUpload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>视图中使用它</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># myadmin/views.py</span><span class="token comment"># 上传视频</span><span class="token keyword">class</span> <span class="token class-name">MyChunkedUploadView</span><span class="token punctuation">(</span>ChunkedUploadView<span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> MyChunkedUpload    field_name <span class="token operator">=</span> <span class="token string">'the_file'</span><span class="token keyword">class</span> <span class="token class-name">MyChunkedUploadCompleteView</span><span class="token punctuation">(</span>ChunkedUploadCompleteView<span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> MyChunkedUpload    <span class="token comment"># 上传视频回调函数    </span>    <span class="token keyword">def</span> <span class="token function">on_completion</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> uploaded_file<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'uploaded--->'</span><span class="token punctuation">,</span> uploaded_file<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token comment"># 视频上传成功回调函数</span>    <span class="token keyword">def</span> <span class="token function">get_response_data</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> chunked_upload<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        video <span class="token operator">=</span> Video<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token operator">=</span>chunked_upload<span class="token punctuation">.</span><span class="token builtin">file</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">'code'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'video_id'</span><span class="token punctuation">:</span> video<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">,</span> <span class="token string">'msg'</span><span class="token punctuation">:</span> <span class="token string">'success'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>##视频发布</p><p>然后用户点击下一步，进入video_publish页面，开始发布前的资料填写<br>###视频发布路由设置</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">video_publish的路由是    path<span class="token punctuation">(</span><span class="token string">'video_publish/&lt;int:pk>/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>VideoPublishView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'video_publish'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 视频发布，后面可以拓展为视频审核成功后发布</span>    path<span class="token punctuation">(</span><span class="token string">'video_publish_success/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>VideoPublishSuccessView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'video_publish_success'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 视频发布成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>###视频发布视图<br>发布列表用到VideoPublishForm，因此需要创建</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># myadmin/forms.py</span><span class="token keyword">from</span> django <span class="token keyword">import</span> forms<span class="token keyword">from</span> video<span class="token punctuation">.</span>models <span class="token keyword">import</span> Video<span class="token keyword">class</span> <span class="token class-name">VideoPublishForm</span><span class="token punctuation">(</span>forms<span class="token punctuation">.</span>ModelForm<span class="token punctuation">)</span><span class="token punctuation">:</span>    title <span class="token operator">=</span> forms<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>min_length<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                            error_messages<span class="token operator">=</span><span class="token punctuation">&#123;</span>                                  <span class="token string">'min_length'</span><span class="token punctuation">:</span> <span class="token string">'至少4个字符'</span><span class="token punctuation">,</span>                                  <span class="token string">'max_length'</span><span class="token punctuation">:</span> <span class="token string">'不能多于200个字符'</span><span class="token punctuation">,</span>                                  <span class="token string">'required'</span><span class="token punctuation">:</span> <span class="token string">'标题不能为空'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                            widget<span class="token operator">=</span>forms<span class="token punctuation">.</span>TextInput<span class="token punctuation">(</span>attrs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'placeholder'</span><span class="token punctuation">:</span> <span class="token string">'请输入内容'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    desc <span class="token operator">=</span> forms<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>min_length<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                           error_messages<span class="token operator">=</span><span class="token punctuation">&#123;</span>                              <span class="token string">'min_length'</span><span class="token punctuation">:</span> <span class="token string">'至少4个字符'</span><span class="token punctuation">,</span>                              <span class="token string">'max_length'</span><span class="token punctuation">:</span> <span class="token string">'不能多于200个字符'</span><span class="token punctuation">,</span>                              <span class="token string">'required'</span><span class="token punctuation">:</span> <span class="token string">'描述不能为空'</span>                           <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                           widget<span class="token operator">=</span>forms<span class="token punctuation">.</span>Textarea<span class="token punctuation">(</span>attrs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'placeholder'</span><span class="token punctuation">:</span> <span class="token string">'请输入内容'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    cover <span class="token operator">=</span> forms<span class="token punctuation">.</span>ImageField<span class="token punctuation">(</span>required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                             error_messages<span class="token operator">=</span><span class="token punctuation">&#123;</span>                                 <span class="token string">'required'</span><span class="token punctuation">:</span> <span class="token string">'封面不能为空'</span>                             <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                             widget<span class="token operator">=</span>forms<span class="token punctuation">.</span>FileInput<span class="token punctuation">(</span>attrs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'n'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    status <span class="token operator">=</span> forms<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>min_length<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                             widget<span class="token operator">=</span>forms<span class="token punctuation">.</span>HiddenInput<span class="token punctuation">(</span>attrs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'value'</span><span class="token punctuation">:</span> <span class="token string">'0'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Video        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">,</span> <span class="token string">'desc'</span><span class="token punctuation">,</span> <span class="token string">'status'</span><span class="token punctuation">,</span> <span class="token string">'cover'</span><span class="token punctuation">,</span> <span class="token string">'classification'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>video_publish的视图类是VideoPublishView，它的代码如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">VideoPublishView</span><span class="token punctuation">(</span>SuperUserRequiredMixin<span class="token punctuation">,</span> generic<span class="token punctuation">.</span>UpdateView<span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> Video    form_class <span class="token operator">=</span> VideoPublishForm    template_name <span class="token operator">=</span> <span class="token string">'myadmin/video_publish.html'</span>    <span class="token keyword">def</span> <span class="token function">get_context_data</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        context <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span>VideoPublishView<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>get_context_data<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        clf_list <span class="token operator">=</span> Classification<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span>        clf_data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'clf_list'</span><span class="token punctuation">:</span>clf_list<span class="token punctuation">&#125;</span>        context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>clf_data<span class="token punctuation">)</span>        <span class="token keyword">return</span> context    <span class="token keyword">def</span> <span class="token function">get_success_url</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> reverse<span class="token punctuation">(</span><span class="token string">'myadmin:video_publish_success'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，对应的页面是myadmin/video_publish.html</p><p>要填写的视频资料有视频标题、描述、分类、封面，</p><p>其中分类是通过get_context_data()带过来的，</p><p>填写后，点击发布，django将通过UpdateView自动为你更新视频信息。并通过get_success_url跳转到成功页面myadmin:video_publish_success，它的路由是</p><p>通过 video_publish_success 调用 VideoPublishSuccessView。</p><p>对应VideoPublishSuccessView是</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">VideoPublishSuccessView</span><span class="token punctuation">(</span>generic<span class="token punctuation">.</span>TemplateView<span class="token punctuation">)</span><span class="token punctuation">:</span>    template_name <span class="token operator">=</span> <span class="token string">'myadmin/video_publish_success.html'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>到此视频添加功能完成</p><p>##视频列表</p><p>视频列表的路由是</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">path<span class="token punctuation">(</span><span class="token string">'video_list/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>VideoListView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'video_list'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应的视图类是VideoListView</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">VideoListView</span><span class="token punctuation">(</span>AdminUserRequiredMixin<span class="token punctuation">,</span> generic<span class="token punctuation">.</span>ListView<span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> Video    template_name <span class="token operator">=</span> <span class="token string">'myadmin/video_list.html'</span>    context_object_name <span class="token operator">=</span> <span class="token string">'video_list'</span>    paginate_by <span class="token operator">=</span> <span class="token number">10</span>    q <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">def</span> <span class="token function">get_context_data</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> object_list<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        context <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span>VideoListView<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>get_context_data<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        paginator <span class="token operator">=</span> context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'paginator'</span><span class="token punctuation">)</span>        page <span class="token operator">=</span> context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'page_obj'</span><span class="token punctuation">)</span>        page_list <span class="token operator">=</span> get_page_list<span class="token punctuation">(</span>paginator<span class="token punctuation">,</span> page<span class="token punctuation">)</span>        context<span class="token punctuation">[</span><span class="token string">'page_list'</span><span class="token punctuation">]</span> <span class="token operator">=</span> page_list        context<span class="token punctuation">[</span><span class="token string">'q'</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>q        <span class="token keyword">return</span> context    <span class="token keyword">def</span> <span class="token function">get_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>q <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Video<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get_search_list<span class="token punctuation">(</span>self<span class="token punctuation">.</span>q<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里继承了ListView来显示视频列表，并通过get_queryset实现了搜索功能，通过get_context_data()实现了分页功能。<br>##视频编辑<br>页面中还有编辑和删除的功能。</p><p>编辑呢，是对单个视频对资料进行更新，删除即删除本条视频和视频文件。</p><p>我们先实现编辑功能，路由是</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">path<span class="token punctuation">(</span><span class="token string">'video_edit/&lt;int:pk>/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>VideoEditView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'video_edit'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应对视图类是VideoEditView，这个视图类是需要传递主键的。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">VideoEditView</span><span class="token punctuation">(</span>SuperUserRequiredMixin<span class="token punctuation">,</span> generic<span class="token punctuation">.</span>UpdateView<span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> Video    form_class <span class="token operator">=</span> VideoEditForm    template_name <span class="token operator">=</span> <span class="token string">'myadmin/video_edit.html'</span>    <span class="token keyword">def</span> <span class="token function">get_context_data</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        context <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span>VideoEditView<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>get_context_data<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        clf_list <span class="token operator">=</span> Classification<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span>        clf_data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'clf_list'</span><span class="token punctuation">:</span>clf_list<span class="token punctuation">&#125;</span>        context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>clf_data<span class="token punctuation">)</span>        <span class="token keyword">return</span> context    <span class="token keyword">def</span> <span class="token function">get_success_url</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        messages<span class="token punctuation">.</span>success<span class="token punctuation">(</span>self<span class="token punctuation">.</span>request<span class="token punctuation">,</span> <span class="token string">"保存成功"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> reverse<span class="token punctuation">(</span><span class="token string">'myadmin:video_edit'</span><span class="token punctuation">,</span> kwargs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'pk'</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>kwargs<span class="token punctuation">[</span><span class="token string">'pk'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>```    其实编辑页面和发布页面很相似，都是继承UpdateView视图类，并在get_context_data<span class="token punctuation">(</span><span class="token punctuation">)</span>里面传递分类信息。最终成功后通过messages<span class="token punctuation">.</span>success<span class="token punctuation">(</span>self<span class="token punctuation">.</span>request<span class="token punctuation">,</span> <span class="token string">"保存成功"</span><span class="token punctuation">)</span>消息告之前端。<span class="token comment">##视频删除</span>删除功能就更加简单了。路由是```pythonpath<span class="token punctuation">(</span><span class="token string">'video_delete/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>video_delete<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'video_delete'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里通过video_delete函数来实现，前端通过ajax（ajax代码位于static/js/myadmin/video_list.js）调用这个函数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@ajax_required</span><span class="token decorator annotation punctuation">@require_http_methods</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">video_delete</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    video_id <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">[</span><span class="token string">'video_id'</span><span class="token punctuation">]</span>    instance <span class="token operator">=</span> Video<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span>video_id<span class="token punctuation">)</span>    instance<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"success"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取该视频，然后instance.delete()删除之。</p>]]></content>
      
      
      <categories>
          
          <category> Django视频网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django视频网站搭建--step10后台视频分类功能</title>
      <link href="/post/django-shi-pin-wang-zhan-da-jian/step10-hou-tai-shi-pin-fen-lei-gong-neng/"/>
      <url>/post/django-shi-pin-wang-zhan-da-jian/step10-hou-tai-shi-pin-fen-lei-gong-neng/</url>
      
        <content type="html"><![CDATA[<p>#视频分类<br>视频分类的功能，主要包括以下内容</p><ul><li>分类列表</li><li>添加分类</li><li>修改分类</li><li>删除分类</li></ul><p>分类管理功能包括分类的增删改查。<br>###路由设置<br>增删改查的路由是</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">path<span class="token punctuation">(</span><span class="token string">'classification_add/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>ClassificationAddView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'classification_add'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>path<span class="token punctuation">(</span><span class="token string">'classification_list/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>ClassificationListView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'classification_list'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>path<span class="token punctuation">(</span><span class="token string">'classification_edit/&lt;int:pk>/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>ClassificationEditView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'classification_edit'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>path<span class="token punctuation">(</span><span class="token string">'classification_delete/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>classification_delete<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'classification_delete'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>###添加分类<br>先来看分类添加的功能</p><p>分类添加是通过ClassificationAddView视图类来实现的，代码如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ClassificationAddView</span><span class="token punctuation">(</span>SuperUserRequiredMixin<span class="token punctuation">,</span> generic<span class="token punctuation">.</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        form <span class="token operator">=</span> ClassificationAddForm<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> render<span class="token punctuation">(</span>self<span class="token punctuation">.</span>request<span class="token punctuation">,</span> <span class="token string">'myadmin/classification_add.html'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'form'</span><span class="token punctuation">:</span> form<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        form <span class="token operator">=</span> ClassificationAddForm<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>        <span class="token keyword">if</span> form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            form<span class="token punctuation">.</span>save<span class="token punctuation">(</span>commit<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> render<span class="token punctuation">(</span>self<span class="token punctuation">.</span>request<span class="token punctuation">,</span> <span class="token string">'myadmin/classification_add_success.html'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> render<span class="token punctuation">(</span>self<span class="token punctuation">.</span>request<span class="token punctuation">,</span> <span class="token string">'myadmin/classification_add.html'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'form'</span><span class="token punctuation">:</span> form<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处是通过get和post一同来实现的，get()负责展示界面，post()负责逻辑判断。</p><p>在post()中，直接调用form.save来保存记录，然后跳转到成功页myadmin/classification_add_success.html。<br>###查看分类列表<br>然后点击视频列表，即可查看列表，视频列表的视图类是ClassificationListView，即</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ClassificationListView</span><span class="token punctuation">(</span>AdminUserRequiredMixin<span class="token punctuation">,</span> generic<span class="token punctuation">.</span>ListView<span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> Classification    template_name <span class="token operator">=</span> <span class="token string">'myadmin/classification_list.html'</span>    context_object_name <span class="token operator">=</span> <span class="token string">'classification_list'</span>    paginate_by <span class="token operator">=</span> <span class="token number">10</span>    q <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">def</span> <span class="token function">get_context_data</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> object_list<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        context <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span>ClassificationListView<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>get_context_data<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        paginator <span class="token operator">=</span> context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'paginator'</span><span class="token punctuation">)</span>        page <span class="token operator">=</span> context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'page_obj'</span><span class="token punctuation">)</span>        page_list <span class="token operator">=</span> get_page_list<span class="token punctuation">(</span>paginator<span class="token punctuation">,</span> page<span class="token punctuation">)</span>        context<span class="token punctuation">[</span><span class="token string">'page_list'</span><span class="token punctuation">]</span> <span class="token operator">=</span> page_list        context<span class="token punctuation">[</span><span class="token string">'q'</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>q        <span class="token keyword">return</span> context    <span class="token keyword">def</span> <span class="token function">get_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>q <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Classification<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>title__contains<span class="token operator">=</span>self<span class="token punctuation">.</span>q<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继承ListView来显示列表，通过get_queryset()来实现搜索功能，通过get_context_data()来实现分页功能，通过template_name来指定模板</p><p>接着来实现编辑和删除功能。</p><p>编辑对应的视图类是ClassificationEditView，它的实现超级简单，继承UpdateView即可。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ClassificationEditView</span><span class="token punctuation">(</span>SuperUserRequiredMixin<span class="token punctuation">,</span> generic<span class="token punctuation">.</span>UpdateView<span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> Classification    form_class <span class="token operator">=</span> ClassificationEditForm    template_name <span class="token operator">=</span> <span class="token string">'myadmin/classification_edit.html'</span>    <span class="token keyword">def</span> <span class="token function">get_success_url</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        messages<span class="token punctuation">.</span>success<span class="token punctuation">(</span>self<span class="token punctuation">.</span>request<span class="token punctuation">,</span> <span class="token string">"保存成功"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> reverse<span class="token punctuation">(</span><span class="token string">'myadmin:classification_edit'</span><span class="token punctuation">,</span> kwargs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'pk'</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>kwargs<span class="token punctuation">[</span><span class="token string">'pk'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编辑页面和添加页面很相似<br>###删除功能<br>最后是删除功能，是通过ajax来实现的，ajax代码位于static/js/myadmin/classification_list.js，<br>在ajax中，通过调用删除接口classification_delete来实现删除功能，</p><p>接口classification_delete的代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@ajax_required</span><span class="token decorator annotation punctuation">@require_http_methods</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">classification_delete</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    classification_id <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">[</span><span class="token string">'classification_id'</span><span class="token punctuation">]</span>    instance <span class="token operator">=</span> Classification<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span>classification_id<span class="token punctuation">)</span>    instance<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"success"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Django视频网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django视频网站搭建--step08后台登录</title>
      <link href="/post/django-shi-pin-wang-zhan-da-jian/step08-hou-tai-deng-lu/"/>
      <url>/post/django-shi-pin-wang-zhan-da-jian/step08-hou-tai-deng-lu/</url>
      
        <content type="html"><![CDATA[<p>#后台登录功能<br>从本讲起，我们会介绍后台管理系统的开发，后台管理</p><p>主要是对数据库中的数据进行增、删、改、查的操作，满足网站管理员对网站的管理与维护的需求。</p><p>其实，django自带的也有一个后台管理系统（/admin），但是自带的后台非常简陋，</p><p>无论是界面，还是功能上，都无法满足用户的需求，因此，需要自己开发了一套后台管理系统。<br>##创建新的app<br>后台管理属于一个单独的模块，我们创建一个新的应用，命名为myadmin</p><pre class="line-numbers language-shell" data-language="shell"><div class="caption"><span>script</span></div><code class="language-shell">python3 manage.py startapp myadmin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后的功能都是基于myadmin来实现的。</p><p>因为前面我们已经创建了user模块，所以此处的登录功能是基于之前的user模块来实现的。<br>##添加路由<br>首先在myadmin/urls.py中添加登录和登出的路由</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> viewsapp_name <span class="token operator">=</span> <span class="token string">'myadmin'</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'login/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>login<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'logout/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>logout<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'logout'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们来写login函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth <span class="token keyword">import</span> authenticate<span class="token punctuation">,</span> login <span class="token keyword">as</span> auth_login<span class="token punctuation">,</span> logout <span class="token keyword">as</span> auth_logout<span class="token comment"># 复用userprofile中的UserLoginForm</span><span class="token keyword">from</span> userprofile<span class="token punctuation">.</span>forms <span class="token keyword">import</span> UserLoginForm<span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        form <span class="token operator">=</span> UserLoginForm<span class="token punctuation">(</span>request<span class="token operator">=</span>request<span class="token punctuation">,</span> data<span class="token operator">=</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>        <span class="token keyword">if</span> form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            username <span class="token operator">=</span> form<span class="token punctuation">.</span>cleaned_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>            password <span class="token operator">=</span> form<span class="token punctuation">.</span>cleaned_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span>            user <span class="token operator">=</span> authenticate<span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">,</span> password<span class="token operator">=</span>password<span class="token punctuation">)</span>            <span class="token keyword">if</span> user <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">and</span> user<span class="token punctuation">.</span>is_staff<span class="token punctuation">:</span>                auth_login<span class="token punctuation">(</span>request<span class="token punctuation">,</span> user<span class="token punctuation">)</span>                <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'myadmin:index'</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                form<span class="token punctuation">.</span>add_error<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'请输入管理员账号'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        form <span class="token operator">=</span> UserLoginForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'myadmin/login.html'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'form'</span><span class="token punctuation">:</span> form<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先这里复用了之前创建的 表单UserLoginForm<br>这里我们使用了user模型中的一个字段is_staff，用它来表示是否是管理员，<br>所以通过if user is not None and user.is_staff来判断管理员，如果是管理员，则auth_login登录并redirect跳转到主页。</p><p>下面我们来实现logout函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">logout</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    auth_logout<span class="token punctuation">(</span>request<span class="token punctuation">)</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'myadmin:login'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>登出后，直接跳转到login页面。</p>]]></content>
      
      
      <categories>
          
          <category> Django视频网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django视频网站搭建--step4前端页面整合</title>
      <link href="/post/django-shi-pin-wang-zhan-da-jian/step4-qian-duan-ye-mian-zheng-he/"/>
      <url>/post/django-shi-pin-wang-zhan-da-jian/step4-qian-duan-ye-mian-zheng-he/</url>
      
        <content type="html"><![CDATA[<p>#前端页面整合<br>在本讲中，我们开始前端页面整合</p><p>在开发过程中，前端页面也很重要，本次内容简单的对前面三节内容的前端页面做一个简单的整合</p><p>尘归尘，土归土，内容整理之后会讲内容看的更加清晰</p><h1 id="基础页面"><a href="#基础页面" class="headerlink" title="基础页面"></a>基础页面</h1><p>基础页面包括，header base footer三个部分</p><h2 id="base页面"><a href="#base页面" class="headerlink" title="base页面"></a>base页面</h2><p>所有的页面都起始于这个页面</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&#123;% load static %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html; charset=UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>基于Django的视综合网站<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!-- 当前页面网站标题 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>&#123;% block title %&#125;&#123;% endblock %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 引入semantic-ui文件        --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% static <span class="token punctuation">'</span>semantic-ui/semantic.min.css<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% static <span class="token punctuation">'</span>css/semantic.custom.css<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% static <span class="token punctuation">'</span>css/style.css<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &#123;% block css %&#125;&#123;% endblock css %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>&#123;% include "base/header.html" %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui container<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>v-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &#123;% block content %&#125;    &#123;% endblock content %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>&lt;<span class="token comment">&lt;!-- 引入注脚 --></span>&#123;% include "base/footer.html" %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% static <span class="token punctuation">'</span>semantic-ui/semantic.min.js<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>&#123;% block script %&#125; &#123;% endblock script %&#125;&#123;% block modal %&#125; &#123;% endblock modal %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个页面可以分为几个部分<br>head 内容， 引入基础的设置，然后时页面标题， 必要的前端布局文件 其他的css文件<br>body 部分， 先是导入header 文件， 留下cotent内容，其他页面导入的部分，都放在这个地方</p><p>footer内容  必要的footer内容， 然后引入JavaScript内容，其他的script内容和modal内容</p><h2 id="header页面"><a href="#header页面" class="headerlink" title="header页面"></a>header页面</h2><p>header 页面放入 导航栏内容， 以及菜单栏内容<br>这里做个示范，后面会进行修改</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&#123;% load static %&#125; <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui inverted menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Brand<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>active item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Vitae<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui dropdown item<span class="token punctuation">"</span></span> <span class="token attr-name">tabindex</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            Dropdown<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dropdown icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>menu<span class="token punctuation">"</span></span> <span class="token attr-name">tabindex</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Action<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Another Action<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Something else here<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>divider<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Separated Link<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>divider<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>One more separated link<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>v-header-extra<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        &#123;% include "base/menu.html" %&#125;     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="footer页面"><a href="#footer页面" class="headerlink" title="footer页面"></a>footer页面</h2><p>footer页面一般放一些备案信息，网站名字，logo,相关链接等</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&#123;% load static %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui vertical footer segment <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui center aligned container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui divider<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--        &lt;img src="&#123;% static 'img/logo.png' %&#125;" class="ui centered mini image">--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui horizontal   small divided link list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>自主开发博客综合网站公司<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>联系我们<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>京ICP证090287<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>#分类页面</p><p>##用户界面</p><p>它在registration文件夹下<br>登录页面， 继承base文件夹的base内容，然后添加自己的内容</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&#123;% extends "base/base.html" %&#125;&#123;% load static %&#125;&#123;% block title %&#125; 登录 &#123;% endblock title %&#125;&#123;% block content %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>v-account-body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui middle aligned center aligned grid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column v-account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui teal image header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                登录账户        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui large form<span class="token punctuation">"</span></span> <span class="token attr-name">novalidate</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>userprofile:login<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span>              <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            &#123;% csrf_token %&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui stacked segment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui left icon input<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>                        &#123;&#123;form.username&#125;&#125;                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui left icon input<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lock icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>                        &#123;&#123;form.password&#125;&#125;                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>next<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123; next &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui fluid large teal submit button<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            &#123;% include "base/form_errors.html" %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                还没有账号？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>userprofile:signup<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>&#123;% endblock content %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="视频界面"><a href="#视频界面" class="headerlink" title="视频界面"></a>视频界面</h2>]]></content>
      
      
      <categories>
          
          <category> Django视频网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django视频网站搭建--step2注册登录功能</title>
      <link href="/post/django-shi-pin-wang-zhan-da-jian/step2-zhu-ce-deng-lu-gong-neng/"/>
      <url>/post/django-shi-pin-wang-zhan-da-jian/step2-zhu-ce-deng-lu-gong-neng/</url>
      
        <content type="html"><![CDATA[<p>#注册登录功能</p><p>用户注册登录是一个网站的基本功能，django对这部分进行了很好的封装，</p><p>我们只需要在django的基础上做些简单的修改就可以达到我们想要的效果。</p><p>在本讲中，我们会用到user中的用户授权方面的一些函数，还会对django中的user进行扩展，以及django中的form验证。</p><p>#创建users应用</p><p>django的设计哲学是，一个应用只提供一种功能，比如users应用只提供用户相关功能，comment应用只提供评论相关功能，</p><p>这能提高代码的重复利用率。</p><p>在django中，只需要下面一条命令，即可建立users应用</p><pre><code>python3 manage.py startapp userprofile</code></pre><p>###建表</p><p>我们需要一个用户表，用来实现登录注册功能，虽然django已经自带来用户登录注册功能，也有相应的表，但是不符合中国人习惯，需要我们对user模型进行自定义。</p><p>实现自定义User模型最简单的方式就是继承AbstractBaseUser，AbstractBaseUser实现了User的核心功能，我们只需加一些额外的字段进行补充即可。</p><p>User模型原有的字段有：</p><pre><code>usernamepasswordlast_loginis_superuserfirst_namelast_nameemailis_staffis_activedate_joined</code></pre><p>这些都是最基本的字段，并不能满足我们的需求。</p><p>根据网站自身业务，我们又添加了下面的字段</p><pre><code>nickname(昵称)avatar(头像)mobile(手机号)gender(性别)subscribe(是否订阅)</code></pre><p>我们只需在userprofile/models.py中写入代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> AbstractUser<span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>AbstractUser<span class="token punctuation">)</span><span class="token punctuation">:</span>    GENDER_CHOICES <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    nickname <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>    avatar <span class="token operator">=</span> models<span class="token punctuation">.</span>FileField<span class="token punctuation">(</span>upload_to<span class="token operator">=</span><span class="token string">'avatar/'</span><span class="token punctuation">)</span>    mobile <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">13</span><span class="token punctuation">)</span>    gender <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> choices<span class="token operator">=</span>GENDER_CHOICES<span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    subscribe <span class="token operator">=</span> models<span class="token punctuation">.</span>BooleanField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        db_table <span class="token operator">=</span> <span class="token string">"tb_user"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>gender是性别字段，其中用到了choices=GENDER_CHOICES。这种方式常常用在下拉框或单多选框，例如 M对应男 F对应女。</code></pre><p>##url配置</p><p>在userprofile文件夹下面，新建urls.py文件，写入登录、注册和退出的url信息。</p><p>app_name是命名空间，我们命名为‘users’。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> viewsapp_name <span class="token operator">=</span> <span class="token string">'userprofile'</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'login/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>login<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'signup/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>signup<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'signup'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'logout/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>logout<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'logout'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时更改主路由表，即修改工程文件下的urls.py</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> includeurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'userprofile/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'userprofile.urls'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后需要注册这个APP， 在admin.py 中添加信息如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Useradmin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>User<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同时将这个app注册到设置中，在setting文件中添加</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'django.contrib.admin'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.auth'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.contenttypes'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.sessions'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.messages'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.staticfiles'</span><span class="token punctuation">,</span>    <span class="token string">'users'</span><span class="token punctuation">,</span>   <span class="token comment"># 添加users这个app</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>否则可能会报错</p><pre class="line-numbers language-none"><code class="language-none">RuntimeError: Model class apps.users.models.User doesn&#39;t declare an explicit app_label and isn&#39;t in an application in INSTALLED_APPS.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>同时，由于我们将要复写django自带的User类，需要添加配置信息到setting中</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">AUTH_USER_MODEL <span class="token operator">=</span> <span class="token string">'userprofile.User'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>让Django中自带的user不起作用即可</code></pre><p>否则会出现如下错误：</p><pre><code>auth.User.groups: (fields.E304) Reverse accessor for &#39;User.groups&#39; clasheswith reverse accessor for &#39;UserProfile.groups&#39;.</code></pre><p>url路由配置好了，我们下面就开始写视图函数代码了<br>##注册表单</p><p>我们先来写注册函数，写注册，当然得有注册表单了，幸运的是，在django中，可以用代码来生成表单。</p><p>我们只需在userprofile下新建forms.py文件，然后写入注册表单的代码。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django <span class="token keyword">import</span> forms<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>forms <span class="token keyword">import</span> UserCreationForm<span class="token punctuation">,</span> AuthenticationForm<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">class</span> <span class="token class-name">UserLoginForm</span><span class="token punctuation">(</span>AuthenticationForm<span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> forms<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>min_length<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>max_length<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>                               error_messages<span class="token operator">=</span><span class="token punctuation">&#123;</span>                                   <span class="token string">'min_length'</span><span class="token punctuation">:</span> <span class="token string">'用户名不少于4个字符'</span><span class="token punctuation">,</span>                                   <span class="token string">'max_length'</span><span class="token punctuation">:</span> <span class="token string">'用户名不能多于30个字符'</span><span class="token punctuation">,</span>                                   <span class="token string">'required'</span><span class="token punctuation">:</span> <span class="token string">'用户名不能为空'</span><span class="token punctuation">,</span>                               <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                               widget<span class="token operator">=</span>forms<span class="token punctuation">.</span>TextInput<span class="token punctuation">(</span>attrs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'placeholder'</span><span class="token punctuation">:</span> <span class="token string">'请输入用户名'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> forms<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>min_length<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span>max_length<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>                               error_messages<span class="token operator">=</span><span class="token punctuation">&#123;</span>                                   <span class="token string">'min_length'</span><span class="token punctuation">:</span> <span class="token string">'密码不少于8个字符'</span><span class="token punctuation">,</span>                                   <span class="token string">'max_length'</span><span class="token punctuation">:</span> <span class="token string">'密码不能多于30个字符'</span><span class="token punctuation">,</span>                                   <span class="token string">'required'</span><span class="token punctuation">:</span> <span class="token string">'密码不能为空'</span><span class="token punctuation">,</span>                               <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                               widget<span class="token operator">=</span>forms<span class="token punctuation">.</span>PasswordInput<span class="token punctuation">(</span>attrs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'placeholder'</span><span class="token punctuation">:</span> <span class="token string">'请输入密码'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> User        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token string">'password'</span><span class="token punctuation">]</span>    error_messages <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'invalid_login'</span><span class="token punctuation">:</span> <span class="token string">'用户名或密码错误'</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">SignUpForm</span><span class="token punctuation">(</span>UserCreationForm<span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> forms<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>min_length<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>                               error_messages<span class="token operator">=</span><span class="token punctuation">&#123;</span>                                   <span class="token string">'min_length'</span><span class="token punctuation">:</span> <span class="token string">'用户名不少于4个字符'</span><span class="token punctuation">,</span>                                   <span class="token string">'max_length'</span><span class="token punctuation">:</span> <span class="token string">'用户名不能多于30个字符'</span><span class="token punctuation">,</span>                                   <span class="token string">'required'</span><span class="token punctuation">:</span> <span class="token string">'用户名不能为空'</span><span class="token punctuation">,</span>                               <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                               widget<span class="token operator">=</span>forms<span class="token punctuation">.</span>TextInput<span class="token punctuation">(</span>attrs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'placeholder'</span><span class="token punctuation">:</span> <span class="token string">'请输入用户名'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    password1 <span class="token operator">=</span> forms<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>min_length<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>                                error_messages<span class="token operator">=</span><span class="token punctuation">&#123;</span>                                    <span class="token string">'min_length'</span><span class="token punctuation">:</span> <span class="token string">'密码不少于8个字符'</span><span class="token punctuation">,</span>                                    <span class="token string">'max_length'</span><span class="token punctuation">:</span> <span class="token string">'密码不能多于30个字符'</span><span class="token punctuation">,</span>                                    <span class="token string">'required'</span><span class="token punctuation">:</span> <span class="token string">'密码不能为空'</span><span class="token punctuation">,</span>                                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                                widget<span class="token operator">=</span>forms<span class="token punctuation">.</span>PasswordInput<span class="token punctuation">(</span>attrs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'placeholder'</span><span class="token punctuation">:</span> <span class="token string">'请输入密码'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    password2 <span class="token operator">=</span> forms<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>min_length<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span>max_length<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>                                error_messages<span class="token operator">=</span><span class="token punctuation">&#123;</span>                                    <span class="token string">'min_length'</span><span class="token punctuation">:</span> <span class="token string">'密码不少于8个字符'</span><span class="token punctuation">,</span>                                    <span class="token string">'max_length'</span><span class="token punctuation">:</span> <span class="token string">'密码不能多于30个字符'</span><span class="token punctuation">,</span>                                    <span class="token string">'required'</span><span class="token punctuation">:</span> <span class="token string">'密码不能为空'</span><span class="token punctuation">,</span>                                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                                widget<span class="token operator">=</span>forms<span class="token punctuation">.</span>PasswordInput<span class="token punctuation">(</span>attrs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'placeholder'</span><span class="token punctuation">:</span> <span class="token string">'请确认密码'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> User        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token string">'password1'</span><span class="token punctuation">,</span> <span class="token string">'password2'</span><span class="token punctuation">,</span><span class="token punctuation">)</span>    error_messages <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'password_mismatch'</span><span class="token punctuation">:</span> <span class="token string">'两次密码不一致'</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们的表单一共有三个字段：username、password1、password2，它们都是CharField类型，widget分别是TextInput和PasswordInput。</p><p>而且django是自带验证的，只需要我们配置好error_messages字典，当form验证的时候，就会显示我们自定义的错误信息。<br>有了注册表单后，就可以在前端模板和视图函数中使用它。<br>###注册视图<br>下面是注册视图函数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth <span class="token keyword">import</span> authenticate<span class="token punctuation">,</span> login <span class="token keyword">as</span> auth_login<span class="token punctuation">,</span> logout <span class="token keyword">as</span> auth_logout<span class="token keyword">from</span> <span class="token punctuation">.</span>forms <span class="token keyword">import</span> SignUpForm<span class="token punctuation">,</span> UserLoginForm<span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">signup</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        form <span class="token operator">=</span> SignUpForm<span class="token punctuation">(</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>        <span class="token keyword">if</span> form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            form<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            username <span class="token operator">=</span> form<span class="token punctuation">.</span>cleaned_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>            raw_password1 <span class="token operator">=</span> form<span class="token punctuation">.</span>cleaned_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password1'</span><span class="token punctuation">)</span>            user <span class="token operator">=</span> authenticate<span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">,</span> password<span class="token operator">=</span>raw_password1<span class="token punctuation">)</span>            auth_login<span class="token punctuation">(</span>request<span class="token punctuation">,</span> user<span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'home'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>form<span class="token punctuation">.</span>errors<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        form <span class="token operator">=</span> SignUpForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'registration/signup.html'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'form'</span><span class="token punctuation">:</span> form<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">logout</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    auth_logout<span class="token punctuation">(</span>request<span class="token punctuation">)</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'home'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在signup函数中，我们通过form = SignUpForm初始化一个表单，并在render函数中传递给模板。</p><p>注册模板文件写在了templates/registration/signup.html</p><p>关键代码是</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui large form<span class="token punctuation">"</span></span> <span class="token attr-name">novalidate</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>userprofile:signup<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>            &#123;% csrf_token %&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui stacked segment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                     &#123;&#123;form.username&#125;&#125;                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                     &#123;&#123;form.password1&#125;&#125;                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                     &#123;&#123;form.password2&#125;&#125;                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ui submit button<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            &#123;% include "base/form_errors.html" %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>form的action为</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&#123;% url 'users:signup' %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即在url.py中定义的signup函数。<br>通过post请求传递给signup，在signup中，通过如下四行代码来实现注册，并自动登录的。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">username <span class="token operator">=</span> form<span class="token punctuation">.</span>cleaned_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>raw_password1 <span class="token operator">=</span> form<span class="token punctuation">.</span>cleaned_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password1'</span><span class="token punctuation">)</span>user <span class="token operator">=</span> authenticate<span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">,</span> password<span class="token operator">=</span>raw_password1<span class="token punctuation">)</span>auth_login<span class="token punctuation">(</span>request<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>###登录函数</p><p>登录函数与注册函数的模式是一样的，都是先写form，写模板，最后写视图函数。<br>由于form和模板的代码和注册功能类似，这里就不贴了，大家可以上github查看。</p><p>重点讲一下login视图函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        next_url <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'next'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span>        form <span class="token operator">=</span> UserLoginForm<span class="token punctuation">(</span>request<span class="token operator">=</span>request<span class="token punctuation">,</span> data<span class="token operator">=</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>        <span class="token keyword">if</span> form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            username <span class="token operator">=</span> form<span class="token punctuation">.</span>cleaned_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>            password <span class="token operator">=</span> form<span class="token punctuation">.</span>cleaned_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span>            user <span class="token operator">=</span> authenticate<span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">,</span> password<span class="token operator">=</span>password<span class="token punctuation">)</span>            <span class="token keyword">if</span> user <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                auth_login<span class="token punctuation">(</span>request<span class="token punctuation">,</span> user<span class="token punctuation">)</span>                <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>next_url<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>form<span class="token punctuation">.</span>errors<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        next_url <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'next'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span>        form <span class="token operator">=</span> UserLoginForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>next_url<span class="token punctuation">)</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'registration/login.html'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'form'</span><span class="token punctuation">:</span> form<span class="token punctuation">,</span> <span class="token string">'next'</span><span class="token punctuation">:</span> next_url<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>```    在login函数中，我们多了一个next_url变量，<span class="token builtin">next</span>对应的是登录后要跳转的url，其实这是一种场景，假如你在购物网站买东西，最后付款的时候，会跳转到付款页，假如你没有登录，网站会提示你登录，登录后，会再次跳转到付款页。当然了，跳转到登录页的时候，需要你在url后追加next_url参数，如 aaa<span class="token punctuation">.</span> com<span class="token operator">/</span>login<span class="token operator">/</span>?next_url<span class="token operator">=</span>bbb<span class="token punctuation">.</span> com这样用户登录后就会跳到bbb<span class="token punctuation">.</span> com<span class="token comment">###退出函数</span>```python<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth <span class="token keyword">import</span> authenticate<span class="token punctuation">,</span> login <span class="token keyword">as</span> auth_login<span class="token punctuation">,</span> logout <span class="token keyword">as</span> auth_logout<span class="token keyword">def</span> <span class="token function">logout</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    auth_logout<span class="token punctuation">(</span>request<span class="token punctuation">)</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'home'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>退出功能，仅需要一行代码 auth_logout(request) 就ok了。</p><p>##其他<br>###静态文件的配置<br>需要的静态文件都存放到static这个文件夹下统一管理<br>包含三个方面css img  js </p><p>在settings中添加如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">STATIC_URL <span class="token operator">=</span> <span class="token string">'/static/'</span>STATICFILES_DIRS <span class="token operator">=</span> <span class="token punctuation">(</span>    os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">"static"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用的semantic-ui插件<br>Semantic UI</p><p>这是一个语义化的UI框架，界面做的比较好，风格和bootstrap有点像，比较适用于响应式开发。</p><p>这个插件里面有一些访问谷歌的内容，直接引用的话，国内网络可能有的内容访问不了，或者加载比较慢<br><a href="https://cdn.bootcdn.net/ajax/libs/semantic-ui/2.4.1/semantic.min.css">https://cdn.bootcdn.net/ajax/libs/semantic-ui/2.4.1/semantic.min.css</a></p><p>所以最好还是从github上把这个插件下载下来，点击这里进入github <a href="https://github.com/Semantic-Org/Semantic-UI">https://github.com/Semantic-Org/Semantic-UI</a><br>直接把整个项目作为zip下载下来。</p><p>在dist文件夹中将semantic.min.js和semantic.min.css复制到文件夹中，这里文件夹的结构和上面的Element-UI差不多，新建一个semantic-ui文件夹放置。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 引入semantic-ui文件        --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% static <span class="token punctuation">'</span>semantic-ui/semantic.min.css<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% static <span class="token punctuation">'</span>semantic-ui/semantic.min.js<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% static <span class="token punctuation">'</span>css/semantic.custom.css<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% static <span class="token punctuation">'</span>css/style.css<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>###template文件的配置<br>所有视图文件即views文件统一放入templates文件夹下<br>将其添加到设置中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">TEMPLATES <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token string">'BACKEND'</span><span class="token punctuation">:</span> <span class="token string">'django.template.backends.django.DjangoTemplates'</span><span class="token punctuation">,</span>        <span class="token string">'DIRS'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'templates'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 配置视图文件</span>        <span class="token string">'APP_DIRS'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>        <span class="token string">'OPTIONS'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">'context_processors'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token string">'django.template.context_processors.debug'</span><span class="token punctuation">,</span>                <span class="token string">'django.template.context_processors.request'</span><span class="token punctuation">,</span>                <span class="token string">'django.contrib.auth.context_processors.auth'</span><span class="token punctuation">,</span>                <span class="token string">'django.contrib.messages.context_processors.messages'</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Django视频网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django综合篇之自定义Command生成初始数据</title>
      <link href="/post/django-quan-wang-zhan-da-jian/django-zong-he-pian-zhi-zi-ding-yi-command-sheng-cheng-chu-shi-shu-ju/"/>
      <url>/post/django-quan-wang-zhan-da-jian/django-zong-he-pian-zhi-zi-ding-yi-command-sheng-cheng-chu-shi-shu-ju/</url>
      
        <content type="html"><![CDATA[<p>#Django–自定义 Command 命令<br>Django 对于命令的添加有一套规范，你可以为每个app 指定命令。</p><p>通俗一点讲，比如在使用manage.py文件执行命令的时候，可以自定制自己的命令，来实现命令的扩充。</p><p>##commands的创建</p><pre><code>1.在app内创建一个management的python目录2.在management目录里面创建commands的python文件夹3.在commands文件夹下创建任意py文件</code></pre><p>此时py文件名就是你的自定制命令，可以使用下面方式执行</p><pre class="line-numbers language-shell" data-language="shell"><div class="caption"><span>script</span></div><code class="language-shell">python manage.py 命令名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Django的Command命令是要放在一个app的management/commands目录下的。</p><p>请确保management和management/commands目录内都包含__init__.py文件</p><p>  首先对于文件名没什么要求，内部需要定义一个Command类并继承BaseCommand类或其子类。</p><p>它必须定义一个Command类并扩展自BaseCommand或其子类。</p><pre><code>其中help是command功能作用简介，handle函数是主处理程序，add_arguments函数是用来接收可选参数的</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>management<span class="token punctuation">.</span>base <span class="token keyword">import</span> BaseCommand<span class="token punctuation">,</span> CommandError<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> ArticlePost  自己的<span class="token keyword">class</span> <span class="token class-name">Command</span><span class="token punctuation">(</span>BaseCommand<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">help</span> <span class="token operator">=</span> <span class="token string">'Closes the specified article_id'</span>    <span class="token keyword">def</span> <span class="token function">add_arguments</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parser<span class="token punctuation">)</span><span class="token punctuation">:</span>        parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'article_id'</span><span class="token punctuation">,</span> nargs<span class="token operator">=</span><span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">handle</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>options<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> article_id <span class="token keyword">in</span> options<span class="token punctuation">[</span><span class="token string">'article_id'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                article <span class="token operator">=</span> ArticlePost<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pk<span class="token operator">=</span>article_id<span class="token punctuation">)</span>            <span class="token keyword">except</span> Poll<span class="token punctuation">.</span>DoesNotExist<span class="token punctuation">:</span>                <span class="token keyword">raise</span> CommandError<span class="token punctuation">(</span><span class="token string">'article "%s" does not exist'</span> <span class="token operator">%</span> article_id<span class="token punctuation">)</span>            poll<span class="token punctuation">.</span>opened <span class="token operator">=</span> <span class="token boolean">False</span>            poll<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Successfully closed article "%s"'</span> <span class="token operator">%</span> article_id<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可选参数</p><p>可使用add_argument（）方法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># __author__ = 'dandy'</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>management<span class="token punctuation">.</span>base <span class="token keyword">import</span> BaseCommand<span class="token keyword">class</span> <span class="token class-name">Command</span><span class="token punctuation">(</span>BaseCommand<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">add_arguments</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parser<span class="token punctuation">)</span><span class="token punctuation">:</span>        parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'aaa'</span><span class="token punctuation">,</span> nargs<span class="token operator">=</span><span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">)</span>        parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--delete'</span><span class="token punctuation">,</span>                            action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span>                            dest<span class="token operator">=</span><span class="token string">'delete'</span><span class="token punctuation">,</span>                            default<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                            <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'Delete poll instead of closing it'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">handle</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>options<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>options里面直接取参数就可以了。<br>方法<br>返回django版本号：BaseCommand.get_version()<br>命令的真正逻辑。子类必须实现这个方法。：BaseCommand.handle()</p><p>##将本地内容最为初始数据写入文章</p><p>最主要的就是获取本地文章列表</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">current_article_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'md'</span><span class="token punctuation">)</span><span class="token comment"># 通过BASE_DIR 找到存贮文章的目录</span><span class="token keyword">print</span><span class="token punctuation">(</span>current_article_dir<span class="token punctuation">)</span>article_lists <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>getstatusoutput<span class="token punctuation">(</span><span class="token string">'ls %s'</span> <span class="token operator">%</span> current_article_dir<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>  <span class="token comment">#通过subprocess 命令得到当前目录下的内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最终实现：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> subprocess<span class="token keyword">from</span> myblog<span class="token punctuation">.</span>settings <span class="token keyword">import</span> BASE_DIR<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> ArticlePost<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth <span class="token keyword">import</span> get_user_model<span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>management<span class="token punctuation">.</span>base <span class="token keyword">import</span> BaseCommand<span class="token keyword">class</span> <span class="token class-name">Command</span><span class="token punctuation">(</span>BaseCommand<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">help</span> <span class="token operator">=</span> <span class="token string">'create blog data'</span>    <span class="token keyword">def</span> <span class="token function">handle</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>options<span class="token punctuation">)</span><span class="token punctuation">:</span>        user <span class="token operator">=</span> get_user_model<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get_or_create<span class="token punctuation">(</span>            email<span class="token operator">=</span><span class="token string">'test@test.com'</span><span class="token punctuation">,</span> username<span class="token operator">=</span><span class="token string">'测试用户'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'test123456'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        current_article_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'md'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>current_article_dir<span class="token punctuation">)</span>        article_lists <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>getstatusoutput<span class="token punctuation">(</span><span class="token string">'ls %s'</span> <span class="token operator">%</span> current_article_dir<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> article_lists<span class="token punctuation">:</span>            title <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            f_flag <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>current_article_dir<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>            body <span class="token operator">=</span> f_flag<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            f_flag<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>            article <span class="token operator">=</span> ArticlePost<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get_or_create<span class="token punctuation">(</span>                title<span class="token operator">=</span>title<span class="token punctuation">,</span>                body<span class="token operator">=</span>body<span class="token punctuation">,</span>                author<span class="token operator">=</span>user<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            article<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span>self<span class="token punctuation">.</span>style<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">(</span><span class="token string">'create blog data \n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Django全网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--38.模板过滤器和标签</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/38.mo-ban-guo-lu-qi-he-biao-qian/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/38.mo-ban-guo-lu-qi-he-biao-qian/</url>
      
        <content type="html"><![CDATA[<p>现在我们已经很熟悉Django的MTV模式了。模板（template）负责如何去展示数据，而视图（view）负责筛选出正确的数据。因此通常来说逻辑都是放到视图中的，但模板也需要一些<strong>和表示相关的逻辑</strong>：比如循环展示（如<code>&#123;% for ... %&#125;</code>）、或者以某种特定格式输出（如<code>&#123;&#123; ...|date:'Y-m-d' &#125;&#125;</code>）等，这些功能都是靠模板的<strong>过滤器（filters）</strong>和<strong>标签（tags）</strong>实现的。</p><p>Django的模板语言包含了很多内置的过滤器和标签，设计目的是满足应用需要占位逻辑需求。但有的时候这些通用的功能满足不了你的某些需求，这时候就需要自定义过滤器和标签来实现了。</p><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><p>要在Django中使用模板过滤器或标签，就首先得<strong>注册</strong>它们。</p><p>注册方法如下：</p><ul><li>在APP中新建名为<code>templatetags</code>的目录（方便起见，教程选择了<code>article</code>这个APP）</li><li>在此目录中新建名为<code>__init__.py</code>的空文件，使得此目录被视作一个Python的包</li><li>在此目录中新建python文件（比如<code>my_filters_and_tags.py</code>），就可以在里面愉快的写代码啦</li></ul><p>完成后的目录结构如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>    __init__<span class="token punctuation">.</span>py    views<span class="token punctuation">.</span>py    models<span class="token punctuation">.</span>py    <span class="token comment"># 新增目录</span>    templatetags<span class="token operator">/</span>        __init__<span class="token punctuation">.</span>py  <span class="token comment"># 空文件</span>        my_filters_and_tags<span class="token punctuation">.</span>py  <span class="token comment"># 即将写代码的地方</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>请注意</strong>：</p><ul><li>目录必须位于已注册的APP中，这是出于安全性的考虑</li><li>新建目录后，必须手动重启服务器，里面的过滤器和标签才能生效</li></ul><p>前置条件就完成了，然后需要将其添加到配置文件中去</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">TEMPLATES <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token string">'OPTIONS'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">'context_processors'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                   <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'libraries'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">'my_customs_tag'</span><span class="token punctuation">:</span> <span class="token string">'yourappname.templatetags.yourfiletername'</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来我们看看如何写一个模板过滤器。</p><h2 id="模板过滤器"><a href="#模板过滤器" class="headerlink" title="模板过滤器"></a>模板过滤器</h2><p>过滤器<code>filter</code>的表现形式为紧跟在上下文后面的管道符<code>|</code>，管道符后面是filter的名称：<code>&#123;&#123; ...|filter_name &#125;&#125;</code>。有的filter还可以带有参数：<code>&#123;&#123; ...|filter_name:var &#125;&#125;</code>。</p><blockquote><p>注意过滤器名称的冒号后面不能有空格。</p></blockquote><p><code>filter</code>这个名字可能会让你误认为它只是用来筛选某些特定数据的，但实际上它远不止这点功能。它可以改变上下文的最终展示效果，也可以将上下文通过运算输出为特定的值。</p><h3 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h3><p>要成为一个可用的<code>filter</code>，文件中必须包含一个名为 <code>register</code> 的模块级变量，它是一个 <code>template.Library</code> 实例，所有的<code>filters</code>均在其中注册。所以在<code>my_filter_and_tags.py</code>文件中输入以下内容:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>templatetags<span class="token operator">/</span>my_filters_and_tags<span class="token punctuation">.</span>py<span class="token keyword">from</span> django <span class="token keyword">import</span> templateregister <span class="token operator">=</span> template<span class="token punctuation">.</span>Library<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>接下来就可以像写普通的Python函数一样写过滤器了：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>templatetags<span class="token operator">/</span>my_filters_and_tags<span class="token punctuation">.</span>py<span class="token keyword">from</span> django <span class="token keyword">import</span> templateregister <span class="token operator">=</span> template<span class="token punctuation">.</span>Library<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@register<span class="token punctuation">.</span>filter</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'transfer'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">transfer</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""将输出强制转换为字符串 arg """</span>    <span class="token keyword">return</span> arg<span class="token decorator annotation punctuation">@register<span class="token punctuation">.</span>filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">lower</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""将字符串转换为小写字符"""</span>    <span class="token keyword">return</span> value<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>filter可以通过装饰器进行注册。若注册装饰器中携带了<code>name</code>参数，则其值为此filter的名称；若未携带，则函数名就是filter的名称。</li><li>filter必须是有一到两个参数的Python函数。第一个参数是上下文本身，第二个参数则由filter提供。举个栗子，在过滤器 <code>&#123;&#123; var|foo:"bar" &#125;&#125;</code> 中，变量 <code>var</code> 为第一个参数，变量 <code>bar</code> 则作为第二个参数。</li></ul><p>调用这些filter的方法是在模板文件中用<code>&#123;% load ... %&#125;</code>将filter文件的名称加载进去，像这样：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 任意模板文件中</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> load my_filters_and_tags <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token string">'ABC'</span><span class="token operator">|</span>transfer<span class="token punctuation">:</span><span class="token string">'cool'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span class="token comment"># 输出：'cool'</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token string">'ABC'</span><span class="token operator">|</span>lower <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span class="token comment"># 输出： 'abc'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="更人性化的时间"><a href="#更人性化的时间" class="headerlink" title="更人性化的时间"></a>更人性化的时间</h3><p>了解完filter的使用方法后，下面来写点更实用的功能。</p><p>对人类这种生物来说，<strong>相对时间</strong>通常比<strong>绝对时间</strong>要更容易阅读。<code>发表于 3天前</code>可以轻易得知此文章刚发表不久；而<code>发表于 2019年8月10日</code>你还得想想今天到底几号来着。</p><p>因此写一个显示相对日期的<code>time_since_zh</code>过滤器：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>templatetags<span class="token operator">/</span>my_filters_and_tags<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>utils <span class="token keyword">import</span> timezone<span class="token keyword">import</span> math<span class="token comment"># 获取相对时间</span><span class="token decorator annotation punctuation">@register<span class="token punctuation">.</span>filter</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'timesince_zh'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">time_since_zh</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>    now <span class="token operator">=</span> timezone<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>    diff <span class="token operator">=</span> now <span class="token operator">-</span> value    <span class="token keyword">if</span> diff<span class="token punctuation">.</span>days <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> diff<span class="token punctuation">.</span>seconds <span class="token operator">>=</span> <span class="token number">0</span> <span class="token keyword">and</span> diff<span class="token punctuation">.</span>seconds <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'刚刚'</span>    <span class="token keyword">if</span> diff<span class="token punctuation">.</span>days <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> diff<span class="token punctuation">.</span>seconds <span class="token operator">>=</span> <span class="token number">60</span> <span class="token keyword">and</span> diff<span class="token punctuation">.</span>seconds <span class="token operator">&lt;</span> <span class="token number">3600</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span>diff<span class="token punctuation">.</span>seconds <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"分钟前"</span>    <span class="token keyword">if</span> diff<span class="token punctuation">.</span>days <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> diff<span class="token punctuation">.</span>seconds <span class="token operator">>=</span> <span class="token number">3600</span> <span class="token keyword">and</span> diff<span class="token punctuation">.</span>seconds <span class="token operator">&lt;</span> <span class="token number">86400</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span>diff<span class="token punctuation">.</span>seconds <span class="token operator">/</span> <span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"小时前"</span>    <span class="token keyword">if</span> diff<span class="token punctuation">.</span>days <span class="token operator">>=</span> <span class="token number">1</span> <span class="token keyword">and</span> diff<span class="token punctuation">.</span>days <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span>diff<span class="token punctuation">.</span>days<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"天前"</span>    <span class="token keyword">if</span> diff<span class="token punctuation">.</span>days <span class="token operator">>=</span> <span class="token number">30</span> <span class="token keyword">and</span> diff<span class="token punctuation">.</span>days <span class="token operator">&lt;</span> <span class="token number">365</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span>diff<span class="token punctuation">.</span>days <span class="token operator">/</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"个月前"</span>    <span class="token keyword">if</span> diff<span class="token punctuation">.</span>days <span class="token operator">>=</span> <span class="token number">365</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span>diff<span class="token punctuation">.</span>days <span class="token operator">/</span> <span class="token number">365</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"年前"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码功能很简单，就是将文章发布时间和当前时间作比较，然后返回适当的字符串。</p><p>修改文章列表模板文件中与发布时间相关的代码，把刚写的filter用上：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/article/list.html...&#123;% load my_filters_and_tags %&#125;...<span class="token comment">&lt;!-- 旧代码&#123;&#123; article.created|date:'Y-m-d' &#125;&#125;--></span><span class="token comment">&lt;!-- 新代码 --></span>&#123;&#123; article.created|timesince_zh &#125;&#125;...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190813/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE231.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190813/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE231.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><blockquote><p>实际上Django内置了一个<code>timesince</code>过滤器，只不过显示日期是英文的，不够友好。</p></blockquote><h2 id="模板标签"><a href="#模板标签" class="headerlink" title="模板标签"></a>模板标签</h2><p>模板标签（tag）比过滤器更复杂，功能也更强大。</p><p>标签<code>tag</code>的表现形式为<code>&#123;% tag_name ... %&#125;</code>，比如我们非常熟悉的内置标签<code>&#123;% url ... %&#125;</code>、<code>&#123;% static ... %&#125;</code>等。如果内置标签满足不了你的需求，Django 提供了很多快捷方式，简化了编写绝大多数类型的标签过程。</p><h3 id="简单标签"><a href="#简单标签" class="headerlink" title="简单标签"></a>简单标签</h3><p><code>simple_tag</code>就是最重要的标签类型。标签的注册方法跟过滤器非常类似：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@register<span class="token punctuation">.</span>simple_tag</span><span class="token keyword">def</span> <span class="token function">change_http_to_https</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    new_url <span class="token operator">=</span> url<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'http://'</span><span class="token punctuation">,</span> <span class="token string">'https://'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> new_url<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>调用时同样记得在模板文件中用<code>&#123;% load... %&#125;</code>引入。用法你应该猜得到：<code>&#123;% change_http_to_https ... %&#125;</code>，这个标签的作用是将http链接替换为https链接。</p><blockquote><p>用 Django-allauth 进行微博登录，默认返回的用户头像是 http 链接（虽然微博有 https 版本的头像）。如果你的站点已经升级为 https 了，又不想花时间去研究微博的接口，那么这个标签就可以派上用场了。</p><p>顺带一说， Django-allauth 第三方登录的头像 url 保存在 <code>User.socialaccount_set.all.0.get_avatar_url</code> 中。</p></blockquote><p>下面这个例子可以返回指定格式的时间字符串：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetime<span class="token decorator annotation punctuation">@register<span class="token punctuation">.</span>simple_tag</span><span class="token keyword">def</span> <span class="token function">current_time</span><span class="token punctuation">(</span>format_string<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span>format_string<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用时你可以将其保存为模板变量，以便你在期望的位置多次调用：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token operator">%</span> current_time <span class="token string">"%Y-%m-%d %I:%M %p"</span> <span class="token keyword">as</span> the_time <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span>p<span class="token operator">></span>The time <span class="token keyword">is</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> the_time <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span>Again<span class="token punctuation">,</span> the time <span class="token keyword">is</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> the_time <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>模板标签也可以访问当前的上下文，只需要在注册标签时传入<code>takes_context</code>参数:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@register<span class="token punctuation">.</span>simple_tag</span><span class="token punctuation">(</span>takes_context<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">current_time</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> format_string<span class="token punctuation">)</span><span class="token punctuation">:</span>    timezone <span class="token operator">=</span> context<span class="token punctuation">[</span><span class="token string">'timezone'</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> your_get_current_time_method<span class="token punctuation">(</span>timezone<span class="token punctuation">,</span> format_string<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意，第一个参数必须是<code>context</code>。</p><p>与过滤器不同的是，标签可以接受任意数量的位置或关键字参数。例如:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@register<span class="token punctuation">.</span>simple_tag</span><span class="token keyword">def</span> <span class="token function">my_tag</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    warning <span class="token operator">=</span> kwargs<span class="token punctuation">[</span><span class="token string">'warning'</span><span class="token punctuation">]</span>    profile <span class="token operator">=</span> kwargs<span class="token punctuation">[</span><span class="token string">'profile'</span><span class="token punctuation">]</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在模板中调用时，任意数量的、以空格分隔的参数会被传递给模板标签。与 Python 中类似，关键字参数的赋值使用等号（”<code>=</code>“），且必须在位置参数后提供：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token operator">%</span> my_tag <span class="token number">123</span> <span class="token string">"abcd"</span> book<span class="token punctuation">.</span>title warning<span class="token operator">=</span>message profile<span class="token operator">=</span>user<span class="token punctuation">.</span>profile <span class="token operator">%</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="包含标签"><a href="#包含标签" class="headerlink" title="包含标签"></a>包含标签</h3><p>包含标签可以让另一个模板为当前模板渲染数据。听起来比较拗口，还是通过例子来理解。</p><p>假设现在有一个需求，是要在文章详情页面中，显示所有相关评论的发布时间。因此在<code>my_filters_and_tags.py</code>中写入：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">my_filters_and_tags<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token decorator annotation punctuation">@register<span class="token punctuation">.</span>inclusion_tag</span><span class="token punctuation">(</span><span class="token string">'article/tag_list.html'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_comments_pub_time</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""显示文章评论的发布时间"""</span>    comments <span class="token operator">=</span> article<span class="token punctuation">.</span>comments<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">'comments'</span><span class="token punctuation">:</span> comments<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数传入的参数可以是模板中的上下文变量。函数体内部取得了所有相关评论的查询集，然后把结果<code>comments</code>返回。注意返回结果是进入到<code>tag_list.html</code>这个模板中去了，因此新建它并写入：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/article/tag_list.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>&#123;% for comment in comments %&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span> &#123;&#123; comment.created &#125;&#125; <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>&#123;% endfor %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在文章详情页面的模板中，随便找一个位置写入：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/article/detail.html...&#123;% load my_filters_and_tags %&#125;...&#123;% show_comments_pub_time article %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>刷新详情页面，顺利的话就能看到所有评论的发表时间都展示出来了。</p><p>包含标签的另一个应用场景就是各种按钮了。有的按钮看上去长得都差不多，但是根据页面不同会有不同的功能，这时候也可以用包含标签来实现。</p><p>总之，包含标签可以将常用的模板代码打包成小组件，方便重复利用。</p><blockquote><p>目前的博客项目中暂时还用不到包含标签，所以放心的删除上面的代码吧。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>模板过滤器和标签，可以完成<strong>和表示相关的逻辑</strong>，从而使视图专注于业务核心逻辑，有利于组件化和逻辑分离。随着学习的深入，会逐渐体会到它的重要性。</p><p>本章对它们做了入门介绍，以便读者对其有初步的概念。更详细的解释请进一步阅读<a href="https://docs.djangoproject.com/en/2.2/howto/custom-template-tags/">Django官方文档</a>。</p><hr><ul><li>有疑问请在<a href="http://www.dusaiphoto.com/">杜赛的个人网站</a>留言，我会尽快回复。</li><li>或Email私信我：<a href="mailto:&#x64;&#117;&#115;&#x61;&#105;&#x70;&#x68;&#x6f;&#x74;&#x6f;&#64;&#102;&#111;&#120;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#109;">&#x64;&#117;&#115;&#x61;&#105;&#x70;&#x68;&#x6f;&#x74;&#x6f;&#64;&#102;&#111;&#120;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#109;</a></li><li>项目完整代码：<a href="https://github.com/stacklens/django_blog_tutorial">Django_blog_tutorial</a>添加</li></ul>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--32.多级评论</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/32.duo-ji-ping-lun/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/32.duo-ji-ping-lun/</url>
      
        <content type="html"><![CDATA[<p>现在我们的博客已经具有评论功能了。随着文章的评论者越来越多，有的时候评论者之间也需要交流，甚至部分评论还能合并成一个小的整体。因此最好是有某种方法可以将相关的评论聚集到一起，这时候<strong>多级评论</strong>就非常的有用了。</p><p>多级评论意味着你需要将模型重新组织为<strong>树形结构</strong>。“树根”是一级评论，而众多“树叶”则是次级评论。本教程会以第三方库<a href="https://github.com/django-mptt/django-mptt">django-mptt</a>为基础，开发多级评论功能。</p><blockquote><p>django-mptt模块包含了树形数据结构以及查询、修改树形数据的众多方法。</p><p>任何需要树形结构的地方，都可以用 django-mptt 来搭建。比如目录。</p></blockquote><p><strong>注意：</strong>本章新知识点较多，请读者做好心理准备，一定要耐心阅读。</p><h2 id="重构模型"><a href="#重构模型" class="headerlink" title="重构模型"></a>重构模型</h2><p>既然要建立树形结构，老的评论模型肯定是要修改了。</p><p>首先安装<code>django-mptt</code>：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token operator">></span> pip <span class="token function">install</span> django-mptt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装成功后，在配置中<strong>注册</strong>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">my_blog<span class="token operator">/</span>settings<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token string">'mptt'</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些你已经轻车熟路了。</p><p>接下来，修改<strong>评论模型</strong>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">comment<span class="token operator">/</span>models<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># django-mptt</span><span class="token keyword">from</span> mptt<span class="token punctuation">.</span>models <span class="token keyword">import</span> MPTTModel<span class="token punctuation">,</span> TreeForeignKey<span class="token comment"># 替换 models.Model 为 MPTTModel</span><span class="token keyword">class</span> <span class="token class-name">Comment</span><span class="token punctuation">(</span>MPTTModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment"># 新增，mptt树形结构</span>    parent <span class="token operator">=</span> TreeForeignKey<span class="token punctuation">(</span>        <span class="token string">'self'</span><span class="token punctuation">,</span>        on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">,</span>        null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        related_name<span class="token operator">=</span><span class="token string">'children'</span>    <span class="token punctuation">)</span>    <span class="token comment"># 新增，记录二级评论回复给谁, str</span>    reply_to <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>        User<span class="token punctuation">,</span>        null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">,</span>        related_name<span class="token operator">=</span><span class="token string">'replyers'</span>    <span class="token punctuation">)</span>        <span class="token comment"># 替换 Meta 为 MPTTMeta</span>    <span class="token comment"># class Meta:</span>    <span class="token comment">#     ordering = ('created',)</span>    <span class="token keyword">class</span> <span class="token class-name">MPTTMeta</span><span class="token punctuation">:</span>        order_insertion_by <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'created'</span><span class="token punctuation">]</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先引入<code>MPTT</code>相关模块，然后改动下列几个位置：</p><ul><li>模型<strong>不再继承</strong>内置的<code>models.Model</code>类，替换为<code>MPTTModel</code>，因此你的模型自动拥有了几个用于树形算法的新字段。（有兴趣的读者，可以在迁移好数据之后在SQLiteStudio中查看）</li><li><code>parent</code>字段是必须定义的，用于存储数据之间的关系，不要去修改它。</li><li><code>reply_to</code>外键用于存储<strong>被评论人</strong>。</li><li>将<code>class Meta</code>替换为<code>class MPTTMeta</code>，参数也有小的变化，这是模块的默认定义，实际功能是相同的。</li></ul><p>这些改动大部分都是<a href="https://django-mptt.readthedocs.io/en/latest/tutorial.html">django-mptt文档</a>的默认设置。需要说明的是这个<code>reply_to</code>。</p><p>先思考一下，多级评论是否允许无限级数？无限级数听起来很美好，但是嵌套的层级如果过多，反而会导致结构混乱，并且难以排版。所以这里就<strong>限制评论最多只能两级</strong>，超过两级的评论一律重置为两级，然后再将实际的被评论人存储在<code>reply_to</code>字段中。</p><blockquote><p>举例说明：一级评论人为 a，二级评论人为 b（parent 为 a），三级评论人为 c（parent 为 b）。因为我们不允许评论超过两级，因此将 c 的 parent 重置为 a，reply_to 记录为 b，这样就能正确追溯真正的被评论者了。</p></blockquote><p>模型修改完了，添加了很多非空的字段进去，因此最好<strong>先清空所有的评论数据</strong>，再进行数据迁移。</p><p>迁移时出现下面的提示也不要慌，</p><p>一律选择第 1 项、</p><p><strong>然后提示填入数据时，直接输入 0 （不要按照提示输入 timezone.now，这是无效值）</strong></p><p> 就可以了：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token operator">></span> python manage.py makemigrationsYou are trying to <span class="token function">add</span> a non-nullable field <span class="token string">'level'</span> to comment without a default<span class="token punctuation">;</span> we can<span class="token string">'t do that (the database needs something to populate existing rows).Please select a fix: 1) Provide a one-off default now (will be set on all existing rows with a null value for this column) 2) Quit, and let me add a default in models.pySelect an option: 1Please enter the default value now, as valid PythonThe datetime and django.utils.timezone modules are available, so you can do e.g. timezone.nowType '</span>exit' to <span class="token builtin class-name">exit</span> this prompt<span class="token operator">>></span><span class="token operator">></span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>要还不行，就把数据库文件删了重新迁移吧。开发阶段用点笨办法也没关系。</p></blockquote><p>数据迁移还是老规矩：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token operator">></span> python manage<span class="token punctuation">.</span>py makemigrations<span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token operator">></span> python manage<span class="token punctuation">.</span>py migrate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这就完成了。</p><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>前面章节已经写过一个视图<code>post_comment</code>用于处理评论了，我们将<strong>复用</strong>它，以求精简代码。</p><p>改动较大，代码全贴出来，请对照改动：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">comment<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 记得引入 Comment ！</span><span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Comment<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token decorator annotation punctuation">@login_required</span><span class="token punctuation">(</span>login_url<span class="token operator">=</span><span class="token string">'/userprofile/login/'</span><span class="token punctuation">)</span><span class="token comment"># 新增参数 parent_comment_id</span><span class="token keyword">def</span> <span class="token function">post_comment</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> article_id<span class="token punctuation">,</span> parent_comment_id<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    article <span class="token operator">=</span> get_object_or_404<span class="token punctuation">(</span>ArticlePost<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span>article_id<span class="token punctuation">)</span>    <span class="token comment"># 处理 POST 请求</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        comment_form <span class="token operator">=</span> CommentForm<span class="token punctuation">(</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>        <span class="token keyword">if</span> comment_form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            new_comment <span class="token operator">=</span> comment_form<span class="token punctuation">.</span>save<span class="token punctuation">(</span>commit<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>            new_comment<span class="token punctuation">.</span>article <span class="token operator">=</span> article            new_comment<span class="token punctuation">.</span>user <span class="token operator">=</span> request<span class="token punctuation">.</span>user            <span class="token comment"># 二级回复</span>            <span class="token keyword">if</span> parent_comment_id<span class="token punctuation">:</span>                parent_comment <span class="token operator">=</span> Comment<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span>parent_comment_id<span class="token punctuation">)</span>                <span class="token comment"># 若回复层级超过二级，则转换为二级</span>                new_comment<span class="token punctuation">.</span>parent_id <span class="token operator">=</span> parent_comment<span class="token punctuation">.</span>get_root<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">id</span>                <span class="token comment"># 被回复人</span>                new_comment<span class="token punctuation">.</span>reply_to <span class="token operator">=</span> parent_comment<span class="token punctuation">.</span>user                new_comment<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'200 OK'</span><span class="token punctuation">)</span>            new_comment<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>article<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"表单内容有误，请重新填写。"</span><span class="token punctuation">)</span>    <span class="token comment"># 处理 GET 请求</span>    <span class="token keyword">elif</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">:</span>        comment_form <span class="token operator">=</span> CommentForm<span class="token punctuation">(</span><span class="token punctuation">)</span>        context <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'comment_form'</span><span class="token punctuation">:</span> comment_form<span class="token punctuation">,</span>            <span class="token string">'article_id'</span><span class="token punctuation">:</span> article_id<span class="token punctuation">,</span>            <span class="token string">'parent_comment_id'</span><span class="token punctuation">:</span> parent_comment_id        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'comment/reply.html'</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span>    <span class="token comment"># 处理其他请求</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"仅接受GET/POST请求。"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要变化有3个地方：</p><ul><li>视图的参数<strong>新增</strong>了<code>parent_comment_id=None</code>。此参数代表<strong>父评论</strong>的<code>id</code>值，若为<code>None</code>则表示评论为一级评论，若有具体值则为多级评论。</li><li>如果视图处理的是多级评论，则用<code>MPTT</code>的<code>get_root()</code>方法将其<strong>父级重置为树形结构最底部的一级评论</strong>，然后在<code>reply_to</code>中保存实际的被回复人并保存。视图最终返回的是<code>HttpResponse</code>字符串，后面会用到。</li><li>新增处理<code>GET</code>请求的逻辑，用于<strong>给二级回复提供空白的表单</strong>。后面会用到。</li></ul><p>很好，现在视图中有一个<code>parent_comment_id</code>参数用于区分多级评论，因此就要求有的<code>url</code>传入此参数，有的不传入，像下面这样：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">comment<span class="token operator">/</span>urls<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token comment"># 已有代码，处理一级回复</span>    path<span class="token punctuation">(</span><span class="token string">'post-comment/&lt;int:article_id>'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>post_comment<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'post_comment'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment"># 新增代码，处理二级回复</span>    path<span class="token punctuation">(</span><span class="token string">'post-comment/&lt;int:article_id>/&lt;int:parent_comment_id>'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>post_comment<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'comment_reply'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两个<code>path</code>都使用了<strong>同一个视图函数</strong>，但是传入的<strong>参数却不一样多</strong>，仔细看。第一个<code>path</code>没有<code>parent_comment_id</code>参数，因此视图就使用了<strong>缺省值</strong><code>None</code>，达到了区分评论层级的目的。</p><h2 id="前端渲染"><a href="#前端渲染" class="headerlink" title="前端渲染"></a>前端渲染</h2><p>在前端的逻辑上，我们的理想很丰满：</p><ul><li>二级回复同样要使用富文本编辑器</li><li>回复时不能离开当前页面</li><li>多个ckeditor加载时，不能有性能问题</li></ul><p>然而理想越丰满，代码写得就越痛苦。</p><p>首先就是<code>detail.html</code>的代码要大改，主要集中在<strong>显示评论部分</strong>以及相关的<code>JavaScript</code>。</p><p>需要改动的地方先全部贴出来：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/article/detail.html...<span class="token comment">&lt;!-- 改动 显示评论 部分 --></span><span class="token comment">&lt;!-- 不要漏了 load mptt_tags！ --></span>&#123;% load mptt_tags %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>共有&#123;&#123; comments.count &#125;&#125;条评论<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 遍历树形结构 --></span>    &#123;% recursetree comments %&#125;        <span class="token comment">&lt;!-- 给 node 取个别名 comment --></span>        &#123;% with comment=node %&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% if comment.reply_to %&#125;                        offset-1 col-11                        &#123;% else %&#125;                        col-12                        &#123;% endif %&#125;<span class="token punctuation">"</span></span>            <span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> pink</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>                        &#123;&#123; comment.user &#125;&#125;                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>                     &#123;% if comment.reply_to %&#125;                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>far fa-arrow-alt-circle-right<span class="token punctuation">"</span></span>                            <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> cornflowerblue<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span>                        <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> pink</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>                            &#123;&#123; comment.reply_to &#125;&#125;                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>                     &#123;% endif %&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>&#123;&#123; comment.body|safe &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> gray</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>                        &#123;&#123; comment.created|date:"Y-m-d H:i" &#125;&#125;                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                    <span class="token comment">&lt;!-- 加载 modal 的按钮 --></span>                    &#123;% if user.is_authenticated %&#125;                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>                             <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-light btn-sm text-muted<span class="token punctuation">"</span></span>                             <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">load_modal</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> article<span class="token punctuation">.</span>id <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> comment<span class="token punctuation">.</span>id <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span>                            <span class="token punctuation">></span></span>                        回复                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                    &#123;% else %&#125;                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-light btn-sm text-muted<span class="token punctuation">"</span></span>                        <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>userprofile:login<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span>                       <span class="token punctuation">></span></span>                        回复                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    &#123;% endif %&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- Modal --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal fade<span class="token punctuation">"</span></span>                      <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>comment_&#123;&#123; comment.id &#125;&#125;<span class="token punctuation">"</span></span>                      <span class="token attr-name">tabindex</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>-1<span class="token punctuation">"</span></span>                      <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dialog<span class="token punctuation">"</span></span>                      <span class="token attr-name">aria-labelledby</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CommentModalCenter<span class="token punctuation">"</span></span>                      <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>                <span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-dialog modal-dialog-centered modal-lg<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>document<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-content<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">height</span><span class="token punctuation">:</span> 480px</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-title<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>exampleModalCenterTitle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>回复 &#123;&#123; comment.user &#125;&#125;：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-body<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal_body_&#123;&#123; comment.id &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                &#123;% if not comment.is_leaf_node %&#125;                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>children<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        &#123;&#123; children &#125;&#125;                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                &#123;% endif %&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    &#123;% endwith %&#125;    &#123;% endrecursetree %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>...&#123;% block script %&#125;...<span class="token comment">&lt;!-- 新增代码，唤醒二级回复的 modal --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">// 加载 modal</span>    <span class="token keyword">function</span> <span class="token function">load_modal</span><span class="token punctuation">(</span><span class="token parameter">article_id<span class="token punctuation">,</span> comment_id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> modal_body <span class="token operator">=</span> <span class="token string">'#modal_body_'</span> <span class="token operator">+</span> comment_id<span class="token punctuation">;</span>        <span class="token keyword">let</span> modal_id <span class="token operator">=</span> <span class="token string">'#comment_'</span> <span class="token operator">+</span> comment_id<span class="token punctuation">;</span>                <span class="token comment">// 加载编辑器</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span>modal_body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> content <span class="token operator">=</span> <span class="token string">'&lt;iframe src="/comment/post-comment/'</span> <span class="token operator">+</span>                 article_id <span class="token operator">+</span>                 <span class="token string">'/'</span> <span class="token operator">+</span>                 comment_id <span class="token operator">+</span>                 <span class="token string">'"'</span> <span class="token operator">+</span>                 <span class="token string">' frameborder="0" style="width: 100%; height: 100%;" id="iframe_'</span> <span class="token operator">+</span>                 comment_id <span class="token operator">+</span>                 <span class="token string">'">&lt;/iframe>'</span><span class="token punctuation">;</span>            <span class="token function">$</span><span class="token punctuation">(</span>modal_body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span>modal_id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">modal</span><span class="token punctuation">(</span><span class="token string">'show'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>&#123;% endblock script %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这么大段肯定把你看晕了，不要急，让我们拆开来讲解。</p><h3 id="遍历树"><a href="#遍历树" class="headerlink" title="遍历树"></a>遍历树</h3><p>第一个问题，如何遍历树形结构？</p><p>django-mptt提供了一个快捷方式：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&#123;% load mptt_tags %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    &#123;% recursetree objs %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>            &#123;&#123; node.your_field &#125;&#125;            &#123;% if not node.is_leaf_node %&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>children<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    &#123;&#123; children &#125;&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>            &#123;% endif %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    &#123;% endrecursetree %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内部的实现你不用去管，当成一个黑盒子去用就好了。<code>objs</code>是需要遍历的<strong>数据集</strong>，<code>node</code>是其中的<strong>单个数据</strong>。有两个地方要注意：</p><ul><li><code>&#123;% load mptt_tags %&#125;</code>不要忘记写</li><li><code>node</code>这个变量名太宽泛，用<code>&#123;% with comment=node %&#125;</code>给它起了个别名</li></ul><h3 id="Modal"><a href="#Modal" class="headerlink" title="Modal"></a>Modal</h3><p><strong>Modal</strong>是<strong>Bootstrap</strong>内置的弹窗。本文相关代码如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 加载 modal 的按钮 --></span>&#123;% if user.is_authenticated %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>         <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-light btn-sm text-muted<span class="token punctuation">"</span></span>         <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">load_modal</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> article<span class="token punctuation">.</span>id <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> comment<span class="token punctuation">.</span>id <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span>        <span class="token punctuation">></span></span>    回复<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>&#123;% else %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-light btn-sm text-muted<span class="token punctuation">"</span></span>    <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>userprofile:login<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span>   <span class="token punctuation">></span></span>    回复<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>&#123;% endif %&#125;<span class="token comment">&lt;!-- Modal --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal fade<span class="token punctuation">"</span></span>      <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>comment_&#123;&#123; comment.id &#125;&#125;<span class="token punctuation">"</span></span>      <span class="token attr-name">tabindex</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>-1<span class="token punctuation">"</span></span>      <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dialog<span class="token punctuation">"</span></span>      <span class="token attr-name">aria-labelledby</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CommentModalCenter<span class="token punctuation">"</span></span>      <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>     <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-dialog modal-dialog-centered modal-lg<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>document<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-content<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">height</span><span class="token punctuation">:</span> 480px</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-title<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>exampleModalCenterTitle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>回复 &#123;&#123; comment.user &#125;&#125;：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-body<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal_body_&#123;&#123; comment.id &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它几乎就是从<a href="https://getbootstrap.com/docs/4.1/components/modal/">Bootstrap官方文档</a>抄下来的（所以读者要多浏览官网啊）。有点不同的是本文没有用原生的按钮，而是用<code>JavaScript</code>加载的Modal；还有就是增加了几个容器的<code>id</code>属性，方便后面的<code>JavaScript</code>查询。</p><p>和之前章节用的<code>Layer.js</code>相比，<code>Bootstrap</code>的弹窗更笨重些，也更精致些，很适合在这里使用。</p><p>注意，加载Modal的按钮用模板语法<code>&#123;% if user.is_authenticated %&#125;</code>对用户是否登录做了区分，目的是将未登录的用户引导至登录页面。</p><blockquote><p>这是2019/05/31修订过的内容。感谢读者 @Zhende Liu 对此部分的问题反馈。</p></blockquote><h3 id="加载Modal"><a href="#加载Modal" class="headerlink" title="加载Modal"></a>加载Modal</h3><p>最难理解的可能就是这段加载Modal的<code>JavaScript</code>代码了：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 加载 modal</span><span class="token keyword">function</span> <span class="token function">load_modal</span><span class="token punctuation">(</span><span class="token parameter">article_id<span class="token punctuation">,</span> comment_id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> modal_body <span class="token operator">=</span> <span class="token string">'#modal_body_'</span> <span class="token operator">+</span> comment_id<span class="token punctuation">;</span>    <span class="token keyword">let</span> modal_id <span class="token operator">=</span> <span class="token string">'#comment_'</span> <span class="token operator">+</span> comment_id<span class="token punctuation">;</span>    <span class="token comment">// 加载编辑器</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span>modal_body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> content <span class="token operator">=</span> <span class="token string">'&lt;iframe src="/comment/post-comment/'</span> <span class="token operator">+</span>             article_id <span class="token operator">+</span>             <span class="token string">'/'</span> <span class="token operator">+</span>             comment_id <span class="token operator">+</span>             <span class="token string">'" frameborder="0" style="width: 100%; height: 100%;">&lt;/iframe>'</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span>modal_body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span>modal_id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">modal</span><span class="token punctuation">(</span><span class="token string">'show'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际上核心逻辑只有3步：</p><ul><li>点击回复按钮时唤醒了<code>load_modal()</code>函数，并将文章id、父级评论id传递进去</li><li><code>$(modal_body).append(content)</code>找到对应Modal的容器，并将一个<code>iframe</code>容器动态添加进去</li><li><code>$(modal_id).modal(&#39;show&#39;)</code>找到对应的Modal，并将其唤醒</li></ul><p>为什么<code>iframe</code>需要<strong>动态加载</strong>？这是为了<strong>避免潜在的性能问题</strong>。你确实可以在页面初始加载时把所有<code>iframe</code>都渲染好，但是这需要花费额外的时间，并且绝大部分的Modal用户根本不会用到，很不划算。</p><p><code>if</code>语句的作用是判断Modal中如果已经加载过，就不再重复加载了。</p><p>最后，什么是<code>iframe</code>？这是HTML5中的新特性，可以理解成<strong>当前网页中嵌套的另一个独立的网页</strong>。既然是独立的网页，那自然也会<strong>独立的向后台请求数据</strong>。仔细看<code>src</code>中请求的位置，正是前面我们在<code>urls.py</code>中写好的第二个<code>path</code>。即对应了<code>post_comment</code>视图中的<code>GET</code>逻辑：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">comment<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token keyword">def</span> <span class="token function">post_comment</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> article_id<span class="token punctuation">,</span> parent_comment_id<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment"># 处理 GET 请求</span>    <span class="token keyword">elif</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">:</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'comment/reply.html'</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>视图返回的<code>comment/reply.html</code>模板还没有写，接下来就把它写好。</p><blockquote><p>老实说用 iframe 来加载 ckeditor 弹窗并不是很“优雅”。单页面上多个 ckeditor 的动态加载、取值、传参，博主没能尝试成功。有兴趣的读者可以和我交流。</p></blockquote><h2 id="Ajax提交表单"><a href="#Ajax提交表单" class="headerlink" title="Ajax提交表单"></a>Ajax提交表单</h2><p>在<code>templates</code>中新建<code>comment</code>目录，并新建<code>reply.html</code>，写入代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/comment/reply.html<span class="token comment">&lt;!-- 载入静态文件 --></span>&#123;% load staticfiles %&#125;<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh-cn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% static <span class="token punctuation">'</span>bootstrap/css/bootstrap.min.css<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span>     <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.<span class="token punctuation">"</span></span>     <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span>    <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reply_form<span class="token punctuation">"</span></span>     <span class="token punctuation">></span></span>        &#123;% csrf_token %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                &#123;&#123; comment_form.media &#125;&#125;                &#123;&#123; comment_form.body &#125;&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 提交按钮 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">confirm_submit</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> article_id <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> parent_comment_id <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>发送<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% static <span class="token punctuation">'</span>jquery/jquery-3.3.1.js<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% static <span class="token punctuation">'</span>popper/popper-1.14.4.js<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% static <span class="token punctuation">'</span>bootstrap/js/bootstrap.min.js<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- csrf token --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% static <span class="token punctuation">'</span>csrf.js<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".django-ckeditor-widget"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeAttr</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">confirm_submit</span><span class="token punctuation">(</span><span class="token parameter">article_id<span class="token punctuation">,</span> comment_id</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 从 ckeditor 中取值</span>        <span class="token keyword">let</span> content <span class="token operator">=</span> <span class="token constant">CKEDITOR</span><span class="token punctuation">.</span>instances<span class="token punctuation">[</span><span class="token string">'id_body'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 调用 ajax 与后端交换数据</span>        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            url<span class="token operator">:</span> <span class="token string">'/comment/post-comment/'</span> <span class="token operator">+</span> article_id <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> comment_id<span class="token punctuation">,</span>            type<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>            data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>body<span class="token operator">:</span> content<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token comment">// 成功回调</span>            <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>e <span class="token operator">===</span> <span class="token string">'200 OK'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    parent<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个模板的作用是提供一个ckeditor的编辑器，所以没有继承<code>base.html</code>。让我们拆开来讲。</p><h3 id="Ajax是什么"><a href="#Ajax是什么" class="headerlink" title="Ajax是什么"></a>Ajax是什么</h3><p>用<strong>Ajax技术</strong>来提交表单，与传统方法非常不同。</p><p>传统方法提交表单时向后端提交一个请求。后端处理请求后会返回一个<strong>全新</strong>的网页。这种做法浪费了很多带宽，因为前后两个页面中大部分内容往往都是相同的。与此不同，AJAX技术可以仅向服务器发送并取回必须的数据，并在客户端采用<strong>JavaScript</strong>处理来自服务器的回应。因为在服务器和浏览器之间交换的数据大量减少，服务器回应更快了。</p><p>虽然本教程只用到Ajax的一点皮毛，但是Ajax的应用非常广泛，建议读者多了解相关知识。</p><p>这里会用到Ajax，倒不是因为其效率高，而是因为Ajax可以在表单提交成功后得到反馈，以便刷新页面。</p><p>核心代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">confirm_submit</span><span class="token punctuation">(</span><span class="token parameter">article_id<span class="token punctuation">,</span> comment_id</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 从 ckeditor 中取值</span>    <span class="token keyword">let</span> content <span class="token operator">=</span> <span class="token constant">CKEDITOR</span><span class="token punctuation">.</span>instances<span class="token punctuation">[</span><span class="token string">'id_body'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 调用 ajax 与后端交换数据</span>    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        url<span class="token operator">:</span> <span class="token string">'/comment/post-comment/'</span> <span class="token operator">+</span> article_id <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> comment_id<span class="token punctuation">,</span>        type<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>body<span class="token operator">:</span> content<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment">// 成功回调</span>        <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>e <span class="token operator">===</span> <span class="token string">'200 OK'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                parent<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>CKEDITOR</strong>是编辑器提供的全局变量，这里用<code>CKEDITOR.instances[&#39;id_body&#39;].getData()</code>取得当前编辑器中用户输入的内容。</li><li>接下来调用了Jquery的ajax方法与视图进行数据交换。ajax中定义了视图的url、请求的方法、提交的数据。</li><li><code>success</code>是ajax的回调函数。当得到视图的响应后执行内部的函数。</li></ul><p>前面写视图的时候，二级评论提交成功后会返回<code>200 OK</code>，回调函数接收到这个信号后，就会调用<code>reload()</code>方法，刷新当前的父页面（即文章所在的页面），实现了数据的更新。</p><h3 id="csrf问题"><a href="#csrf问题" class="headerlink" title="csrf问题"></a>csrf问题</h3><p>代码中有这么一行：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% static <span class="token punctuation">'</span>csrf.js<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>没有这一行，后端会返回<code>403 Forbidden</code>错误，并且表单提交失败。</p><p>还记得之前提交传统表单时的<code>&#123;% csrf_token %&#125;</code>吗？Django为了防止跨域攻击，要求表单必须提供这个token，验证提交者的身份。</p><p>问题是在Ajax中怎么解决这个问题呢？一种方法就是在页面中插入这个<code>csrf.js</code>模块。</p><p>在static目录中将<a href="https://github.com/stacklens/django_blog_tutorial/blob/master/static/csrf.js">csrf.js</a>文件粘贴进去，并在页面中引用，就可以解决此问题了。</p><blockquote><p>csrf.js文件可以在<a href="https://github.com/stacklens/django_blog_tutorial/blob/master/static/csrf.js">我的GitHub仓库下载</a>。</p></blockquote><h2 id="测试！"><a href="#测试！" class="headerlink" title="测试！"></a>测试！</h2><p>进入文章页面，评论的边上多出一个按钮，可以对评论者进行评论了：</p><blockquote><p>注意：Django 3 修改了 xframe 的默认设置，即不支持 iframe 自己。如果你使用的版本是 Django 3，需要在 <code>settings.py</code> 中添加：<code>X_FRAME_OPTIONS = &#39;SAMEORIGIN&#39;</code> 。</p></blockquote><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190504/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE203.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190504/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE203.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>点击回复按钮，弹出带有富文本编辑器的弹窗：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190504/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE204.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190504/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE204.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>点击发送按钮，页面会自动刷新，并且二级评论也出现了：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190504/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE205.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190504/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE205.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>还可以继续对二级评论者评论，不过更高级的评论会被强制转换为二级评论：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190504/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE206.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190504/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE206.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>功能正常运行了。</p><p>有兴趣的读者可以打开SQLiteStudio，研究一下comment数据表的结构。</p><h2 id="二级回复窗口不弹出"><a href="#二级回复窗口不弹出" class="headerlink" title="二级回复窗口不弹出"></a>二级回复窗口不弹出</h2><p>所有一切准备完毕，点击回复按钮，却没有回复窗口弹出或者弹出了一个窗口，提示拒绝连接<br>打开F12，会有这样的提示</p><pre><code>Refused to display &#39;×××&#39; in a frame because it set &#39;X-Frame-Options&#39; to &#39;deny&#39;.</code></pre><p>查看setting配置，如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">MIDDLEWARE <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的内容显示，Django的项目中默认设置了XFrameOptionsMiddleware的中间件，这个设置在Django 3.0中将对于X-Frame-Options的配置设置成了DENY。<br>可以在设置中，添加如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">X_FRAME_OPTIONS <span class="token operator">=</span> <span class="token string">'SAMEORIGIN'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>认真看完本章并实现了多级评论的同学，可以给自己点掌声了。本章应该是教程到目前为止知识点最多、最杂的章节，涵盖了MTV、Jquery、Ajax、iframe、modal等多种前后端技术。</p><p>没成功实现也不要急躁，web开发嘛，走点弯路很正常的。多观察Django和控制台的报错信息，找到问题并解决它。</p><hr><ul><li>有疑问请在<a href="http://www.dusaiphoto.com/">杜赛的个人网站</a>留言，我会尽快回复。</li><li>或Email私信我：<a href="mailto:&#100;&#x75;&#x73;&#97;&#105;&#x70;&#104;&#x6f;&#116;&#111;&#64;&#102;&#x6f;&#x78;&#109;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#111;&#x6d;">&#100;&#x75;&#x73;&#97;&#105;&#x70;&#104;&#x6f;&#116;&#111;&#64;&#102;&#x6f;&#x78;&#109;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#111;&#x6d;</a></li><li>项目完整代码：<a href="https://github.com/stacklens/django_blog_tutorial">Django_blog_tutorial</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--17.拓展用户信息</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/17.tuo-zhan-yong-hu-xin-xi/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/17.tuo-zhan-yong-hu-xin-xi/</url>
      
        <content type="html"><![CDATA[<p>可能你已经发现了，Django自带的User模型非常实用，以至于我们没有写用户管理相关的任何模型。</p><p>但是自带的User毕竟可用的字段较少。比方说非常重要的电话号码、头像等都没有。解决的方法有很多，你可以不使用User，自己从零写用户模型；也可以对User模型进行扩展。</p><p>博客网站的用户信息并不复杂，因此扩展User就足够了。</p><h2 id="扩展User模型"><a href="#扩展User模型" class="headerlink" title="扩展User模型"></a>扩展User模型</h2><p>扩展User模型又有不同的方法。在大多数情况下，使用<strong>模型一对一链接</strong>的方法是比较适合的。</p><p>编写<code>userprofile/models.py</code>如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">userprofile<span class="token operator">/</span>models<span class="token punctuation">.</span>py<span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token comment"># 引入内置信号</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>db<span class="token punctuation">.</span>models<span class="token punctuation">.</span>signals <span class="token keyword">import</span> post_save<span class="token comment"># 引入信号接收器的装饰器</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>dispatch <span class="token keyword">import</span> receiver<span class="token comment"># 用户扩展信息</span><span class="token keyword">class</span> <span class="token class-name">Profile</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 与 User 模型构成一对一的关系</span>    user <span class="token operator">=</span> models<span class="token punctuation">.</span>OneToOneField<span class="token punctuation">(</span>User<span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">,</span> related_name<span class="token operator">=</span><span class="token string">'profile'</span><span class="token punctuation">)</span>    <span class="token comment"># 电话号码字段</span>    phone <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment"># 头像</span>    avatar <span class="token operator">=</span> models<span class="token punctuation">.</span>ImageField<span class="token punctuation">(</span>upload_to<span class="token operator">=</span><span class="token string">'avatar/%Y%m%d/'</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment"># 个人简介</span>    bio <span class="token operator">=</span> models<span class="token punctuation">.</span>TextField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'user &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>user<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token comment"># 信号接收函数，每当新建 User 实例时自动调用</span><span class="token decorator annotation punctuation">@receiver</span><span class="token punctuation">(</span>post_save<span class="token punctuation">,</span> sender<span class="token operator">=</span>User<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create_user_profile</span><span class="token punctuation">(</span>sender<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> created<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> created<span class="token punctuation">:</span>        Profile<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>user<span class="token operator">=</span>instance<span class="token punctuation">)</span><span class="token comment"># 信号接收函数，每当更新 User 实例时自动调用</span><span class="token decorator annotation punctuation">@receiver</span><span class="token punctuation">(</span>post_save<span class="token punctuation">,</span> sender<span class="token operator">=</span>User<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">save_user_profile</span><span class="token punctuation">(</span>sender<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    instance<span class="token punctuation">.</span>profile<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每个<code>Profile</code>模型对应唯一的一个<code>User</code>模型，形成了对User的外接扩展，因此你可以在<code>Profile</code>添加任何想要的字段。这种方法的好处是不需要对<code>User</code>进行任何改动，从而拥有完全自定义的数据表。模型本身没有什么新的知识，比较神奇的是用到的<strong>信号机制</strong>。</p><p>Django包含一个“信号调度程序”，它可以在框架中的某些位置发生操作时，通知其他应用程序。简而言之，信号允许某些<strong>发送者</strong>通知一组<strong>接收器</strong>已经发生了某个动作。当许多代码可能对同一事件感兴趣时，<strong>信号</strong>就特别有用。</p><p>这里引入的<code>post_save</code>就是一个内置信号，它可以在模型调用<code>save()</code>方法后发出信号。</p><p>有了信号之后还需要定义接收器，告诉Django应该把信号发给谁。装饰器<code>receiver</code>就起到接收器的作用。每当<code>User</code>有更新时，就发送一个信号启动<code>post_save</code>相关的函数。</p><p>通过信号的传递，实现了每当<code>User</code>创建/更新时，<code>Profile</code>也会自动的创建/更新。</p><blockquote><p>当然你也可以不使用信号来自动创建Profile表，而是采用手动方式实现。</p><p>为什么删除User表不需要信号？答案是两者的关系采用了models.CASCADE级联删除，已经带有关联删除的功能了。</p><p>avatar字段用来存放头像，暂且不管它，下一章讲解。</p></blockquote><h2 id="重建数据库"><a href="#重建数据库" class="headerlink" title="重建数据库"></a>重建数据库</h2><p>前面讲过，每次改动模型后都需要进行数据的迁移。由于<code>avatar</code>字段为图像字段，需要安装第三方库<code>Pillow</code>来支持：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>env<span class="token punctuation">)</span> E:<span class="token punctuation">\</span>django_project<span class="token punctuation">\</span>my_blog<span class="token operator">></span> pip <span class="token function">install</span> Pillow<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装成功后，通过<code>makemigrations</code>、<code>migrate</code>迁移数据：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>env<span class="token punctuation">)</span> E:<span class="token punctuation">\</span>django_project<span class="token punctuation">\</span>my_blog<span class="token operator">></span>python manage.py makemigrationsMigrations <span class="token keyword">for</span> <span class="token string">'userprofile'</span><span class="token builtin class-name">:</span>  userprofile<span class="token punctuation">\</span>migrations<span class="token punctuation">\</span>0001_initial.py    - Create model Profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>env<span class="token punctuation">)</span> E:<span class="token punctuation">\</span>django_project<span class="token punctuation">\</span>my_blog<span class="token operator">></span>python manage.py migrateOperations to perform:  Apply all migrations: admin, article, auth, contenttypes, sessions, userprofileRunning migrations:  Applying userprofile.0001_initial<span class="token punctuation">..</span>. OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>迁移好数据后，如果你试图登录用户，会得到报错。</strong>这是因为之前创建的<code>User</code>数据都没有对应的<code>Profile</code>模型，违背了现有的模型。一种解决办法就是干脆删除旧的数据，因此就需要用到Django的<code>shell</code>命令。</p><p><code>shell</code>是Django提供的互动解释器，你可以在这个指令模式中试验代码是否能够正确执行，是相当方便的工具。</p><p>在虚拟环境中输入<code>python manage.py shell</code>就可以进入shell：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>env<span class="token punctuation">)</span> E:<span class="token punctuation">\</span>django_project<span class="token punctuation">\</span>my_blog<span class="token operator">></span>python manage.py shellPython <span class="token number">3.7</span>.0 <span class="token punctuation">(</span>v3.7.0:1bf9cc5093, Jun <span class="token number">27</span> <span class="token number">2018</span>, 04:59:51<span class="token punctuation">)</span> <span class="token punctuation">[</span>MSC v.1914 <span class="token number">64</span> bit <span class="token punctuation">(</span>AMD64<span class="token punctuation">)</span><span class="token punctuation">]</span> on win32Type <span class="token string">"help"</span>, <span class="token string">"copyright"</span>, <span class="token string">"credits"</span> or <span class="token string">"license"</span> <span class="token keyword">for</span> <span class="token function">more</span> information.<span class="token punctuation">(</span>InteractiveConsole<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到<code>&gt;&gt;&gt;</code>表示成功进入shell。</p><p>输入下面两行指令就可以轻松删除User数据库：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">>></span><span class="token operator">></span> from django.contrib.auth.models <span class="token function">import</span> User<span class="token operator">>></span><span class="token operator">></span> User.objects.all<span class="token punctuation">(</span><span class="token punctuation">)</span>.delete<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意因为前面写的<code>article</code>模型中，与<code>User</code>的外键也采用了<code>models.CASCADE</code>级联删除模式，因此随着User的删除，<strong>相关的文章也一并删除了</strong>。</p><p>输入<code>exit()</code>退出<code>shell</code>，输入指令<code>python manage.py createsuperuser</code>，<strong>重新创建管理员账户</strong>。</p><blockquote><p>对新手来说，修改数据库经常会导致各种头疼的问题，比如说字段失效、新字段为null、赋值错误、外键链接出错等等，最终导致整个业务逻辑报错。因此我的建议是，在设计数据库时尽量考虑周全，避免频繁修改模型。</p><p>如果实在要修改，并且已经导致数据库混乱了，不妨删除掉<code>/app/migrations/</code>目录下最新的几个文件，清空相关数据库，重新迁移数据。</p></blockquote><p>接下来编写MTV模式的剩余部分。</p><h2 id="表单、视图和模板"><a href="#表单、视图和模板" class="headerlink" title="表单、视图和模板"></a>表单、视图和模板</h2><p>有了扩展的<code>Profile</code>模型后，需要新建一个<strong>表单类</strong>去编辑它的内容：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">userprofile<span class="token operator">/</span>forms<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 引入 Profile 模型</span><span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Profile<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">ProfileForm</span><span class="token punctuation">(</span>forms<span class="token punctuation">.</span>ModelForm<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Profile        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'phone'</span><span class="token punctuation">,</span> <span class="token string">'avatar'</span><span class="token punctuation">,</span> <span class="token string">'bio'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在<code>userprofile/views.py</code>中写处理用户信息的视图函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">userprofile<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 别忘了引入模块</span><span class="token keyword">from</span> <span class="token punctuation">.</span>forms <span class="token keyword">import</span> ProfileForm<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Profile<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 编辑用户信息</span><span class="token decorator annotation punctuation">@login_required</span><span class="token punctuation">(</span>login_url<span class="token operator">=</span><span class="token string">'/userprofile/login/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">profile_edit</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    user <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token builtin">id</span><span class="token punctuation">)</span>    <span class="token comment"># user_id 是 OneToOneField 自动生成的字段</span>    profile <span class="token operator">=</span> Profile<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>user_id<span class="token operator">=</span><span class="token builtin">id</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        <span class="token comment"># 验证修改数据者，是否为用户本人</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>user <span class="token operator">!=</span> user<span class="token punctuation">:</span>            <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"你没有权限修改此用户信息。"</span><span class="token punctuation">)</span>        profile_form <span class="token operator">=</span> ProfileForm<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>        <span class="token keyword">if</span> profile_form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># 取得清洗后的合法数据</span>            profile_cd <span class="token operator">=</span> profile_form<span class="token punctuation">.</span>cleaned_data            profile<span class="token punctuation">.</span>phone <span class="token operator">=</span> profile_cd<span class="token punctuation">[</span><span class="token string">'phone'</span><span class="token punctuation">]</span>            profile<span class="token punctuation">.</span>bio <span class="token operator">=</span> profile_cd<span class="token punctuation">[</span><span class="token string">'bio'</span><span class="token punctuation">]</span>            profile<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 带参数的 redirect()</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">"userprofile:edit"</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token builtin">id</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"注册表单输入有误。请重新输入~"</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">:</span>        profile_form <span class="token operator">=</span> ProfileForm<span class="token punctuation">(</span><span class="token punctuation">)</span>        context <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">'profile_form'</span><span class="token punctuation">:</span> profile_form<span class="token punctuation">,</span> <span class="token string">'profile'</span><span class="token punctuation">:</span> profile<span class="token punctuation">,</span> <span class="token string">'user'</span><span class="token punctuation">:</span> user <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'userprofile/edit.html'</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"请使用GET或POST请求数据"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>2019/05/13更新：实际上GET方法中不需要将profile_form这个表单对象传递到模板中去，因为模板中已经用Bootstrap写好了表单，所以profile_form并没有用到。感谢读者<a href="https://www.dusaiphoto.com/article/detail/37/#F244">YipCyun</a>指正。</p></blockquote><p>业务逻辑与以前写的处理表单的视图非常相似（还记得吗），就不赘述了。</p><p>需要注意下面几个小地方：</p><ul><li><code>user_id</code>是外键自动生成的字段，用来表征两个数据表的关联。你可以在<strong>SQLiteStudio</strong>中查看它。</li><li>留意<code>redirect()</code>是如何携带参数传递的。</li></ul><p>然后就是<strong>新建模板文件</strong><code>/templates/userprofile/edit.html</code>：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">/templates/userprofile/edit.html&#123;% extends "base.html" %&#125; &#123;% load staticfiles %&#125;&#123;% block title %&#125; 用户信息 &#123;% endblock title %&#125;&#123;% block content %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>用户名: &#123;&#123; user.username &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                &#123;% csrf_token %&#125;                <span class="token comment">&lt;!-- phone --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>phone<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>电话<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>phone<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>phone<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123; profile.phone &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- bio --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bio<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>简介<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bio<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; profile.bio &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- 提交按钮 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>&#123;% endblock content %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>留意模板中如何分别调用<code>User</code>、<code>Profile</code>对象的</li><li>行内文本通过<code>value</code>属性设置了初始值，而多行文本则直接设置<code>&#123;&#123; profile.bio &#125;&#125;</code></li></ul><p>最后配置熟悉的<code>userprofile/urls.py</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">userprofile<span class="token operator">/</span>urls<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment"># 用户信息</span>    path<span class="token punctuation">(</span><span class="token string">'edit/&lt;int:id>/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>profile_edit<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'edit'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动服务器，输入地址查看功能是否正常。注意<strong>旧的用户都删除了</strong>（id=1的用户已经没有了），这里的<code>/&lt;int:id&gt;</code>必须为<strong>新创建的用户的id</strong>。</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20181204/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE87.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20181204/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE87.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>页面虽然简陋，但是方法是类似的。可以在这个基础上，扩展为一个美观、详细的用户信息页面。</p><p><strong>当然最好再给个人信息添加一个入口。</strong>修改<code>/templates/header.html</code>：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">/templates/header.html...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dropdown-menu<span class="token punctuation">"</span></span> <span class="token attr-name">aria-labelledby</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbarDropdown<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dropdown-item<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>&#123;% url <span class="token punctuation">"</span>userprofile:edit<span class="token punctuation">"</span> user.id %&#125;<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>个人信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修改article视图"><a href="#修改article视图" class="headerlink" title="修改article视图"></a>修改article视图</h2><p>在前面新建article的章节中，由于没有用户管理的知识，存在一些问题：</p><ul><li><code>new_article.author = User.objects.get(id=1)</code>强行把作者指定为id=1的用户，这显然是不对的。</li><li>没有对用户的登录状态进行检查。</li></ul><p>因此稍加修改<code>def article_create()</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">/</span>article<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> login_required<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 检查登录</span><span class="token decorator annotation punctuation">@login_required</span><span class="token punctuation">(</span>login_url<span class="token operator">=</span><span class="token string">'/userprofile/login/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">article_create</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment"># 指定目前登录的用户为作者</span>    new_article<span class="token punctuation">.</span>author <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span>request<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启服务器，文章正确匹配到登录的用户，又可以愉快的写文章了。</p><blockquote><p>实际上，删除文章<code>article_delete()</code>、更新文章<code>article_update()</code>都应该对用户身份进行检查。就请读者尝试修改吧。</p></blockquote><h2 id="配置admin"><a href="#配置admin" class="headerlink" title="配置admin"></a>配置admin</h2><p>前面我们已经尝试过将<code>article</code>配置到<strong>admin</strong>后台，方法是非常简单的，直接在<code>admin.py</code>中写入<code>admin.site.register(Profile)</code>就可以了。但是这样写会导致<code>User</code>、<code>Profile</code>是两个分开的表，不方便不说，强迫症的你怎么能受得了。</p><p>我们希望能够在<strong>admin</strong>中将<code>User</code>、<code>Profile</code>合并为一张完整的表格。方法如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">/</span>userprofile<span class="token operator">/</span>admin<span class="token punctuation">.</span>py<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>admin <span class="token keyword">import</span> UserAdmin <span class="token keyword">as</span> BaseUserAdmin<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Profile<span class="token comment"># 定义一个行内 admin</span><span class="token keyword">class</span> <span class="token class-name">ProfileInline</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span>StackedInline<span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> Profile    can_delete <span class="token operator">=</span> <span class="token boolean">False</span>    verbose_name_plural <span class="token operator">=</span> <span class="token string">'UserProfile'</span><span class="token comment"># 将 Profile 关联到 User 中</span><span class="token keyword">class</span> <span class="token class-name">UserAdmin</span><span class="token punctuation">(</span>BaseUserAdmin<span class="token punctuation">)</span><span class="token punctuation">:</span>    inlines <span class="token operator">=</span> <span class="token punctuation">(</span>ProfileInline<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token comment"># 重新注册 User</span>admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>unregister<span class="token punctuation">(</span>User<span class="token punctuation">)</span>admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>User<span class="token punctuation">,</span> UserAdmin<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开<strong>admin</strong>中的<code>User</code>表，发现<code>Profile</code>的数据已经堆叠在底部了：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20181204/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE88.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20181204/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE88.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><h2 id="本章勘误"><a href="#本章勘误" class="headerlink" title="本章勘误"></a>本章勘误</h2><blockquote><p>2019/06/19 新增：感谢读者 @shenhanlin 对本问题的反馈。</p></blockquote><p>本章中用到了信号来实现<code>User</code>和<code>Profile</code>的同步创建，但是也<strong>产生了一个BUG</strong>：在后台中创建<code>User</code>时如果填写了<code>Profile</code>任何内容，则系统报错且保存不成功；其他情况下均正常。</p><p><strong>BUG产生原因：</strong>在后台中创建并保存<code>User</code>时调用了信号接收函数，创建了<code>Profile</code>表；但如果此时管理员填写了内联的<code>Profile</code>表，会导致此表也会被创建并保存。最终结果就是同时创建了两个具有相同<code>User</code>的<code>Profile</code>表，违背了”一对一“外键的原则。</p><p>解决的办法也不难。因为博客项目的需求较简单，其实没有必要用到信号。</p><p>修改model，把两个信号接收函数去除：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">userprofile<span class="token operator">/</span>models<span class="token punctuation">.</span>py<span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">class</span> <span class="token class-name">Profile</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    user <span class="token operator">=</span> models<span class="token punctuation">.</span>OneToOneField<span class="token punctuation">(</span>User<span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">,</span> related_name<span class="token operator">=</span><span class="token string">'profile'</span><span class="token punctuation">)</span>    phone <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    avatar <span class="token operator">=</span> models<span class="token punctuation">.</span>ImageField<span class="token punctuation">(</span>upload_to<span class="token operator">=</span><span class="token string">'avatar/%Y%m%d/'</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    bio <span class="token operator">=</span> models<span class="token punctuation">.</span>TextField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'user &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>user<span class="token punctuation">.</span>username<span class="token punctuation">)</span>    <span class="token comment"># 下面的信号接收函数全部注释掉</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改view，使得<code>Profile</code>表根据是否已经存在而动态的创建、获取：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">userprofile<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 编辑用户信息</span><span class="token decorator annotation punctuation">@login_required</span><span class="token punctuation">(</span>login_url<span class="token operator">=</span><span class="token string">'/userprofile/login/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">profile_edit</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    user <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token builtin">id</span><span class="token punctuation">)</span>    <span class="token comment"># 旧代码</span>    <span class="token comment"># profile = Profile.objects.get(user_id=id)</span>    <span class="token comment"># 修改后的代码</span>    <span class="token keyword">if</span> Profile<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>user_id<span class="token operator">=</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        profile <span class="token operator">=</span> Profile<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>user_id<span class="token operator">=</span><span class="token builtin">id</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        profile <span class="token operator">=</span> Profile<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>user<span class="token operator">=</span>user<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即如果<code>Profile</code>已经存在了就获取它，如果不存在就创建一个新的。这样修改后应该就可以顺利的创建新用户了。</p><p>除了上面的方法，还有别的手段解决此问题：</p><ul><li>取消<code>Profile</code>在后台的内联，避免创建<code>User</code>的同时创建此表。</li><li>覆写<code>User</code>表的<code>save()</code>方法，跳过后台的自动保存。（不推荐）</li></ul><p>虽然博主做了不正确的示范，但是信号确实是很重要的概念，就当蜻蜓点水的介绍给大家。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章使用一对一链接的方式，扩展并更新了用户信息。读者可以根据自身需求，添加任何需要的字段内容。</p><p>下一章将学习对图片的简单处理。</p><ul><li>有疑问请在<a href="http://www.dusaiphoto.com/">杜赛的个人网站</a>留言，我会尽快回复。</li><li>或Email私信我：<a href="mailto:&#100;&#x75;&#115;&#97;&#x69;&#112;&#x68;&#111;&#116;&#x6f;&#x40;&#x66;&#111;&#120;&#x6d;&#x61;&#x69;&#108;&#46;&#99;&#111;&#x6d;">&#100;&#x75;&#115;&#97;&#x69;&#112;&#x68;&#111;&#116;&#x6f;&#x40;&#x66;&#111;&#120;&#x6d;&#x61;&#x69;&#108;&#46;&#99;&#111;&#x6d;</a></li><li>项目完整代码：<a href="https://github.com/stacklens/django_blog_tutorial">Django_blog_tutorial</a></li></ul><h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><pre><code>有一个bug 标记一下：用户更新文章的时候，没有鉴权，导致任意用户可以任意修改任何人的文章正常逻辑应该是管理员可以删除任何人的文章，只有用户本身可以修改自己的文章</code></pre>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--05.View视图初探</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/05.view-shi-tu-chu-tan/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/05.view-shi-tu-chu-tan/</url>
      
        <content type="html"><![CDATA[<p>数据库虽然已经有了，但是用户通常只需要这个庞大数据库中的很小一部分进行查看、修改等操作。为此还需要代码来恰当的取出并展示数据，这一部分代码就被称为<strong>视图</strong>。</p><p>Django 中视图的概念是<strong>「一类具有相同功能和模板的网页的集合」</strong>。比如，在一个博客应用中，你可能会创建如下几个视图：</p><ul><li>博客首页：展示最近的几项内容。</li><li>内容“详情”页：详细展示某项内容。</li><li>评论处理器：用于响应为一项内容添加评论的操作。</li></ul><p>这些需求都靠<strong>视图（View）</strong>来完成。</p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h2><p>首先写一个最简单的<strong>视图函数</strong>，在浏览器中打印出<code>Hello World!</code>字符串。</p><p>打开<code>article/views.py</code>，写出视图函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token comment"># 导入 HttpResponse 模块</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token comment"># 视图函数</span><span class="token keyword">def</span> <span class="token function">article_list</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>网页都是从视图派生而来。</strong>每一个视图表现为一个简单的Python函数，它必须要做的只有两件事：返回一个包含被请求页面内容的 <code>HttpResponse</code>对象，或者抛出一个异常，比如 <code>Http404</code> 。至于你还想干些什么，随便你。</p><p>视图函数中的<code>request</code>与网页发来的请求有关，里面包含<strong>get</strong>或<strong>post</strong>的内容、用户浏览器、系统等信息。Django调用<code>article_list</code>函数时会返回一个含字符串的 <code>HttpResponse</code>对象。</p><p>有了视图函数，还需要配置<strong>URLconfs</strong>，将用户请求的URL链接关联起来。换句话说，URLconfs的作用是将URL映射到视图中。</p><p>在<a href="https://www.dusaiphoto.com/article/article-detail/6/">前面的文章</a>中已经将URL分发给了<code>article</code>应用，因此这里只需要修改之前添加的<code>article/urls.py</code>就可以。添加以下代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>urls<span class="token punctuation">.</span>py<span class="token comment"># 引入views.py</span><span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> views<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token comment"># path函数将url映射到视图</span>    path<span class="token punctuation">(</span><span class="token string">'article-list/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>article_list<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'article_list'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Django 将会根据用户请求的 URL 来选择使用哪个视图。</strong>本例中当用户请求<code>article/article-list</code>链接时，会调用<code>views.py</code>中的<code>article_list</code>函数，并返回渲染后的对象。参数<code>name</code>用于反查url地址，相当于给url起了个名字，以后会用到。</p><p>测试一下刚才敲的代码是否工作正常。</p><p><strong>在虚拟环境中</strong>，进入项目目录，也就是<code>my_blog</code>文件夹，输入<code>python manage.py runserver</code>，运行调试服务器：</p><pre class="line-numbers language-none"><code class="language-none">(env) E:\django_project\my_blog&gt;python manage.py runserverPerforming system checks...System check identified no issues (0 silenced).August 30, 2018 - 19:41:00Django version 2.1, using settings &#39;my_blog.settings&#39;Starting development server at http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;Quit the server with CTRL-BREAK.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成功运行后，打开浏览器，输入url地址<code>http://127.0.0.1:8000/article/article-list/</code>，其中<code>127.0.0.1:8000</code>是调试服务器的本地地址，<code>article</code>是项目路由<code>my_blog\urls.py</code>分发的地址，<code>article-list</code>是刚才配置的<code>article\urls.py</code>应用分发的地址。</p><p>运气好的话，浏览器中会打印出<code>Hello World!</code>字符串：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20180830/hello.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20180830/hello.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>不到10行代码就完成了基本功能，是不是很神奇。</p><p>当然，只是小试牛刀。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>在章节<a href="https://www.dusaiphoto.com/article/article-detail/11/">编写Model模型</a>中虽然定义了数据库表，但是这个表是空的，不方便展示View调取数据的效果。所以在写View之前，需要往数据表里记录一些数据。接下来就做这个工作。</p><h3 id="网站后台概念"><a href="#网站后台概念" class="headerlink" title="网站后台概念"></a>网站后台概念</h3><p><strong>网站后台</strong>，有时也称为<strong>网站管理后台</strong>，是指用于管理网站的一系列操作，如：数据的增加、更新、删除等。在项目开发的初期，因为没有真实的用户数据和完整的测试环境，会频繁地使用后台修改测试数据。</p><p>Django内置了一个很好的后台管理工具，只需要些少量代码，就可以实现强大的功能。</p><h3 id="创建管理员账号（Superuser）"><a href="#创建管理员账号（Superuser）" class="headerlink" title="创建管理员账号（Superuser）"></a>创建管理员账号（Superuser）</h3><p>管理员账号（Superuser）是可以进入网站后台，对数据进行维护的账号，具有很高的权限。这里我们需要创建一个管理员账号，以便添加后续的测试数据。</p><p><strong>虚拟环境</strong>中输入<code>python manage.py createsuperuser</code>指令，创建管理员账号：</p><pre class="line-numbers language-none"><code class="language-none">(env) E:\django_project\my_blog&gt;python manage.py createsuperuserUsername: FengqiEmail address: Fengqi@163.comPassword:Password (again):Superuser created successfully.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>指令会提示你输入账号名字、邮箱和密码，根据喜好填入即可。<br>这里我的账号密码一样：Fengqi</p><h3 id="将ArticlePost注册到后台中"><a href="#将ArticlePost注册到后台中" class="headerlink" title="将ArticlePost注册到后台中"></a>将ArticlePost注册到后台中</h3><p>接下来我们需要“告诉”Django，后台中需要添加<code>ArticlePost</code>这个数据表供管理。</p><p>打开<code>article/admin.py</code>，写入以下代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>admin<span class="token punctuation">.</span>py<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token comment"># 别忘了导入ArticlerPost</span><span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> ArticlePost<span class="token comment"># 注册ArticlePost到admin中</span>admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>ArticlePost<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就简单的注册好了。</p><h3 id="在后台中遨游"><a href="#在后台中遨游" class="headerlink" title="在后台中遨游"></a>在后台中遨游</h3><p>细心的同学可能已经发现，Django项目生成的时候就自动配置好了后台的settings和url，因此不需要我们再操心了。</p><p>启动server，在浏览器中输入<code>http://127.0.0.1:8000/admin/</code>，一切正常的话就看到下面的登录界面了：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20180906/1.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20180906/1.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>输入刚才创建的管理员账号，登录进去：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20180906/2.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20180906/2.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>红框内就是刚才添加的<code>ArticlePost</code>数据表，点击进入后，再点击右上角的<code>ADD ARTICLE POST</code>按钮，到达如下页面：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20180906/4.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20180906/4.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>仔细看一下表单中的每一项，发现与<code>ArticlePost</code>中的字段完全符合；因为<code>updated</code>字段指定了自动添加，这里就没显示了。</p><p>将表单填好后，点击保存：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20180906/5.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20180906/5.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>可以看到ARTICLE POST中多了刚才录入的一条数据。按照同样的方法，再写入几条数据：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20180906/6.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20180906/6.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>至此准备工作就已经大功告成。</p><h2 id="检视数据库"><a href="#检视数据库" class="headerlink" title="检视数据库"></a>检视数据库</h2><blockquote><p>2018-10-29 新增内容</p></blockquote><p>通过上面的操作，我们的数据库中已经有1条用户数据、3条文章数据了。有的时候我需要检查数据库中的数据是否正确，但是项目中的数据库文件<code>db.sqlite3</code>又无法直接打开，怎么办呢？</p><p>这时候就需要用到专门处理SQLite数据文件的软件了：<a href="https://sqlitestudio.pl/index.rvt">SQLiteStudio</a></p><p>下载并安装，用它打开<code>db.sqlite3</code>，软件导航栏中就出现了数据库中保存的各类数据列表。比如说auth_user就是用户数据表了：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20181029/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE70.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20181029/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE70.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>你可以用它检查项目代码中数据库的操作是否正常，这在开发阶段是非常实用的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章初步感受了View的工作模式，创建了Superuser在后台录入了几条测试数据。</p><p>下一章将编写更有意义的View，准备好后老司机就开车了。</p><ul><li>有疑问请在<a href="http://www.dusaiphoto.com/">杜赛的个人网站</a>留言，我会尽快回复。</li><li>或Email私信我：<a href="mailto:&#100;&#117;&#x73;&#97;&#105;&#x70;&#104;&#111;&#x74;&#111;&#x40;&#x66;&#111;&#x78;&#109;&#97;&#x69;&#x6c;&#x2e;&#99;&#111;&#x6d;">&#100;&#117;&#x73;&#97;&#105;&#x70;&#104;&#111;&#x74;&#111;&#x40;&#x66;&#111;&#x78;&#109;&#97;&#x69;&#x6c;&#x2e;&#99;&#111;&#x6d;</a></li><li>项目完整代码：<a href="https://github.com/stacklens/django_blog_tutorial">Django_blog_tutorial</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--02.教程的开发环境</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/02.jiao-cheng-de-kai-fa-huan-jing/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/02.jiao-cheng-de-kai-fa-huan-jing/</url>
      
        <content type="html"><![CDATA[<h2 id="教程的开发环境"><a href="#教程的开发环境" class="headerlink" title="教程的开发环境"></a>教程的开发环境</h2><p>本教程的开发环境为：</p><ul><li><strong>Win 10（64位）</strong></li><li><strong>Python 3.7.0</strong></li><li><strong>Django 3.0.8</strong></li></ul><p>为了避免开发环境不同而导致的错误，建议读者使用相同的版本。</p><h2 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h2><p>python的安装为比较简单，首先找到<a href="https://www.python.org/">Python官方网站</a>，选择python3.7的windows版本，下载并安装。</p><p><strong>安装时注意勾选添加python到环境变量中。</strong>如果没有或者漏掉这一步，请安装完毕后自行添加。</p><p>若实在不知道怎么弄的，看这篇文章：</p><p><a href="https://blog.csdn.net/random_w/article/details/78897365">windows上安装python3教程以及环境变量配置</a></p><p>安装完成后打开<a href="https://jingyan.baidu.com/article/046a7b3e83a505f9c27fa9a2.html">命令行</a>，输入<code>python -V</code>，系统打印出python的版本号，说明安装成功了：</p><pre class="line-numbers language-none"><code class="language-none">C:\Users\dusai&gt; python -VPython 3.7.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="配置虚拟环境"><a href="#配置虚拟环境" class="headerlink" title="配置虚拟环境"></a>配置虚拟环境</h2><p><strong>虚拟环境（virtualenv，或venv ）</strong>是 Python 多版本管理的利器，可以使每个项目环境与其他项目独立开来，保持环境的干净，解决包冲突问题。你可以将虚拟环境理解为一个隔绝的小系统。</p><p><strong>从Python3.3版本开始就自带了虚拟环境，不需要安装，配置一下就可以用了。</strong></p><p>新建一个文件夹，教程中为<code>django_project</code>。进入此文件夹：</p><pre class="line-numbers language-none"><code class="language-none">E:\&gt;cd django_projectE:\django_project&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输入配置venv的命令，其中的<code>env</code>为虚拟环境的放置目录：</p><pre class="line-numbers language-none"><code class="language-none">E:\django_project&gt; python -m venv env  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建完成后，输入<code>env\Scripts\activate.bat</code>，即可进入虚拟环境：</p><pre class="line-numbers language-none"><code class="language-none">E:\django_project&gt; env\Scripts\activate.bat(env) E:\django_project&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>盘符前有<code>(env)</code>标识说明进入venv成功。</strong></p><h2 id="安装Django"><a href="#安装Django" class="headerlink" title="安装Django"></a>安装Django</h2><p><strong>在虚拟环境下</strong>，输入命令<code>pip install django==3.0.8</code>：</p><pre class="line-numbers language-none"><code class="language-none">(env) E:\django_project&gt; pip install django&#x3D;&#x3D;3.0.8Collecting django&#x3D;&#x3D;2.2  Using cached   ...  ...Successfully installed django-2.2(env) E:\django_project&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过指令<code>pip install django==3.0.8</code>来安装和教程相同版本的 Django。</p><p>系统打印出以上文字表示Django安装成功了。</p><blockquote><p>这里一定要指定版本号，否则就默认安装 Django 3 了。新手不要纠结版本问题，先跟着教程把基础掌握好。</p></blockquote><h2 id="创建Django项目"><a href="#创建Django项目" class="headerlink" title="创建Django项目"></a>创建Django项目</h2><p>还是在<strong>虚拟环境</strong>下，在<code>django_project</code>文件夹中创建Django项目：</p><pre class="line-numbers language-none"><code class="language-none">(env) E:\django_project&gt;django-admin startproject my_blog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看<code>django_project</code>文件夹，发现多了<code>my_blog</code>文件夹，其结构应该是这样：</p><pre class="line-numbers language-none"><code class="language-none">my_blog│  db.sqlite3│  manage.py│└─my_blog    │  settings.py    │  urls.py    │  wsgi.py    └─ __init__.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这就是我们刚创建出来的项目了。</p><h2 id="运行Django服务器"><a href="#运行Django服务器" class="headerlink" title="运行Django服务器"></a>运行Django服务器</h2><p>非常幸运，Django自带一个轻量的Web开发服务器，也被叫做“runserver”。</p><p>开发服务器是为了让你快速开发Web程序，通过它可以避开配置生产环境的服务器的繁琐环节。</p><p>开发服务器会自动的检测代码的改变，并且自动加载它，因此在修改代码后不需要手动去重启服务器，非常的方便。</p><p>要运行这个django服务器，首先要进入<code>my_blog</code>文件夹，即含有<code>manage.py</code>文件的那个：</p><pre class="line-numbers language-none"><code class="language-none">(env) E:\django_project&gt;cd my_blog(env) E:\django_project\my_blog&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输入命令<code>python manage.py runserver</code>：</p><pre class="line-numbers language-none"><code class="language-none">(env) E:\django_project\my_blog&gt;python manage.py runserverPerforming system checks...System check identified no issues (0 silenced).You have 15 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.Run &#39;python manage.py migrate&#39; to apply them.August 20, 2018 - 17:32:34Django version 2.2, using settings &#39;my_blog.settings&#39;Starting development server at http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;Quit the server with CTRL-BREAK.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>系统打印出这些信息，说明服务器启动成功了，打开chrome浏览器，输入<a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a> ，即倒数第2排信息提示我们的服务器地址。看到下面的界面：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/avatar_thumbnail/hello_django_udoIHbf.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/avatar_thumbnail/hello_django_udoIHbf.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>恭喜你，小火箭起飞，django运行起来了！</p><h2 id="代码编辑器"><a href="#代码编辑器" class="headerlink" title="代码编辑器"></a>代码编辑器</h2><p>django运行起来后，我们还需要一款<strong>代码编辑器</strong>或者<strong>集成开发环境（IDE）</strong>来编辑python文件，以达到开发需求。</p><p>市面上有很多Python的代码编辑器或者集成开发环境可以选择。</p><p>教程使用了代码编辑器<strong>Sublime Text 3</strong>。它不是免费的，但是可以无限期试用，所以你不需要掏腰包。</p><p>进入<a href="https://www.sublimetext.com/3">Sublime Text 3官网</a>，下载对应版本的安装文件安装即可使用了。</p><p>当然你也可以根据喜好选择其他的编辑器或者开发环境：</p><ul><li><a href="https://blog.csdn.net/cH3RUF0tErmB3yH/article/details/80156176">10大Python集成开发环境和代码编辑器（指南）</a></li><li><a href="https://www.zhihu.com/question/20476960">写python程序什么编辑器最好用？</a></li></ul><h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><p>作为一个正经的web开发者，你的眼中应该只有<a href="https://www.google.com/chrome/">Chrome</a>！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经过以上一番折腾，总算是把趁手的工具都准备齐了。</p><p>准备好迎接正式的挑战吧。</p><ul><li>项目完整代码：<a href="https://github.com/stacklens/django_blog_tutorial">Django_blog_tutorial</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--01.前言</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/01.qian-yan/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/01.qian-yan/</url>
      
        <content type="html"><![CDATA[<p><strong>Django</strong> 是一个由 <strong>Python</strong> 写成的开源Web应用框架，可以用它以更高的效率、更少的代码，搭建一个高性能的个人网站。</p><p>如果你以前从未接触过 web 开发，并且想快速上线自己的个性化网站，Django 绝对是你的最佳选择。</p><p><strong>本教程为零基础的小白准备，教你快速搭建一个自己的博客网站。</strong></p><h2 id="教程特点"><a href="#教程特点" class="headerlink" title="教程特点"></a>教程特点</h2><ul><li>零基础、免费、中文、完整项目代码</li><li>基于Python 3.6、Django 3.0.8 Bootstrap 4</li><li>漂亮的前端界面</li></ul><h2 id="适合人群"><a href="#适合人群" class="headerlink" title="适合人群"></a>适合人群</h2><ul><li>拥有一台能开机的电脑</li><li>有一点基础的 python 编程知识</li><li>每天能抽出一个小时学习</li></ul><p>不要犹豫说的就是你，现在立刻开始 Django 的学习吧！</p><h2 id="资源列表"><a href="#资源列表" class="headerlink" title="资源列表"></a>资源列表</h2><p>Django 的官方网站：<a href="https://www.djangoproject.com/">Django</a></p><p>撰写本文参考了以下资料，受益匪浅，并向读者强烈推荐：</p><ul><li><a href="https://www.itdiffer.com/">跟老齐学Python：Django实战</a> 书籍</li><li><a href="https://www.zmrenwu.com/">追梦人物的博客</a> 网站</li><li><a href="https://www.liaoxuefeng.com/">廖雪峰的官方网站</a> 网站</li><li><a href="https://github.com/stacklens/django_blog_tutorial">Django_blog_tutorial</a></li></ul><p>项目开发完毕后使用 Git/GitHub 分布式管理：<a href="http://www.dusaiphoto.com/article/article-detail/13/">Windows环境下使用Git和GitHub</a></p><h2 id="遇到困难时怎么办"><a href="#遇到困难时怎么办" class="headerlink" title="遇到困难时怎么办"></a>遇到困难时怎么办</h2><ul><li><p>认真检查代码拼写、缩进是否正确。一个标点符号的错误可能会导致难以发现的问题</p></li><li><p>较简单的问题直接询问百度；若无法得到满意的答案请尝试 Google 以英文关键字搜索。<br>要坚信全世界这么多学习 Django 的人，你遇到的问题别人早就遇到过了</p></li><li><p><a href="https://www.djangoproject.com/">Django官方网站</a> 是最权威的学习文档，英语不佳的同学，要有耐心仔细阅读</p></li><li><p>实在无法处理的问题，可以暂时跳过。待到技术水平上升台阶，再回头来解决问题</p></li><li><p>若以上办法均不能解决你的问题，请在<a href="https://stackoverflow.com/">StackOverflow</a>等技术网站上求助，那里有海量的热心程序员在等着你的问题</p></li></ul><h2 id="关于Django版本"><a href="#关于Django版本" class="headerlink" title="关于Django版本"></a>关于Django版本</h2><p>Django 2 和 Django 3 在某些配置上又有细微的差别.</p><p>但是目前Django 3 基本已经稳定了， 所以影响基本有限。</p><p>放心大胆的学 Django 3 吧，绝大部分知识都是相同的。</p><h2 id="是时候展现真正的技术了"><a href="#是时候展现真正的技术了" class="headerlink" title="是时候展现真正的技术了"></a>是时候展现真正的技术了</h2><p>说了这么多，相信你已经迫不及待了。让我们赶紧开始旅程吧！</p>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django视频网站搭建--step1创建工程</title>
      <link href="/post/django-shi-pin-wang-zhan-da-jian/step1-chuang-jian-gong-cheng/"/>
      <url>/post/django-shi-pin-wang-zhan-da-jian/step1-chuang-jian-gong-cheng/</url>
      
        <content type="html"><![CDATA[<p>#基于django的视频点播网站开发<br>##项目介绍<br>本文将会对该项目进行一个简单的介绍，包括项目名称、项目背景、项目功能、技术栈等等。</p><p>项目名称: <strong>基于django的视频点播网站开发</strong></p><p>###项目背景</p><p>视频点播网站，搭建一个视频点播网站，练习学习一下django技术，学以致用。<br>项目功能</p><p>###项目功能<br>本项目分为前台和后台</p><p>前台功能</p><pre><code>视频列表展示视频播放详情详情评论个人中心</code></pre><p>后台功能</p><pre><code>视频管理评论管理用户管理反馈管理</code></pre><p>本讲中，主要搭建开发环境。我们会依次安装python、pip、django、mysql和其他的一些必要类库。<br>##安装python</p><p>安装 Python 非常简单，去 Python 官方网站 找到 Python3 的下载地址，根据你的系统选择32位或者64位的安装包，下载好后双击安装即可。</p><p>安装完毕后，在命令行输入 python -v ，如果输出了 Python 的版本号，说明 Python 已安装成功。</p><pre><code>$ python3 -VPython 3.8.0</code></pre><p>安装pip</p><p>如果已经安装了python3， 那么pip3一般会自动的被安装。<br>##安装django<br>安装django非常简单，一条命令搞定。</p><pre><code>pip3 install django</code></pre><p>##安装mysql<br>由于该项目使用的是mysql数据库，所以需要安装mysql。</p><p>如果你使用的是Windows或macOS系统，那么可以去 MySQL官网 直接下载安装包，一步步安装即可。<br>安装过程中会提示创建输账号和密码，一定要记得创建哦～。</p><p>ubuntu下使用命令apt-get install mysql-server安装mysql</p><pre><code>sudo apt-get install mysql-server</code></pre><p>Mysql5.7这个版本，安装过程中不会提示输入密码的，它的的root密码在/etc/mysql/debian.cnf这个文件里面<br>使用sudo cat /etc/mysql/debian.cnf命令打开，你大概会看到如下内容，其中就包括Mysql的默认登陆名与密码</p><pre><code>[client]host     = localhostuser     = debian-sys-maintpassword = Ah5gE7mWH1OxO9Gwsocket   = /var/run/mysqld/mysqld.sock[mysql_upgrade]host     = localhostuser     = debian-sys-maintpassword = Ah5gE7mWH1OxO9Gwsocket   = /var/run/mysqld/mysqld.sock</code></pre><p>1.使用 mysql -u用户名 -p密码进行登陆，</p><pre><code>mysql -udebian-sys-maint -p</code></pre><p>2、修改root用户密码</p><pre><code>show databases；use mysql;update user set authentication_string=PASSWORD(&quot;密码&quot;) where user=&#39;root&#39;;update user set plugin=&quot;mysql_native_password&quot;;flush privileges;quit;</code></pre><p>注:由于mysql5.7没有password字段，密码存储在authentication_string字段中</p><p>3、重新启动Mysql</p><pre><code>/etc/init.d/mysql restart</code></pre><p>4、再次使用root用户登陆<br>安装完毕后，可使用mysql -V查看mysql版本号。</p><pre><code>mysql -Vmysql  Ver 14.14 Distrib 5.7.31, for Linux (x86_64) using  EditLine wrapper</code></pre><p>然登录创建新的数据库，命名为video</p><pre><code>root -u root -pCREATE DATABASE video CHARACTER SET utf8;</code></pre><p>##安装PyCharm</p><p>PyCharm 是一款功能强大的 Python 编辑器，具有跨平台性。 我们项目所有功能的开发都是在pycharm上面完成的。</p><p>到PyCharm官网下载PyCharm安装包。<br>选择对应系统（Windows/Mac）的版本下载。一般学习用直接安装社区版本即可足够用。</p><p>下载之后，双击点下一步安装即可。<br>##其他安装</p><p>另外，下面这些是项目开发过程中会用到的类库，放到了requirements.txt里面</p><pre><code>django==3.0.8pillow==5.3.0 （图片显示）</code></pre><p>可以使用pip3直接安装</p><pre><code>pip3 install -r requiredments.txt</code></pre><p>##创建Django工程</p><p>一切就绪，我们创建django工程，仅需要一行命令</p><pre><code>django-admin startproject videoproject</code></pre><p>创建之后，可使用pycharm打开videoproject文件夹，查看文件结构</p><p>pycharm是很强大的，有自带的命令行工具（Terminal），版本控制工具（Version Control）。</p><p>###启动项目<br>打开Terminal，输入</p><pre><code>python3 manage.py runserver</code></pre><p>在之后的开发中，我们会经常用到该命令行来调试程序。</p><p>命令行输出</p><pre><code>Starting development server at http://127.0.0.1:8000/Quit the server with CONTROL-C.</code></pre><p>然后在浏览器地址栏输入<a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a> 即可看到django默认首页了。</p><p>###项目配置</p><p>项目的配置文件位于videoproject/videoproject/settings.py<br>配置编码</p><p>首先需要配置的是文字编码格式，django默认的编码是英语格式，我们把它改成中文格式，需要修改下面几个变量的值。</p><pre><code>LANGUAGE_CODE = &#39;zh-hans&#39;  # 中文编码TIME_ZONE = &#39;Asia/Shanghai&#39;  # 国际时区改为中国时区USE_I18N = True  # 指定Django的翻译系统是否开启。如果设置为False，Django会做一些优化，不去加载翻译机制USE_L10N = True  # 用于决定是否开启数据本地化。如果此设置为True，例如Django将使用当前语言环境的格式显示数字和日期。USE_TZ = True    # 用来指定是否使用指定的时区(TIME_ZONE)的时间。若为True, 则Django会使用内建的时区的时间；否则, Django将会使用本地的时间</code></pre><p>配置static</p><p>然后还需要配置资源文件目录，用于存储CSS、Javascript、Images等文件。这里我们设置目录为/static/</p><pre><code>STATIC_URL = &#39;/static/&#39;STATICFILES_DIRS = (os.path.join(BASE_DIR, &quot;static&quot;),)</code></pre><p>配置数据库</p><p>然后还需要配置数据库信息，django默认使用的是sqlite数据库，我们修改为mysql数据库。找到DATABASES节点，修改为如下代码。其中，NAME为数据库名，USER为mysql的用户名，PASSWORD为密码，HOSY为127.0.0.1，PORT为3306</p><pre><code>DATABASES = &#123;    &#39;default&#39;: &#123;        &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,        &#39;NAME&#39;: &#39;video&#39;,        &#39;USER&#39;: &#39;root&#39;,        &#39;PASSWORD&#39;: &#39;123456&#39;,        &#39;HOST&#39;:&#39;127.0.0.1&#39;,        &#39;PORT&#39;:&#39;3306&#39;,    &#125;&#125;</code></pre><p>配置好数据库之后，还需要在videoproject/videoproject/<strong>init</strong>.py安装mysql驱动，只需要写入代码：</p><pre><code>import pymysqlpymysql.install_as_MySQLdb()</code></pre><p>上面代码运行的前提是你电脑上已经安装了PyMySQL类库。</p><p>最后可再次运行工程，检查配置是否正确。</p>]]></content>
      
      
      <categories>
          
          <category> Django视频网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--03.创建app</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/03.chuang-jian-app/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/03.chuang-jian-app/</url>
      
        <content type="html"><![CDATA[<h2 id="创建APP"><a href="#创建APP" class="headerlink" title="创建APP"></a>创建APP</h2><p><strong>在Django中的一个app代表一个功能模块。</strong>开发者可以将不同功能的模块放在不同的app中, 方便代码的复用。app就是项目的基石，因此开发博客的第一步就是创建新的app，用来实现跟文章相关的功能模块。</p><p>打开命令行，进入项目所在的目录：<strong>（注意Django的操作必须在虚拟环境下进行）</strong></p><pre class="line-numbers language-none"><code class="language-none">E:\&gt;cd django_projectE:\django_project&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>进入虚拟环境（忘记进入venv方法的看这里： <a href="http://www.dusaiphoto.com/article/article-detail/4/">在Windows中搭建Django的开发环境</a>）：</p><pre class="line-numbers language-none"><code class="language-none"> E:\django_project&gt; env\Scripts\activate.bat(env) E:\&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>看到盘符前有<code>(env)</code>标识则表示进入虚拟环境成功。</p><p>输入<code>python manage.py startapp article</code>指令，创建名为<code>article</code>的app：</p><pre class="line-numbers language-none"><code class="language-none">(env) E:\django_project\my_blog&gt;python manage.py startapp article<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看一下<code>my_blog</code>文件夹，应该看到这样的结构：</p><pre class="line-numbers language-none"><code class="language-none">my_blog│  db.sqlite3│  manage.py│├─article│  │  admin.py│  │  apps.py│  │  models.py│  │  tests.py│  │  views.py│  │  __init__.py│  ││  └─migrations│        └─ __init__.py│└─my_blog    │  settings.py    │  urls.py    │  wsgi.py    └─ __init__.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>项目结构</strong>分解如下：</p><ul><li><p>根目录<code>my_blog</code>下有两个文件：db.sqlite3是一个轻量级的数据库文件，用来存储项目产生的数据，比如博客文章；manage.py是项目执行命令的入口，比如runserver。</p></li><li><p>目录<code>article</code>是刚创建出来的app，用来放置博客文章相关的代码：后台管理文件<code>admin.py</code>，数据模型文件<code>models.py</code>，视图文件<code>views.py</code>，存放数据迁移文件的目录<code>migrations</code>。</p></li><li><p>根目录下还有一个<code>my_blog</code>目录，其中的settings.py包含项目的配置参数，urls.py则是项目的根路由文件。</p></li></ul><p>目前你需要了解的就这么多，后面的章节都会用到。剩下还有一些没讲到的文件可以暂时不管它，碰到时再查资料。</p><h2 id="注册APP（settings）"><a href="#注册APP（settings）" class="headerlink" title="注册APP（settings）"></a>注册APP（settings）</h2><p><strong>接着我们需要修改项目配置文件，“告诉”Django现在有article这么一个app了。</strong></p><p>打开<code>my_blog</code>目录的<code>settings.py</code>，找到<code>INSTALLED_APPS</code>写入如下代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">my_blog<span class="token operator">/</span>settings<span class="token punctuation">.</span>pyINSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token comment"># 其他代码</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 新增'article'代码，激活app</span>    <span class="token string">'article'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置访问路径（urls）"><a href="#配置访问路径（urls）" class="headerlink" title="配置访问路径（urls）"></a>配置访问路径（urls）</h2><p><strong>然后再给app配置访问路径url。</strong></p><p>url可以理解为访问网站时输入的网址链接，配置好url后Django才知道怎样定位app。</p><p>打开<code>my_blog</code>目录下的<code>urls.py</code>，增加以下代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">my_blog<span class="token operator">/</span>urls<span class="token punctuation">.</span>py<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token comment"># 记得引入include</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include<span class="token comment"># 存放映射关系的列表</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment"># 新增代码，配置app的url</span>    path<span class="token punctuation">(</span><span class="token string">'article/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'article.urls'</span><span class="token punctuation">,</span> namespace<span class="token operator">=</span><span class="token string">'article'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>path为Django的路由语法：</p><ul><li>参数<code>article/</code>分配了app的访问路径；</li><li><code>include</code>将路径分发给下一步处理；</li><li><code>namespace</code>可以保证反查到唯一的url，即使不同的app使用了相同的url（后面会用到）。</li></ul><p>记得在顶部引入<code>include</code>。</p><blockquote><p>在开发环境下，article的url为：<a href="http://127.0.0.1:8000/article/">http://127.0.0.1:8000/article/</a></p></blockquote><p><strong>还没结束</strong>。现在我们已经通过<code>path</code>将根路径为<code>article</code>的访问都分发给article这个app去处理。但是app通常有多个页面地址，因此还需要app自己也有一个路由分发，也就是<code>article.urls</code>了。</p><blockquote><p>article可以有多个页面，如列表页面、详情页面等，那么就需要如下两个url：</p><p><a href="http://127.0.0.1:8000/article/list/">http://127.0.0.1:8000/article/list/</a></p><p><a href="http://127.0.0.1:8000/article/detail/">http://127.0.0.1:8000/article/detail/</a></p><p>app中的url.py就是用来区分它们的。</p></blockquote><p>在app生成时并没有这个文件，因此需要自己在<code>article</code>文件夹中创建<code>urls.py</code>，在里面输入：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>urls<span class="token punctuation">.</span>py<span class="token comment"># 引入path</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token comment"># 正在部署的应用的名称</span>app_name <span class="token operator">=</span> <span class="token string">'article'</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token comment"># 目前还没有urls</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>urlpatterns</code>中暂时是空的，没写入任何路径的映射，不着急以后会写。</p><p>此时我们的app就配置完成了。</p><blockquote><p>注意此时app还没有写好，因此启动服务器可能会报错，是正常的。</p><p>Django2.0之后，app的<code>urls.py</code>必须配置<code>app_name</code>，否则会报错。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章创建了博客文章功能的app，学习了注册app并配置url。</p><p>下一章开始编写模型Model，理解Django的数据库处理。</p><ul><li><p>有疑问请在<a href="http://www.dusaiphoto.com/">杜赛的个人网站</a>留言，我会尽快回复。</p></li><li><p>或Email私信我：<a href="mailto:&#100;&#x75;&#x73;&#x61;&#105;&#x70;&#104;&#111;&#x74;&#x6f;&#x40;&#102;&#111;&#120;&#109;&#x61;&#x69;&#108;&#x2e;&#x63;&#111;&#x6d;">&#100;&#x75;&#x73;&#x61;&#105;&#x70;&#104;&#111;&#x74;&#x6f;&#x40;&#102;&#111;&#120;&#109;&#x61;&#x69;&#108;&#x2e;&#x63;&#111;&#x6d;</a></p></li><li><p>项目完整代码：<a href="https://github.com/stacklens/django_blog_tutorial">Django_blog_tutorial</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--04.编写Model</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/04.bian-xie-model/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/04.bian-xie-model/</url>
      
        <content type="html"><![CDATA[<p><strong>Django 框架主要关注的是模型（Model）、模板（Template）和视图（Views），称为MTV模式。</strong></p><p>它们各自的职责如下：</p><table><thead><tr><th>层次</th><th>职责</th></tr></thead><tbody><tr><td>模型（Model），即数据存取层</td><td>处理与数据相关的所有事务： 如何存取、如何验证有效性、包含哪些行为以及数据之间的关系等。</td></tr><tr><td>模板（Template），即业务逻辑层</td><td>处理与表现相关的决定： 如何在页面或其他类型文档中进行显示。</td></tr><tr><td>视图（View），即表现层</td><td>存取模型及调取恰当模板的相关逻辑。模型与模板的桥梁。</td></tr></tbody></table><p><strong>简单来说就是Model存取数据，View决定需要调取哪些数据，而Template则负责将调取出的数据以合理的方式展现出来。</strong></p><h2 id="数据库与模型"><a href="#数据库与模型" class="headerlink" title="数据库与模型"></a>数据库与模型</h2><p><strong>数据库</strong>是存储电子文件的场所，储存独立的数据集合。一个<strong>数据库</strong>由多个<strong>数据表</strong>构成。</p><p>啥意思？举个栗子，三年级二班中同学们的花名册就是<strong>数据表</strong>。有的花名册记录每位同学的考试成绩、有的记录身高体重、还有的记录兴趣爱好…所有的这些花名册都放在老师的柜子里，这个柜子就是<strong>“数据库”</strong>了。</p><blockquote><p>默认情况下，数据库就是db.sqlite3这个文件了。在网站上线后你可能想换别的数据库，不过目前我们还不需要讨论这个内容。</p></blockquote><p>操作数据库使用的是复杂的SQL语句，它是完全不同于Python的另一种语言，这对新手来说无疑是困难的。</p><p>幸运的是，在 Django 里写Web应用并不需要你直接去操作数据库，而是定义好<strong>模型</strong>（用Python语法就可以了！），<strong>模型</strong>中包含了操作数据库所必要的命令。也就是说你只需要定义数据模型，其它的底层代码都不用关心，它们会自动从模型生成。</p><blockquote><p>其实它有专门的术语，叫<strong>对象关系映射</strong>（<strong>Object Relational Mapping</strong>，简称<strong>ORM</strong>），用于实现面向对象编程语言里不同类型系统的数据之间的转换。</p></blockquote><h2 id="编写Model-py"><a href="#编写Model-py" class="headerlink" title="编写Model.py"></a>编写Model.py</h2><p><strong>如前面所讲，Django中通过模型（Model）映射到数据库，处理与数据相关的事务。</strong></p><p>对博客网站来说，最重要的数据就是文章。所以首先来建立一个存放文章的数据模型。</p><p>打开<code>article/models.py</code>文件，输入如下代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>models<span class="token punctuation">.</span>py<span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token comment"># 导入内建的User模型。</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token comment"># timezone 用于处理时间相关事务。</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>utils <span class="token keyword">import</span> timezone<span class="token comment"># 博客文章数据模型</span><span class="token keyword">class</span> <span class="token class-name">ArticlePost</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 文章作者。参数 on_delete 用于指定数据删除的方式</span>    author <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>User<span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">)</span>    <span class="token comment"># 文章标题。models.CharField 为字符串字段，用于保存较短的字符串，比如标题</span>    title <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token comment"># 文章正文。保存大量文本使用 TextField</span>    body <span class="token operator">=</span> models<span class="token punctuation">.</span>TextField<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 文章创建时间。参数 default=timezone.now 指定其在创建数据时将默认写入当前的时间</span>    created <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>default<span class="token operator">=</span>timezone<span class="token punctuation">.</span>now<span class="token punctuation">)</span>    <span class="token comment"># 文章更新时间。参数 auto_now=True 指定每次数据更新时自动写入当前时间</span>    updated <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>auto_now<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码非常直白。</p><ul><li><p>每个模型都被表示为 <code>django.db.models.Model</code> 类的子类，从它继承了操作数据库需要的所有方法。</p></li><li><p>每个字段都是 <code>Field</code> 类的实例 。比如字符字段被表示为 <code>CharField</code> ，日期时间字段被表示为 <code>DateTimeField</code>。这将告诉Django要处理的数据类型。</p></li><li><p>定义某些 <code>Field</code> 类实例需要参数。例如 <code>CharField</code> 需要一个 <code>max_length</code>参数。这个参数的用处不止于用来定义数据库结构，也用于验证数据。</p></li><li><p>使用 <code>ForeignKey</code>定义一个关系。这将告诉 Django，每个（或多个） <code>ArticlePost</code> 对象都关联到一个 <code>User</code> 对象。</p><blockquote><p>Django具有一个简单的账号系统（User），满足一般网站的用户相关的基本功能。</p></blockquote></li></ul><p><code>ArticlePost</code>类定义了一篇文章所必须具备的要素：作者、标题、正文、创建时间以及更新时间。</p><p>我们还可以额外再定义一些内容，规范<code>ArticlePost</code>中数据的行为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>models<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">ArticlePost</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment"># 内部类 class Meta 用于给 model 定义元数据</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>    <span class="token comment"># ordering 指定模型返回的数据的排列顺序</span>    <span class="token comment"># '-created' 表明数据应该以倒序排列</span>        ordering <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'-created'</span><span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token comment"># 函数 __str__ 定义当调用对象的 str() 方法时的返回值内容</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># return self.title 将文章标题返回</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>title<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>内部类<code>Meta</code>中的<code>ordering</code>定义了数据的排列方式。<code>-created</code>表示将以创建时间的倒序排列，保证了最新的文章总是在网页的最上方。注意<code>ordering</code>是元组，括号中只含一个元素时不要忘记末尾的逗号。</p></li><li><p><code>__str__</code>方法定义了需要表示数据时应该显示的名称。给模型增加 <code>__str__</code>方法是很重要的，它最常见的就是在Django管理后台中做为对象的显示值。因此应该总是返回一个友好易读的字符串。</p></li></ul><p>整理并去掉注释，全部代码放在一起是这样：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>models<span class="token punctuation">.</span>py<span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils <span class="token keyword">import</span> timezone<span class="token keyword">class</span> <span class="token class-name">ArticlePost</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    author <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>User<span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">)</span>    title <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>    body <span class="token operator">=</span> models<span class="token punctuation">.</span>TextField<span class="token punctuation">(</span><span class="token punctuation">)</span>    created <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>default<span class="token operator">=</span>timezone<span class="token punctuation">.</span>now<span class="token punctuation">)</span>    updated <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>auto_now<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        ordering <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'-created'</span><span class="token punctuation">,</span><span class="token punctuation">)</span>            <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>title<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>恭喜你，你已经完成了博客网站最核心的数据模型的大部分内容。</strong></p><p>代码不到20行，是不是完全没啥感觉。后面会慢慢体会Django的强大。</p><h3 id="抄还是敲？"><a href="#抄还是敲？" class="headerlink" title="抄还是敲？"></a>抄还是敲？</h3><p>学习本教程时，代码部分直接拷贝还是纯手敲？</p><p>直接拷贝的优点是学得很快，理解原理后，把代码往自己项目中刷刷刷拷贝过去，几下就能运行了。但这要求学习者有较强的自律能力：什么程度才能算已经“理解”了？</p><p>纯手敲就避免了这个问题，想快也快不起来，还经常遇到bug，在解决的过程中纠正自身的习惯性问题。但是手敲的好处必须保证你敲的时候大脑没有放空。</p><p><strong>博主的建议是：</strong></p><ul><li><strong>模型</strong>、<strong>视图</strong>代码量不多，又是重点学习内容，尽量纯手敲。</li><li><strong>模板</strong>根据个人情况，适当拷贝。</li></ul><blockquote><p>视图、模板马上就会讲到。</p></blockquote><h2 id="代码分解"><a href="#代码分解" class="headerlink" title="代码分解"></a>代码分解</h2><blockquote><p>这部分内容不能理解也没关系，先跳过，待水平提高再回过头来阅读。</p></blockquote><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>Django框架基于python语言，而在python中用<code>import</code>或者<code>from...import</code>来导入模块。</p><p><strong>模块</strong>其实就一些函数和类的集合文件，它能实现一些相应的功能。当我们需要使用这些功能的时候，直接把相应的模块导入到我们的程序中就可以使用了。</p><p><code>import</code>用于导入整个功能模块。但实际使用时往往只需要用模块中的某一个功能，为此导入整个模块有点大材小用，因此可以用<code>from a import b</code>表示从模块<code>a</code>中导入<code>b</code>给我用就可以了。</p><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>Python作为面向对象编程语言，最重要的概念就是<strong>类</strong>（Class）和<strong>实例</strong>（Instance）。</p><p>类是抽象的模板，而实例是根据这个类创建出来的一个个具体的“对象”。每个对象都拥有相同的方法，但各自的数据可能不同。而这些方法被打包封装在一起，就组成了类。</p><p>比如说我们刚写的这个<code>ArticlePost</code>类，作用就是就为博客文章的内容提供了一个模板。每当有一篇新文章生成的时候，都要比对<code>ArticlePost</code>类来创建<code>author</code>、<code>title</code>、<code>body</code>…等等数据；虽然每篇文章的具体内容可能不一样，但是必须都遵循相同的规则。</p><p>在Django中，数据由模型来处理，而模型的载体就是类（Class）。</p><h3 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h3><p><strong>字段</strong>（field）表示数据库表的一个抽象类，Django使用字段类创建数据库表，并将Python类型映射到数据库。</p><p>在模型中，字段被实例化为类属性并表示特定的表，同时具有将字段值映射到数据库的属性及方法。</p><p>比方说<code>ArticlePost</code>类中有一个<code>title</code>的属性，这个属性中保存着<code>Charfield</code>类型的数据：即一个较短的字符串。</p><h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><p>数据库中有各种各样的数据表，有时候几张表的数据是互相关联的。比如一张表记录了所有的文章，另一张表记录了所有的用户，而文章是用户发表的，这时候这两张表就产生了关系。<strong>外键</strong>就是用来表示这种关系的。</p><p>而<code>ForeignKey</code>是用来解决“<strong>一对多</strong>”关系的。那什么又叫“一对多”？</p><p>在我们的<code>ArticlePost</code>模型中，一篇文章只能有一个作者，而一个作者可以有很多篇文章，这就是“一对多”关系。</p><p>又比如一个班级的同学中，每个同学只能有一种性别，而每种性别可以对应很多的同学，这也是“一对多”。</p><p>因此，通过<code>ForeignKey</code>外键，将<code>User</code>和<code>ArticlePost</code>关联到了一起，最终就是将博客文章的作者和网站的用户关联在一起了。</p><p>既然有“一对多”，当然也有<strong>“一对一”（<code>OneToOneField </code>）、“多对多”（<code>ManyToManyField</code>）</strong>。目前用不到这些外键，后面再回头来对比其差别。</p><blockquote><p>Django2.0 之前的版本外键的<code>on_delete</code>参数可以不填；Django2.0以后<code>on_delete</code>是必填项。</p></blockquote><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>内部类<code>class Meta</code>提供模型的元数据。元数据是<strong>“任何不是字段的东西”</strong>，例如排序选项<code>ordering</code>、数据库表名<code>db_table</code>、单数和复数名称<code>verbose_name</code>和 <code>verbose_name_plural</code>。这些信息不是某篇文章私有的数据，而是整张表的共同行为。</p><p>要不要写内部类是完全可选的，当然有了它可以帮助理解并规范类的行为。</p><p>在<code>ArticlePost</code>中我们使用的元数据<code>ordering = (&#39;-created&#39;,)</code>，表明了每当我需要取出文章列表，作为博客首页时，按照<code>-created</code>（即文章创建时间，负号标识倒序）来排列，保证了最新文章永远在最顶部位置。</p><h2 id="数据迁移（Migrations）"><a href="#数据迁移（Migrations）" class="headerlink" title="数据迁移（Migrations）"></a>数据迁移（Migrations）</h2><p>编写好了Model后，接下来就需要进行数据迁移。迁移是Django对模型所做的更改传递到数据库中的方式。</p><p><strong>注意，每当对数据库进行了更改（添加、修改、删除等）操作，都需要进行数据迁移。</strong></p><p>Django的迁移代码是由模型文件自动生成的，它本质上只是个历史记录，Django可以用它来进行数据库的滚动更新，通过这种方式使其能够和当前的模型匹配。</p><p>在虚拟环境中进入<code>my_blog</code>文件夹（还没熟悉venv的再温习: <a href="http://www.dusaiphoto.com/article/article-detail/4/">在Windows中搭建Django的开发环境</a>），输入<code>python manage.py makemigrations</code>，对模型的更改创建新的迁移表：</p><pre class="line-numbers language-none"><code class="language-none">(env) e:\django_project\my_blog&gt;python manage.py makemigrationsMigrations for &#39;article&#39;:  article\migrations\0001_initial.py    - Create model ArticlePost(env) e:\django_project\my_blog&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过运行 <code>makemigrations</code> 命令，Django 会检测你对模型文件的修改，并且把修改的部分储存为一次迁移。</p><p>然后输入<code>python manage.py migrate</code>，<strong>应用迁移到数据库中</strong>：</p><pre class="line-numbers language-none"><code class="language-none">(env) e:\django_project\my_blog&gt;python manage.py migrateOperations to perform:  Apply all migrations: admin, article, auth, contenttypes, sessionsRunning migrations:  Applying contenttypes.0001_initial... OK  ...  Applying sessions.0001_initial... OK(env) e:\django_project\my_blog&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>migrate</code> 命令选中所有还没有执行过的迁移并应用在数据库上，也就是将模型的更改同步到数据库结构上。迁移是非常强大的功能，它能让你在开发过程中持续的改变数据库结构而不需要重新删除和创建表。它专注于使数据库平滑升级而不会丢失数据。</p><blockquote><p>有点拗口，也有点枯燥，坚持。乐趣在后面。</p></blockquote><p><strong>再重复一次</strong>：每当你修改了<code>models.py</code>文件，都需要用<code>makemigrations</code>和<code>migrate</code>这两条指令迁移数据。</p><p>在迁移之后，Model的编写就算完成了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章初步了解了Django的MTV模式，编写了博客文章的Model模型<code>ArticlePost</code>，并将其迁移到了数据库中。</p><p>下一步就向View进军，学习如何调取模型中的数据。</p><ul><li><p>有疑问请在<a href="http://www.dusaiphoto.com/">杜赛的个人网站</a>留言，我会尽快回复。</p></li><li><p>或Email私信我：<a href="mailto:&#x64;&#x75;&#x73;&#97;&#x69;&#x70;&#x68;&#111;&#116;&#x6f;&#64;&#102;&#x6f;&#120;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#109;">&#x64;&#x75;&#x73;&#97;&#x69;&#x70;&#x68;&#111;&#116;&#x6f;&#64;&#102;&#x6f;&#120;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#109;</a></p></li><li><p>项目完整代码：<a href="https://github.com/stacklens/django_blog_tutorial">Django_blog_tutorial</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--06.View及Template</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/06.view-ji-template/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/06.view-ji-template/</url>
      
        <content type="html"><![CDATA[<h2 id="改写视图函数"><a href="#改写视图函数" class="headerlink" title="改写视图函数"></a>改写视图函数</h2><p>上一章我们感受了视图的工作流程。</p><p><strong>为了让视图真正发挥作用，</strong>改写<code>article/views.py</code>中的<code>article_list</code>视图函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token comment"># 导入数据模型ArticlePost</span><span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> ArticlePost<span class="token keyword">def</span> <span class="token function">article_list</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 取出所有博客文章</span>    articles <span class="token operator">=</span> ArticlePost<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 需要传递给模板（templates）的对象</span>    context <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">'articles'</span><span class="token punctuation">:</span> articles <span class="token punctuation">&#125;</span>    <span class="token comment"># render函数：载入模板，并返回context对象</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'article/list.html'</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码同样很直白，分析如下：</p><ul><li><p><code>from .models import ArticlePost</code>从<code>models.py</code>中导入<code>ArticlePost</code>数据类</p></li><li><p><code>ArticlePost.objects.all()</code>是数据类的方法，可以获得所有的对象（即博客文章），并传递给<code>articles</code>变量</p></li><li><p><code>context</code>定义了需要传递给<strong>模板</strong>的上下文，这里即<code>articles</code></p><blockquote><p>模板的概念马上就要讲。</p></blockquote></li><li><p>最后返回了<code>render</code>函数。它的作用是结合模板和上下文，并返回渲染后的HttpResponse对象。通俗的讲就是把context的内容，加载进模板，并通过浏览器呈现。</p></li></ul><p><code>render</code>的变量分解如下：</p><ul><li>request是固定的<code>request</code>对象，照着写就可以</li><li><code>article/list.html</code>定义了模板文件的位置、名称</li><li><code>context</code>定义了需要传入模板文件的上下文</li></ul><p>视图函数这样就写好了。</p><h2 id="编写模板（template）"><a href="#编写模板（template）" class="headerlink" title="编写模板（template）"></a>编写模板（template）</h2><p>在前面的视图中我们定义了模板的位置在<code>article/list.html</code>，因此在根目录下新建<code>templates</code>文件夹，再新建<code>article</code>文件夹，再新建<code>list.html</code>文件，即：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">my_blog│  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>├─article│  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>└─my_blog│  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>└─templates    └─ article        └─ <span class="token builtin">list</span><span class="token punctuation">.</span>html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>细心的你肯定注意到了，之前的Django文件后缀都是<code>.py</code>，代表Python文件；这里的模板文件后缀是<code>.html</code>，这又是什么呢？</p><p><strong>HTML是一种用于创建网页的标记语言。</strong>它被用来结构化信息，标注哪些文字是标题、哪些文字是正文等（当然不仅仅这点功能）。也可以简单理解为“给数据排版”的文件，跟你写文档用的Office Word一样一样的 。</p><p>在<code>list.html</code>文件中写入：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/article/list.html&#123;% for article in articles %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&#123;&#123; article.title &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>&#123;% endfor %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Django通过模板来动态生成HTML，其中就包含描述动态内容的一些特殊语法：</p><ul><li><p> <code>&#123;% for article in articles %&#125;`：`articles`为视图函数的`context`传递过来的上下文，即所有文章的集合。`&#123;% for %&#125;`循坏表示依次取出`articles`中的元素，命名为`article`，并分别执行接下来操作。末尾用`&#123;% endfor %&#125;</code>告诉Django循环结束的位置。</p></li><li><p>使用<code>.</code>符号来访问变量的属性。这里的<code>article</code>为模型中的某一条文章；我们在前面的<code>ArticlePost</code>中定义了文章的标题叫<code>title</code>，因此这里可以用<code>article.title</code>来访问文章的标题。</p></li><li><p><code>&lt;p&gt;...&lt;/p&gt;</code>即为html语言，中间包裹了一个段落的文字。</p></li></ul><p>在上一章中已经定义好了<code>urls.py</code>，因此不再需要改动了。</p><p>一切都很好，深吸一口气。保存所有文件，在浏览器中输入地址<code>http://127.0.0.1:8000/article/article-list/</code>，得到以下错误：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20180911/terror.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20180911/terror.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>似乎成功从来都不会很顺利。</p><h2 id="错误分析"><a href="#错误分析" class="headerlink" title="错误分析"></a>错误分析</h2><p>虽然出错了，好在Django提供了非常完善的错误处理系统，方便开发者快速找到Bug的蛛丝马迹。</p><p>第一行就醒目地提示：<strong>TemplateDoesNotExist</strong>，说明Django没有找到<code>list.html</code>这个文件。仔细检查目录、文件的名称无误，没问题就往下继续看。</p><p>然后发现有这么两行：</p><pre class="line-numbers language-none"><code class="language-none">...django\contrib\admin\templates\article\list.html (Source does not exist)...django\contrib\auth\templates\article\list.html (Source does not exist)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>似乎Django在这两个位置搜索（没有在刚创建的templates目录），没有发现需要的文件，然后返回了“未发现模板文件”的错误。</p><p>定位了问题的所在，接下来就是在如何“告诉”Django我的模板位置呢？</p><p>答案就在<code>settings.py</code>中了，它保存了Django项目的各种<strong>初始配置</strong>。</p><p>打开并找到这一段，加入代码<code>os.path.join(BASE_DIR, &#39;templates&#39;)</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">my_blog<span class="token operator">/</span>settings<span class="token punctuation">.</span>pyTEMPLATES <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment"># 定义模板位置</span>        <span class="token string">'DIRS'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'templates'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这就是说模板文件在项目根目录的<code>templates</code>文件夹中，去找找吧。</p><p>保存文件，重新启动服务器：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20180911/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE29.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20180911/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE29.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>成功！</p><p>虽然简陋，但是已经走通了MTV（model、template、view）环路。</p><p>不要激动，精彩的还在后面。</p><h3 id="三个工具"><a href="#三个工具" class="headerlink" title="三个工具"></a>三个工具</h3><blockquote><p>此节为 2019/6/1 新增</p></blockquote><p>读者在开发中每天都会遇到各种各样的问题。</p><p>解决问题的方法很多，其中有三个工具非常的有效，着重提一下：</p><ul><li><p><strong>Django报错页面</strong>：就是上面出现的那个黄黄的报错页面啦。Django报错页面在大多数情况下都能准确的判断错误类型、错误抛出的位置、甚至是解决方案。读者千万不要觉得读这么多英文好麻烦啊，其实重点就那么几句话。</p></li><li><p><strong>浏览器控制台</strong>：如果你用的浏览器是Chrome，那么打开控制台的快捷键是<code>Ctrl + Shift + i</code>。控制台里又有两个子页面很常用：<strong>Elements</strong>这里列出整个网页源码，可以在这里查看css样式的继承情况、容器的相互关系，甚至可以动态修改源码查看效果。<strong>Console</strong>类似运行Django的命令行。如果浏览器运行网页时遇到故障（比如<code>404 未找到资源</code>、<code>403 服务器通讯失败</code>、<code>500 服务器内部错误</code>），都会在这里提示。以后还可以在JavaScript代码中用<code>console.log()</code>指令将感兴趣的内容打印到Console中查看。<strong>非常非常有用</strong>。</p></li><li><p>**print()**：很多读者在写纯Python代码时知道用<code>print()</code>来查找bug，到Django中反而不会了。其实Django也是一样的，在视图函数中写的<code>print()</code>会打印到命令行中。</p></li></ul><p>依靠这三个工具，基本上就能给出90%以上的错误信息了。接下来就是把错误的关键词放到Google、Bing这些地方去搜索答案了。</p><p>再强调一下敲代码要细心。我发现很多读者的bug都是源自于拼写、缺行漏行这种让人沮丧的错误。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章我们重写了视图，编写了简单的模板，和前面的模型成功关联起来。</p><p>下一章将学习编写一个漂亮的网页模板。</p><ul><li>有疑问请在<a href="http://www.dusaiphoto.com/">杜赛的个人网站</a>留言，我会尽快回复。</li><li>或Email私信我：<a href="mailto:&#100;&#x75;&#115;&#x61;&#105;&#x70;&#x68;&#111;&#x74;&#111;&#64;&#102;&#111;&#x78;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#99;&#x6f;&#109;">&#100;&#x75;&#115;&#x61;&#105;&#x70;&#x68;&#111;&#x74;&#111;&#64;&#102;&#111;&#x78;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#99;&#x6f;&#109;</a></li><li>项目完整代码：<a href="https://github.com/stacklens/django_blog_tutorial">Django_blog_tutorial</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--07.使用Bootstrap改写模板</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/07.shi-yong-bootstrap-gai-xie-mo-ban/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/07.shi-yong-bootstrap-gai-xie-mo-ban/</url>
      
        <content type="html"><![CDATA[<p><strong>注意：学本章之前请检查 Django 版本，确保安装的是 Django 2 而不是 Django 3，否则后面所有的章节都会遇到 <code>staticfiles</code> 无法载入的错误。</strong></p><blockquote><p>在虚拟环境中输入 <code>pip list</code> 即可查看。</p></blockquote><p>上一章我们的网站页面实在太粗糙，你肯定不会拿来做真正的博客首页。因此这章我们要借助Bootstrap的力量，改写一个大气的博客。</p><h2 id="配置Bootstrap-4"><a href="#配置Bootstrap-4" class="headerlink" title="配置Bootstrap 4"></a>配置Bootstrap 4</h2><p><strong>Bootstrap</strong>是用于网站开发的开源前端框架（“前端”指的是展现给最终用户的界面），它提供字体排印、窗体、按钮、导航及其他各种组件，旨在使动态网页和Web应用的开发更加容易。</p><p>Bootstrap有几个版本都比较流行，<strong>我们选择最新版本的Bootstrap 4：</strong><a href="https://getbootstrap.com/docs/4.1/getting-started/download/">下载地址</a>，并解压。</p><p>然后在项目根目录下新建目录<code>static/bootstrap/</code>，用于存放Bootstrap静态文件。<strong>静态文件</strong>通常指那些不会改变的文件。Bootstrap中的css、js文件，就是静态文件。</p><p>把刚才解压出来的<code>css</code>和<code>js</code>两个文件夹复制进去。</p><p><strong>因为bootstrap.js依赖 jquery.js 和 popper.js 才能正常运行，因此这两个文件我们也需要一并下载保存。</strong>附上官网下载链接（进入下载页面，复制粘贴代码到新文件即可）：</p><ul><li><a href="https://jquery.com/download/">jquery.js</a></li><li><a href="https://popper.js.org/">popper.js</a></li></ul><blockquote><p>2018-10-29 新增：</p><p>不清楚<code>popper.js</code>如何下载的戳这个链接：</p><p><code>https://unpkg.com/popper.js@1.14.4/dist/umd/popper.js</code></p><p>进去后页面显示很长一段代码，把这段代码全部拷贝；在项目中新建名叫popper.js的文件，把刚拷贝的代码复制进去就可以了。很多开源js文件都是通过这样的方式下载。</p></blockquote><p>现在我们的<code>static/</code>目录结构像这样：</p><pre class="line-numbers language-none"><code class="language-none">my_blog│├─article└─my_blog│ ...└─static    └─bootstrap    │   ├─css # 文件夹    │   └─js # 文件夹    └─jquery    │   └─jquery-3.3.1.js # 文件    └─popper        └─popper-1.14.4.js # 文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为在Django中需要指定静态文件的存放位置，才能够在模板中正确引用它们。因此在<code>settings.py</code>的末尾加上：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">my_blog<span class="token operator">/</span>settings<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>STATICFILES_DIRS <span class="token operator">=</span> <span class="token punctuation">(</span>    os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">"static"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再确认一下<code>settings.py</code>中有没有<code>STATIC_URL = &#39;/static/&#39;</code>字段，如果没有把它也加在后面。</p><h2 id="编写模板"><a href="#编写模板" class="headerlink" title="编写模板"></a>编写模板</h2><p>在根目录下的<code>templates/</code>中，新建三个文件：</p><ul><li><p><code>base.html</code>是整个项目的模板基础，所有的网页都从它继承；</p></li><li><p><code>header.html</code>是网页顶部的导航栏；</p></li><li><p><code>footer.html</code>是网页底部的注脚。</p></li></ul><p>这三个文件在每个页面中通常都是不变的，独立出来可以避免重复写同样的代码，提高维护性。</p><p>现在<code>templates\</code>的结构像下面这个样子：</p><pre class="line-numbers language-none"><code class="language-none">templates│├─base.html├─header.html├─footer.html└─article    └─list.html # 上一章创建的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加上之前的<code>list.html</code>，接下来就要重新写这4个文件了。</p><p>因为前端知识非常博大精深，并且也不是Django学习的重点，本教程不会展开篇幅去讲。<strong>如果之前没接触过前端知识也没关系，这里可以先复制粘贴，不影响后面Django的学习。</strong></p><p>你可以试着改写其中的某段代码，看看会对页面产生什么样的影响；遇到不懂的就在<a href="https://getbootstrap.com/docs/4.1/getting-started/introduction/">Bootstrap官方文档</a>找答案。慢慢就会明白它的运行机制，毕竟Bootstrap真的是非常简单易用的工具。</p><blockquote><p>2018-10-29 新增：</p><p>Bootstrap是非常优秀的前端框架，上手简单，所以很流行。</p><p>官网是最权威的文档。你可以在官方网站上进行系统的学习：<a href="https://getbootstrap.com/docs/4.1/getting-started/introduction/">https://getbootstrap.com/docs/4.1/getting-started/introduction/</a></p><p>通篇去看Bootstrap文档会非常枯燥的，因此建议你可以像查字典一样的，需要用哪个模块，就到官网上找相关的代码，修改一下拷贝到你的项目中就可以了。用多了自然会明白每个字段的作用。</p></blockquote><p><strong>这里会一次性写大量代码，不要着急慢慢看，理解了就很简单了。</strong></p><p>首先写<code>base.html</code>：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/base.html<span class="token comment">&lt;!-- 载入静态文件 --></span>&#123;% load staticfiles %&#125;<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 网站主语言 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh-cn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 网站采用的字符编码 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 预留网站标题的位置 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>&#123;% block title %&#125;&#123;% endblock %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 引入bootstrap的css文件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% static <span class="token punctuation">'</span>bootstrap/css/bootstrap.min.css<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 引入导航栏 --></span>    &#123;% include 'header.html' %&#125;    <span class="token comment">&lt;!-- 预留具体页面的位置 --></span>    &#123;% block content %&#125;&#123;% endblock content %&#125;    <span class="token comment">&lt;!-- 引入注脚 --></span>    &#123;% include 'footer.html' %&#125;    <span class="token comment">&lt;!-- bootstrap.js 依赖 jquery.js 和popper.js，因此在这里引入 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% static <span class="token punctuation">'</span>jquery/jquery-3.3.1.js<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% static <span class="token punctuation">'</span>popper/popper-1.14.4.js<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 引入bootstrap的js文件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% static <span class="token punctuation">'</span>bootstrap/js/bootstrap.min.js<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>模板中要加上 <code>&#123;% load staticfiles %&#125;</code> 之后，才可使用 <code>&#123;% static 'path' %&#125;</code> 引用静态文件。</li><li>HTML语法中，所有的内容都被标签包裹；标签及标签中的属性可以对内容进行排印、解释说明等作用。</li><li><code>&lt;head&gt;&lt;/head&gt;</code>标签内包含网页的元数据，是不会在页面内显示出来的。<code>&lt;body&gt;&lt;/body&gt;</code>标签内才是网页会显示的内容。</li><li>留意Bootstrap的css、js文件分别是如何引入的</li><li> jquery.js 和 popper.js 要在 bootstrap.js 前引入。</li></ul><p>然后是<code>header.html</code>：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/header.html<span class="token comment">&lt;!-- 定义导航栏 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar navbar-expand-lg navbar-dark bg-dark<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 导航栏商标 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar-brand<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我的博客<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 导航入口 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar-nav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 条目 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-link<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文章<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>标签内的<code>class</code>属性是Bootstrap样式的定义方法。试着改写或删除其中一些内容，观察页面的变化。</p><p>然后改写之前的<code>list.html</code>：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/article/list.html<span class="token comment">&lt;!-- extends表明此页面继承自 base.html 文件 --></span>&#123;% extends "base.html" %&#125;&#123;% load staticfiles %&#125;<span class="token comment">&lt;!-- 写入 base.html 中定义的 title --></span>&#123;% block title %&#125;    首页&#123;% endblock title %&#125;<span class="token comment">&lt;!-- 写入 base.html 中定义的 content --></span>&#123;% block content %&#125;<span class="token comment">&lt;!-- 定义放置文章标题的div容器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row mt-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        &#123;% for article in articles %&#125;        <span class="token comment">&lt;!-- 文章内容 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-4 mb-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 卡片容器 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card h-100<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- 标题 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; article.title &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- 摘要 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; article.body|slice:'100' &#125;&#125;...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- 注脚 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>阅读本文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        &#123;% endfor %&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>&#123;% endblock content %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>留意<code>&#123;% block title %&#125;</code>和<code>&#123;% block content %&#125;</code>是如何与<code>base.html</code>中相对应起来的。</li><li>摘要中的<code>&#123;&#123; article.body|slice:'100' &#125;&#125;</code>取出了文章的正文；其中的<code>|slice:&#39;100&#39;</code>是Django的过滤器语法，表示取出正文的前100个字符，避免摘要太长。</li></ul><p>最后写入<code>footer.html</code>：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&#123;% load staticfiles %&#125;<span class="token comment">&lt;!-- Footer --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>py-3 bg-dark fixed-bottom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>m-0 text-center text-white<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Copyright <span class="token entity named-entity" title="&copy;">&amp;copy;</span> www.dusaiphoto.com 2018<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>呼，真是一大堆的东西啊。</p><p><strong>让我们来捋一捋发生了什么：</strong></p><p>当我们通过<code>url</code>访问<code>list.html</code>时，顶部的<code>&#123;% extends "base.html" %&#125;</code>告诉Django：“这个文件是继承<code>base.html</code>的，你去调用它吧。”</p><p>于是Django就老老实实去渲染<code>base.html</code>文件：</p><ul><li>其中的<code>&#123;% include 'header.html' %&#125;</code>表明这里需要加入<code>header.html</code>的内容</li><li><code>&#123;% include 'footer.html' %&#125;</code>加入<code>footer.html</code>的内容</li><li><code>&#123;% block content %&#125;&#123;% endblock content %&#125;</code>表明这里应该加入<code>list.html</code>中的对应块的内容</li></ul><h2 id="运行服务器"><a href="#运行服务器" class="headerlink" title="运行服务器"></a>运行服务器</h2><p>老规矩，保存全部文件，进入虚拟环境，运行开发服务器，在浏览器中输入<code>http://127.0.0.1:8000/article/article-list/</code>，看到如下页面：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20180916/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE32.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20180916/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE32.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>一个漂亮的博客界面就这样出现在眼前，非常神奇。</p><p><strong>如果报错也不要着急，程序员就是不断与bug斗争的一个职业。</strong>仔细检查Django给出的错误提示，修复它，你一定行。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章我们引入了前端框架Bootstrap 4，借助它重新组织了模板的结构，编写了一个漂亮的博客网站的首页。</p><p>下一章我们将学习编写文章详情页面。</p><ul><li>有疑问请在<a href="http://www.dusaiphoto.com/">杜赛的个人网站</a>留言，我会尽快回复。</li><li>或Email私信我：<a href="mailto:&#x64;&#x75;&#115;&#x61;&#105;&#112;&#104;&#x6f;&#x74;&#111;&#64;&#x66;&#111;&#120;&#109;&#x61;&#x69;&#108;&#46;&#99;&#111;&#x6d;">&#x64;&#x75;&#115;&#x61;&#105;&#112;&#104;&#x6f;&#x74;&#111;&#64;&#x66;&#111;&#120;&#109;&#x61;&#x69;&#108;&#46;&#99;&#111;&#x6d;</a></li><li>项目完整代码：<a href="https://github.com/stacklens/django_blog_tutorial">Django_blog_tutorial</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--08.编写文章详情页面</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/08.bian-xie-wen-zhang-xiang-qing-ye-mian/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/08.bian-xie-wen-zhang-xiang-qing-ye-mian/</url>
      
        <content type="html"><![CDATA[<p>有了文章列表页面后，当然还需要详情页面，方便用户对某一篇感兴趣的文章深入阅读。</p><h2 id="编写视图函数"><a href="#编写视图函数" class="headerlink" title="编写视图函数"></a>编写视图函数</h2><p>打开<code>article/views.py</code>，增加文章详情页面的视图函数<code>article_detail()</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 文章详情</span><span class="token keyword">def</span> <span class="token function">article_detail</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 取出相应的文章</span>    article <span class="token operator">=</span> ArticlePost<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token builtin">id</span><span class="token punctuation">)</span>    <span class="token comment"># 需要传递给模板的对象</span>    context <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">'article'</span><span class="token punctuation">:</span> article <span class="token punctuation">&#125;</span>    <span class="token comment"># 载入模板，并返回context对象</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'article/detail.html'</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>article_detail(request, id)</code>函数中多了<code>id</code>这个参数。<strong>注意我们在写model的时候并没有写叫做id的字段，</strong>这是Django自动生成的用于索引数据表的主键（Primary Key，即pk）。有了它才有办法知道到底应该取出哪篇文章。</li><li><code>ArticlePost.objects.get(id=id)</code>意思是在所有文章中，取出id值相符合的唯一的一篇文章。</li></ul><p>然后编写<code>article/urls.py</code>，配置路由地址：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>urls<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment"># 文章详情</span>    path<span class="token punctuation">(</span><span class="token string">'article-detail/&lt;int:id>/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>article_detail<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'article_detail'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>&lt;int:id&gt;</code>：Django2.0的<code>path</code>新语法用**尖括号&lt;&gt;**定义需要传递的参数。这里需要传递名叫<code>id</code>的整数到视图函数中去。</p><p><strong>重申一下老版本的Django是没有<code>path</code>语法的。</strong></p><h2 id="编写模板"><a href="#编写模板" class="headerlink" title="编写模板"></a>编写模板</h2><p>在<code>templates/article/</code>中新建<code>detail.html</code>文件，编写如下代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/article/detail.html<span class="token comment">&lt;!-- extends表明此页面继承自 base.html 文件 --></span>&#123;% extends "base.html" %&#125;&#123;% load staticfiles %&#125;<span class="token comment">&lt;!-- 写入 base.html 中定义的 title --></span>&#123;% block title %&#125;    文章详情&#123;% endblock title %&#125;<span class="token comment">&lt;!-- 写入 base.html 中定义的 content --></span>&#123;% block content %&#125;<span class="token comment">&lt;!-- 文章详情 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 标题及作者 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-12 mt-4 mb-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; article.title &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-12 alert alert-success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>作者：&#123;&#123; article.author &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 文章正文 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&#123;&#123; article.body &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>&#123;% endblock content %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>这里我们用<code>&#123;&#123; article.xxx &#125;&#125;</code>取出了文章标题、作者以及正文。</strong></p><p>前面我们已经通过后台创建了几篇文章，这里将取出id为1的一篇文章测试效果。</p><p>运行开发服务器后，在浏览器中输入<code>http://127.0.0.1:8000/article/article-detail/1/</code>：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20180916/34.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20180916/34.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><h2 id="优化网页入口"><a href="#优化网页入口" class="headerlink" title="优化网页入口"></a>优化网页入口</h2><p>虽然已经实现了文章详情功能，但是通过输入url访问的方式实在太不友好。</p><p>改写<code>header.html</code>，让用户可通过导航栏右侧的<strong>文章</strong>链接返回首页：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/header.html...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar-nav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token comment">&lt;!-- 改写了这里的 href --></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-link<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>article:article_list<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文章<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意看这里href是如何改写的：</strong></p><ul><li><p>href定义了链接跳转的地址。</p></li><li><p><code>&#123;% url '...' %&#125;</code>是Django规定的模板解耦语法，用它可以根据我们在<code>urls.py</code>中设置的名字，反向解析到对应的url中去。</p></li></ul><p>关于其中的<code>&#39;article:article_list&#39;</code>的解释：</p><ul><li>前面的<code>article</code>是在项目根目录的<code>urls.py</code>中定义的app的名称</li><li>后面的<code>article_list</code>是在app中的<code>urls.py</code>中定义的具体的路由地址</li></ul><p>通过这样的方法就将链接跳转的指向给配置好了，只要对应url的名称不变，url本身无论怎么变化，Django都可以解析到正确的地址，很灵活。</p><p>当然你也可以直接在<code>href</code>中写入url的地址，但是一旦url有变化，所有相关的链接都会失效，维护性不好。</p><p>然后再改写<code>list.html</code>，让用户可点击<strong>阅读本文</strong>按钮进入文章详情：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/article/list.html...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 同样改写 href --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>article:article_detail<span class="token punctuation">'</span> article.id %&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>阅读本文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>留意文章的id是如何传递的：</strong></p><ul><li>在<code>list.html</code>中，通过<code>href=&quot;&#123;% url 'article:article_detail' article.id %&#125;&quot;</code>，将id传递给<code>article/urls.py</code></li><li>在<code>article/urls.py</code>中，通过<code>&lt;int:id&gt;</code>传递给视图函数<code>article_detail()</code></li><li>在视图函数<code>article_detail()</code>中，通过形参<code>id</code>取得了文章的id值，并进行处理，最终定位了需要获取的文章对象</li></ul><p>现在我们可以通过链接访问网站上的不同页面了，而不需要手动输入url。当然这也是现代网站的基础。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>现在我们也拥有查看文章详情的功能了，并且优化了网页切换的体验。</p><p>下一章将学习使用Markdown语法对文章正文进行排版。</p><ul><li>有疑问请在<a href="http://www.dusaiphoto.com/">杜赛的个人网站</a>留言，我会尽快回复。</li><li>或Email私信我：<a href="mailto:&#100;&#117;&#x73;&#97;&#105;&#x70;&#104;&#x6f;&#116;&#x6f;&#x40;&#102;&#x6f;&#120;&#x6d;&#x61;&#x69;&#108;&#x2e;&#99;&#111;&#109;">&#100;&#117;&#x73;&#97;&#105;&#x70;&#104;&#x6f;&#116;&#x6f;&#x40;&#102;&#x6f;&#120;&#x6d;&#x61;&#x69;&#108;&#x2e;&#99;&#111;&#109;</a></li><li>项目完整代码：<a href="https://github.com/stacklens/django_blog_tutorial">Django_blog_tutorial</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--09.使用Markdown书写文章</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/09.shi-yong-markdown-shu-xie-wen-zhang/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/09.shi-yong-markdown-shu-xie-wen-zhang/</url>
      
        <content type="html"><![CDATA[<p>上一章我们实现了文章详情页面。为了让文章正文能够进行标题、加粗、引用、代码块等不同的排版（像在Office中那样！），我们将使用Markdown语法。</p><h2 id="安装Markdown"><a href="#安装Markdown" class="headerlink" title="安装Markdown"></a>安装Markdown</h2><p><strong>Markdown</strong>是一种轻量级的标记语言，它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的或者HTML文档。建议读者一定要花五分钟时间熟悉一下Markdown的语法，熟练后码字效率一定会大幅提高。</p><p>关于Markdown语法看这里：<a href="https://coding.net/help/doc/project/markdown.html">Markdown 语法介绍</a></p><p>安装markdown也很简单：进入虚拟环境，输入指令<code>pip install markdown</code>即可。</p><h2 id="使用Markdown"><a href="#使用Markdown" class="headerlink" title="使用Markdown"></a>使用Markdown</h2><p>为了将Markdown语法书写的文章渲染为HTML文本，首先改写<code>article/views.py</code>的<code>article_detail()</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 引入markdown模块</span><span class="token keyword">import</span> markdown<span class="token keyword">def</span> <span class="token function">article_detail</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    article <span class="token operator">=</span> ArticlePost<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token builtin">id</span><span class="token punctuation">)</span>    <span class="token comment"># 将markdown语法渲染成html样式</span>    article<span class="token punctuation">.</span>body <span class="token operator">=</span> markdown<span class="token punctuation">.</span>markdown<span class="token punctuation">(</span>article<span class="token punctuation">.</span>body<span class="token punctuation">,</span>        extensions<span class="token operator">=</span><span class="token punctuation">[</span>        <span class="token comment"># 包含 缩写、表格等常用扩展</span>        <span class="token string">'markdown.extensions.extra'</span><span class="token punctuation">,</span>        <span class="token comment"># 语法高亮扩展</span>        <span class="token string">'markdown.extensions.codehilite'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span>    context <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">'article'</span><span class="token punctuation">:</span> article <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'article/detail.html'</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码中<code>markdown.markdown</code>语法接收两个参数：第一个参数是需要渲染的文章正文<code>article.body</code>；第二个参数载入了常用的语法扩展，<code>markdown.extensions.extra</code>中包括了缩写、表格等扩展，<code>markdown.extensions.codehilite</code>则是后面要使用的代码高亮扩展。</p><p>然后，修改<code>templates/article/detail.html</code>中有关文章正文的部分：</p><pre class="line-numbers language-none"><code class="language-none">templates&#x2F;article&#x2F;detail.html...# 在 article.body 后加上 |safe 过滤器&lt;p&gt;&#123;&#123; article.body|safe &#125;&#125;&lt;&#x2F;p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Django出于安全的考虑，会将输出的HTML代码进行转义，<strong>这使得<code>article.body</code>中渲染的HTML文本无法正常显示。</strong>管道符<code>|</code>是Django中过滤器的写法，而<code>|safe</code>就类似给<code>article.body</code>贴了一个标签，表示这一段字符不需要进行转义了。</p><p>这样就把Markdown语法配置好了。</p><p>启动服务器，在后台中新录入一条用markdown语法书写的文章，内容如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 国风·周南·关雎</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">**</span>关关雎鸠，在河之洲。窈窕淑女，君子好逑。<span class="token operator">**</span>参差荇菜，左右流之。窈窕淑女，寤寐求之。<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span> 列表一<span class="token operator">+</span> 列表二    <span class="token operator">+</span> 列表二<span class="token operator">-</span><span class="token number">1</span>    <span class="token operator">+</span> 列表二<span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>​```python<span class="token keyword">def</span> <span class="token function">article_detail</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span>article <span class="token operator">=</span> ArticlePost<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token comment"># 将markdown语法渲染成html样式</span>article<span class="token punctuation">.</span>body <span class="token operator">=</span> markdown<span class="token punctuation">.</span>markdown<span class="token punctuation">(</span>article<span class="token punctuation">.</span>body<span class="token punctuation">,</span>extensions<span class="token operator">=</span><span class="token punctuation">[</span><span class="token comment"># 包含 缩写、表格等常用扩展</span><span class="token string">'markdown.extensions.extra'</span><span class="token punctuation">,</span><span class="token comment"># 语法高亮扩展</span><span class="token string">'markdown.extensions.codehilite'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span>context <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">'article'</span><span class="token punctuation">:</span> article <span class="token punctuation">&#125;</span><span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'article/detail.html'</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span>​```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注意</strong>：直接复制本段Markdown文字到你的项目中，可能导致语法高亮不正常（猜测是换行符导致的？）。建议读者手动输入。感谢读者<a href="https://www.dusaiphoto.com/my-notifications/mark-as-read/20/451/article/#F215">micronuths的反馈</a>。</p></blockquote><p>返回文章详情，结果如下：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20180917/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE42.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20180917/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE42.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>很好，但是代码块还是不怎么好看。</p><p>写技术文章没有代码高亮怎么行。继续努力。</p><h2 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h2><p>在<code>static</code>目录中新建一个目录<code>md_css/</code>，一会儿放置代码高亮的样式文件。</p><p>重新打开一个命令行窗口，<strong>进入虚拟环境，安装Pygments：<code>pip install Pygments</code></strong></p><p>Pygments是一种通用语法高亮显示器，可以帮助我们自动生成美化代码块的样式文件。</p><p>在命令行中进入刚才新建的<code>md_css</code>目录中，输入Pygments指令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pygmentize -S monokai -f html -a .codehilite <span class="token operator">></span> monokai.css<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>这里有一点需要注意, 生成命令中的 -a 参数需要与真实页面中的 CSS Selector 相对应，即<code>.codehilite</code>这个字段在有些版本中应写为<code>.highlight</code>。如果后面的代码高亮无效，很可能是这里出了问题。</strong></p><p>回车后检查一下，在<code>md_css</code>目录中是否自动生成了一个叫<code>monokai.css</code>的文件，这是一个深色背景的高亮样式文件。</p><p>接下来我们在<code>base.html</code>中引用这个文件：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/base.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% static <span class="token punctuation">'</span>bootstrap/css/bootstrap.min.css<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 引入monikai.css --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% static <span class="token punctuation">'</span>md_css/monokai.css<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新启动服务器，顺利的话看到如下：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20180917/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE41.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20180917/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE41.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>除了Monokai这个深色的样式外，Pygments还内置了很多其他的样式，这个就看喜好选择了。</p><p>各种不同样式可以在这里参照：<a href="https://github.com/richleland/pygments-css">pygments-css</a></p><hr><h3 id="故障排查"><a href="#故障排查" class="headerlink" title="故障排查"></a>故障排查</h3><blockquote><p>此节 2018/12/22 新增</p></blockquote><p>代码高亮这里遇到问题的读者比较多，因此展开讲一下如何排查问题。其他地方遇到类似问题也可以这样去做。</p><p>首先请查看网页的源代码：用<a href="https://www.google.com/chrome/">Chrome</a>浏览器的同学按<strong>Ctrl+U</strong>，其他浏览器请自行查找快捷键。</p><p><strong>找到正文中书写代码块的部分。正常情况下这部分的源代码应该是这样的：</strong></p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20181222/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE116.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20181222/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE116.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><ul><li><p>代码块被<code>&lt;div class=&quot;codehilite&quot;&gt;</code>包裹（或者<code>&lt;div class=&quot;highlight&quot;&gt;</code>）</p></li><li><p>代码内容被各种不同的<code>&lt;span&gt;</code>包裹</p></li></ul><p><strong>根据源代码，可能出现的问题分为以下两种：</strong></p><ul><li><p>如果看到的源代码跟上面的很像，很可能是模板出了问题</p></li><li><p>如果看到的源代码跟上面的区别很大，很可能是视图出了问题</p></li></ul><p>下面分别说说怎么解决。</p><p><strong>如果模板出了问题：</strong></p><ul><li><p>检查<code>monokai.css</code>这个文件是否正常载入。检查方法就是直接点击网页源代码中的<code>&lt;link&gt;</code>引用链接，看是否正常。</p><ul><li><p>如果链接正常，看一下每行开头字段是<code>.codehilite</code>还是<code>highlight</code>，确保和包裹代码块的字段相对应</p></li><li><p>如果链接不正常，查看<code>settings.py</code>中是否忘记写<code>STATIC_URL</code>或者<code>STATICFILES_DIRS</code>字段</p></li></ul></li><li><p>进入浏览器开发者模式，查看<code>monokai.css</code>样式是否被别的样式所覆盖。Chrome请按<strong>F12</strong>或者<strong>Ctrl+Shift+I</strong></p></li><li><p>最后清除浏览器缓存，重启服务器</p></li></ul><p><strong>如果视图出了问题：</strong></p><ul><li><p>重新安装 markdown 和 pygments，卸载指令是<code>pip uninstall xxx</code></p></li><li><p>注释掉<code>markdown.extensions.extra</code>或者<code>markdown.extensions.codehilite</code>，刷新网页源代码看看是否有变化。如果没有变化说明扩展没有正确载入</p></li><li><p>最后清除浏览器缓存，重启服务器</p></li></ul><p><strong>特别提醒markdown中代码块的书写：</strong></p><ul><li><p>开头：单独一行。三个点符（英文输入法时，Tab键上面那个键），后紧跟python这个单词</p></li><li><p>正文：即代码本身。缩进请用4个空格</p></li><li><p>结尾：单独一行。还是三个点符</p></li></ul><p>遇到几个读者都是因为书写的问题，找了一个上午的Bug，痛不欲生…</p><p>如果以上步骤还没解决你的问题，不妨暂时跳过这一部分，不影响后面的学习。</p><h2 id="自定义样式"><a href="#自定义样式" class="headerlink" title="自定义样式"></a>自定义样式</h2><blockquote><p>此节 2019/6/1 新增</p></blockquote><p>很多读者注意到博主的Markdown文章样式似乎比<code>pygments</code>生成的样式要漂亮一些。</p><p>确实是这样的。<code>pygments</code>提供的样式比较基础，满足不了各位大佬千奇百怪的需求，因此需要对文章样式进行深度定制。</p><p>定制的方法很多。首先你应该注意到了，<code>pygments</code>生成的其实就是<strong>普通的css文件</strong>而已，源码也不复杂，会一点点css基础就能看懂。你完全可以自由的改动源码，变换颜色、字间距、给代码块加圆角、增加图片阴影，都随便你。</p><p>另一个经常被读者问到的是，<code>pygments</code>的表格样式太难看了，自己从零定制表格样式又太麻烦，怎么办？博主的处理办法偷了个懒，在页面中用<code>Jquery</code>动态加载了<code>Bootstrap</code>的表格样式，就像这样：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div#article_body table'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'table table-bordered'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div#article_body thead'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'thead-light'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很方便就得到漂亮的表格。</p><blockquote><p>注意这里只是示例，照搬代码可能会有错误。Jquery后面才会讲到，读者不懂的可先查阅一点基础知识。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章引进了Markdown语法以及代码高亮扩展，从此可以写排版漂亮的文章正文了。</p><p>下一章将学习如何创建一篇新的文章。</p><ul><li>有疑问请在<a href="http://www.dusaiphoto.com/">杜赛的个人网站</a>留言，我会尽快回复。</li><li>或Email私信我：<a href="mailto:&#x64;&#x75;&#x73;&#97;&#105;&#x70;&#104;&#111;&#116;&#x6f;&#64;&#102;&#111;&#x78;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#x63;&#111;&#x6d;">&#x64;&#x75;&#x73;&#97;&#105;&#x70;&#104;&#111;&#116;&#x6f;&#64;&#102;&#111;&#x78;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#x63;&#111;&#x6d;</a></li><li>项目完整代码：<a href="https://github.com/stacklens/django_blog_tutorial">Django_blog_tutorial</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--10.发布新的文章</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/10.fa-bu-xin-de-wen-zhang/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/10.fa-bu-xin-de-wen-zhang/</url>
      
        <content type="html"><![CDATA[<p>前面我们已经学会如何用Markdown语法书写文章了。</p><p>但是还有问题呀。之前写文章都是在后台中进行的，<strong>万一有别的普通用户也要发表文章怎么办？万一我想拓展些后台中没有的提交验证功能又怎么办？</strong></p><p>本章即讲述如何在前台中提交新的文章，以便满足开发者各种各样的<em>特殊需求</em>。</p><h2 id="Forms表单类"><a href="#Forms表单类" class="headerlink" title="Forms表单类"></a>Forms表单类</h2><p><strong>在HTML中，表单是在 <code>&lt;form&gt;...&lt;/form&gt;</code> 中的一些元素</strong>，它允许访客做类似输入文本、选择选项、操作对象或空间等动作，然后发送这些信息到服务端。一些表单界面元素（文本框或复选框）非常简单并内置在HTML中，而其他会复杂些：像弹出日期选择等操作控件。</p><p>处理表单是一件挺复杂的事情。想想看Django的admin，许多不同类型的数据可能需要在一张表单中准备显示，渲染成HTML，使用方便的界面进行编辑，传到服务器，验证和清理数据，然后保存或跳过进行下一步处理。</p><p>Django的表单功能可以简化上述工作的大部分内容，并且也能比大多数程序员自己编写代码去实现来的更安全。</p><p><strong>Django表单系统的核心组件是 <code>Form</code>类</strong>，它能够描述一张表单并决定它如何工作及呈现。</p><p>要使用<code>Form</code>类也很简单，需要在<code>article/</code>中创建<code>forms.py</code>文件，并写入如下代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>forms<span class="token punctuation">.</span>py<span class="token comment"># 引入表单类</span><span class="token keyword">from</span> django <span class="token keyword">import</span> forms<span class="token comment"># 引入文章模型</span><span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> ArticlePost<span class="token comment"># 写文章的表单类</span><span class="token keyword">class</span> <span class="token class-name">ArticlePostForm</span><span class="token punctuation">(</span>forms<span class="token punctuation">.</span>ModelForm<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        <span class="token comment"># 指明数据模型来源</span>        model <span class="token operator">=</span> ArticlePost        <span class="token comment"># 定义表单包含的字段</span>        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">,</span> <span class="token string">'body'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码中<code>ArticlePostForm</code>类继承了Django的表单类<code>forms.ModelForm</code>，并在类中定义了内部类<code>class Meta</code>（之前提到过，<a href="https://www.dusaiphoto.com/article/article-detail/11/">还记得吗</a>），指明了数据模型的来源，以及表单中应该包含数据模型的哪些字段。</p><p>在<code>ArticlePost</code>模型中，<code>created</code>和<code>updated</code>字段为自动生成，不需要填入；<code>author</code>字段暂时固定为id=1的管理员用户，也不用填入；剩下的<code>title</code>和<code>body</code>就是表单需要填入的内容了。</p><p>接下来，改写<code>article/views.py</code>，添加一个视图函数以处理写文章的请求：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 引入redirect重定向模块</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token punctuation">,</span> redirect<span class="token comment"># 引入HttpResponse</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token comment"># 引入刚才定义的ArticlePostForm表单类</span><span class="token keyword">from</span> <span class="token punctuation">.</span>forms <span class="token keyword">import</span> ArticlePostForm<span class="token comment"># 引入User模型</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 写文章的视图</span><span class="token keyword">def</span> <span class="token function">article_create</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 判断用户是否提交数据</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"POST"</span><span class="token punctuation">:</span>        <span class="token comment"># 将提交的数据赋值到表单实例中</span>        article_post_form <span class="token operator">=</span> ArticlePostForm<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>        <span class="token comment"># 判断提交的数据是否满足模型的要求</span>        <span class="token keyword">if</span> article_post_form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># 保存数据，但暂时不提交到数据库中</span>            new_article <span class="token operator">=</span> article_post_form<span class="token punctuation">.</span>save<span class="token punctuation">(</span>commit<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>            <span class="token comment"># 指定数据库中 id=1 的用户为作者</span>            <span class="token comment"># 如果你进行过删除数据表的操作，可能会找不到id=1的用户</span>            <span class="token comment"># 此时请重新创建用户，并传入此用户的id</span>            new_article<span class="token punctuation">.</span>author <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token comment"># 将新文章保存到数据库中</span>            new_article<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 完成后返回到文章列表</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">"article:article_list"</span><span class="token punctuation">)</span>        <span class="token comment"># 如果数据不合法，返回错误信息</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"表单内容有误，请重新填写。"</span><span class="token punctuation">)</span>    <span class="token comment"># 如果用户请求获取数据</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment"># 创建表单类实例</span>        article_post_form <span class="token operator">=</span> ArticlePostForm<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 赋值上下文</span>        context <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">'article_post_form'</span><span class="token punctuation">:</span> article_post_form <span class="token punctuation">&#125;</span>        <span class="token comment"># 返回模板</span>        <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'article/create.html'</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析一下上面的代码。当视图函数接收到一个客户端的<code>request</code>请求时，首先根据<code>request.method</code>判断用户是要<strong>提交数据（POST）、还是要获取数据（GET）</strong>：</p><ul><li><p>如果用户是<strong>提交数据</strong>，将POST给服务器的表单数据赋于<code>article_post_form</code>实例。然后使用Django内置的方法<code>.is_valid()</code>判断提交的数据是否满足模型的要求。</p><ul><li><p>如果<strong>满足要求</strong>，保存表单中的数据（但是<code>commit=False</code>暂时不提交到数据库，因为<code>author</code>还未指定），并指定<code>author</code>为id=1的管理员用户。然后提交到数据库，并通过<code>redirect</code>返回文章列表。<code>redirect</code>可通过url地址的名字，反向解析到对应的url。</p></li><li><p>如果<strong>不满足要求</strong>，则返回一个字符串**”表单内容有误，请重新填写。”**，告诉用户出现了什么问题。</p></li></ul></li><li><p>如果用户是<strong>获取数据</strong>，则返回一个空的表单类对象，提供给用户填写。</p></li></ul><p>其实逻辑并不复杂，不明白的读者请逐句理解。</p><p>Django官方文档对Form类做了详细的说明：</p><p><code>Form</code>实例可以<strong>绑定</strong>到数据，也可以<strong>不绑定</strong>数据。</p><ul><li>如果<strong>绑定</strong>到数据，就能够验证该数据并将表单呈现为HTML并显示数据。</li><li>如果它<strong>未绑定</strong>，则无法进行验证（因为没有要验证的数据！），但仍然可以将空白表单呈现为HTML。</li></ul><p>要将数据绑定到表单，就将数据作为字典作为第一个参数传递给<code>Form</code>类构造函数：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">>>> data = <span class="token punctuation">&#123;</span>'subject'<span class="token operator">:</span> 'hello'<span class="token punctuation">,</span>...         'message'<span class="token operator">:</span> 'Hi there'<span class="token punctuation">,</span>...         'sender'<span class="token operator">:</span> 'foo@example.com'<span class="token punctuation">,</span>...         'cc_myself'<span class="token operator">:</span> True<span class="token punctuation">&#125;</span>>>> f = ContactForm(data)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Form</code>对象的主要任务是验证数据。使用绑定后的 <code>Form</code>实例，调用<code>is_valid()</code>方法验证并返回指定数据是否有效的布尔值：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">>>> data = <span class="token punctuation">&#123;</span>'subject'<span class="token operator">:</span> 'hello'<span class="token punctuation">,</span>...         'message'<span class="token operator">:</span> 'Hi there'<span class="token punctuation">,</span>...         'sender'<span class="token operator">:</span> 'foo@example.com'<span class="token punctuation">,</span>...         'cc_myself'<span class="token operator">:</span> True<span class="token punctuation">&#125;</span>>>> f = ContactForm(data)>>> f.is_valid()True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>让我们尝试一些无效的数据。<code>subject</code>为空（错误，因为默认情况下需要所有字段），并且<code>sender</code>不是有效的电子邮件地址:</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">>>> data = <span class="token punctuation">&#123;</span>'subject'<span class="token operator">:</span> ''<span class="token punctuation">,</span>...         'message'<span class="token operator">:</span> 'Hi there'<span class="token punctuation">,</span>...         'sender'<span class="token operator">:</span> 'invalid email address'<span class="token punctuation">,</span>...         'cc_myself'<span class="token operator">:</span> True<span class="token punctuation">&#125;</span>>>> f = ContactForm(data)>>> f.is_valid()False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于Forms类的详细解释看这里：<a href="https://docs.djangoproject.com/zh-hans/2.1/ref/forms/api/">The Forms API</a></p><p><strong>这里特别提醒Django中的缩进不能够空格和tab键混用，否则会报错。</strong>由于不同的编辑器对tab的显示不尽相同，因此你应该坚持使用空格键缩进。</p><blockquote><p>大多数文本编辑器可以自动将tab转换为空格，请合理设置。</p></blockquote><p>写好视图之后，就需要写模板文件了。在<code>templates/article/</code>中创建<code>create.html</code>：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/article/create.html<span class="token comment">&lt;!-- extends表明此页面继承自 base.html 文件 --></span>&#123;% extends "base.html" %&#125; &#123;% load staticfiles %&#125;<span class="token comment">&lt;!-- 写入 base.html 中定义的 title --></span>&#123;% block title %&#125; 写文章 &#123;% endblock title %&#125;<span class="token comment">&lt;!-- 写入 base.html 中定义的 content --></span>&#123;% block content %&#125;<span class="token comment">&lt;!-- 写文章表单 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- 提交文章的表单 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- Django中需要POST数据的地方都必须有csrf_token --></span>                &#123;% csrf_token %&#125;                <span class="token comment">&lt;!-- 文章标题 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token comment">&lt;!-- 标签 --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文章标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                    <span class="token comment">&lt;!-- 文本框 --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- 文章正文 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文章正文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                    <span class="token comment">&lt;!-- 文本区域 --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>body<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>body<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- 提交按钮 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>完成<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>&#123;% endblock content %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>html文件还是一如既往的长。<strong>再重复一次，看不懂html文件语法也没有关系，先照着抄一遍，以后再慢慢理解，不影响目前Django的学习。</strong></p><p>对其中的新内容进行审视：</p><ul><li><p><code>&lt;form&gt;..&lt;/form&gt;</code>标签中的内容就是需要提交的表单。<code>method=&quot;post&quot;</code>指定了表单提交的方式为POST（与视图函数中的<code>request.method</code>相联系）；<code>action=&quot;.&quot;</code>指定了表单提交的地址为默认的当前url。</p></li><li><p>关于<code>&#123;% csrf_token %&#125;</code>，它是Django中一个与网络安全相关的中间件验证。目前我们暂时不去深究它的实现，<strong>只需要知道表单中必须包含它就可以了</strong>，否则将会得到一个403错误。</p></li><li><p><code>&lt;input&gt;</code>和<code>&lt;textarea&gt;</code>标签中的<code>name=&#39;&#39;</code>属性指定了当前文本框提交的数据的名称，它必须与表单类中的字段名称对应，否则服务器无法将字段和数据正确的对应起来。</p></li></ul><p>最后老规矩，在<code>article/urls.py</code>中增加一个写文章的url地址：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>urls<span class="token punctuation">.</span>pyurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment"># 写文章</span>    path<span class="token punctuation">(</span><span class="token string">'article-create/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>article_create<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'article_create'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大功告成了，不要着急，先喝口水，万一有bug又得忙活半天了。<strong>如果报错也不要慌张，开发过程一定是曲折的，耐心看看Django给出的错误提示，线索就在其中。</strong></p><p>保存修改并运行服务器，地址栏中输入：<code>http://127.0.0.1:8000/article/article-create/</code>，看到如下界面：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20180926/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE49.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20180926/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE49.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>很好，似乎正常工作起来了。接着随便输入些<a href="https://www.dusaiphoto.com/article/article-detail/20/">Markdown语法的文章</a>，测试功能是否正常：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20180926/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE52.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20180926/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE52.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>点击<strong>完成</strong>按钮后，页面会回到文章列表：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20180926/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE53.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20180926/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE53.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>刚才提交的文章神奇的出现在列表中了。</p><p>点击<strong>阅读本文</strong>按钮，进入文章详情页面：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20180926/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE54.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20180926/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE54.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>出现了具有<strong>Markdown</strong>语法的优美的文章。</p><p>是不是非常有成就感呢？</p><p>别激动，还有一些收尾工作需要做。</p><h2 id="优化写文章入口"><a href="#优化写文章入口" class="headerlink" title="优化写文章入口"></a>优化写文章入口</h2><p>与之前类似，我们需要在导航栏中设置一个<strong>写文章</strong>的入口，优化使用体验。</p><p>将下列代码加入到<code>templates/header.html</code>中：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-link<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>article:article_create<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>写文章<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>读者是否清楚，上面的代码应该放置在什么位置呢？</p><p>保存后刷新浏览器界面，<strong>导航栏</strong>有了如下变化：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20180926/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE55.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20180926/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE55.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>点击<strong>写文章</strong>按钮，就可以进入写新文章的页面了，从此再也不用手动输入繁琐的url地址了。</p><p>世界是多么的美好。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章学习了使用Django的表单类，完成了提交新文章的基本功能。当然目前暂时还没有真正将文章和登录的用户关联起来；等到学习了用户管理的知识，再回头来处理这部分的内容。</p><p>下一章继续学习如何删除一篇文章。</p><ul><li>有疑问请在<a href="http://www.dusaiphoto.com/">杜赛的个人网站</a>留言，我会尽快回复。</li><li>或Email私信我：<a href="mailto:&#100;&#117;&#115;&#97;&#x69;&#112;&#104;&#x6f;&#x74;&#x6f;&#64;&#x66;&#111;&#120;&#x6d;&#97;&#x69;&#108;&#x2e;&#x63;&#111;&#109;">&#100;&#117;&#115;&#97;&#x69;&#112;&#104;&#x6f;&#x74;&#x6f;&#64;&#x66;&#111;&#120;&#x6d;&#97;&#x69;&#108;&#x2e;&#x63;&#111;&#109;</a></li><li>项目完整代码：<a href="https://github.com/stacklens/django_blog_tutorial">Django_blog_tutorial</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--12.更新文章</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/12.geng-xin-wen-zhang/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/12.geng-xin-wen-zhang/</url>
      
        <content type="html"><![CDATA[<p>目前为止我们已经完成了文章的新建、删除以及查看，还剩最后一项，即对已经完成的文章进行修改。</p><p><strong>实际上修改文章与新建文章有点类似</strong>，不同的地方有两点：</p><ul><li>修改是在原有文章的基础上，因此需要传递 <strong>id</strong> 指明具体需要修改的文章</li><li>加载页面时需要将旧的内容作为默认值填写到表单中，因此需要将文章对象传递到<code>html</code>中</li></ul><p>按照这个思路，接下来先写视图函数。</p><h2 id="视图函数"><a href="#视图函数" class="headerlink" title="视图函数"></a>视图函数</h2><p>在<code>ariticle/views.py</code>中增加修改文章的视图函数<code>article_update()</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 更新文章</span><span class="token keyword">def</span> <span class="token function">article_update</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    更新文章的视图函数    通过POST方法提交表单，更新titile、body字段    GET方法进入初始表单页面    id： 文章的 id    """</span>    <span class="token comment"># 获取需要修改的具体文章对象</span>    article <span class="token operator">=</span> ArticlePost<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token builtin">id</span><span class="token punctuation">)</span>    <span class="token comment"># 判断用户是否为 POST 提交表单数据</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"POST"</span><span class="token punctuation">:</span>        <span class="token comment"># 将提交的数据赋值到表单实例中</span>        article_post_form <span class="token operator">=</span> ArticlePostForm<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>        <span class="token comment"># 判断提交的数据是否满足模型的要求</span>        <span class="token keyword">if</span> article_post_form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># 保存新写入的 title、body 数据并保存</span>            article<span class="token punctuation">.</span>title <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span>            article<span class="token punctuation">.</span>body <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">[</span><span class="token string">'body'</span><span class="token punctuation">]</span>            article<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 完成后返回到修改后的文章中。需传入文章的 id 值</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">"article:article_detail"</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token builtin">id</span><span class="token punctuation">)</span>        <span class="token comment"># 如果数据不合法，返回错误信息</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"表单内容有误，请重新填写。"</span><span class="token punctuation">)</span>    <span class="token comment"># 如果用户 GET 请求获取数据</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment"># 创建表单类实例</span>        article_post_form <span class="token operator">=</span> ArticlePostForm<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 赋值上下文，将 article 文章对象也传递进去，以便提取旧的内容</span>        context <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">'article'</span><span class="token punctuation">:</span> article<span class="token punctuation">,</span> <span class="token string">'article_post_form'</span><span class="token punctuation">:</span> article_post_form <span class="token punctuation">&#125;</span>        <span class="token comment"># 将响应返回到模板中</span>        <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'article/update.html'</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更新的视图与创建文章非常相似，但又有点小区别：</p><ul><li>文章的 id 作为参数传递进来了</li><li>用户POST提交表单时没有创建新的文章，而是在之前的文章中修改</li><li><code>redirect</code>函数没有返回文章列表，而是返回到修改后的文章页面去了，因此需要同时把文章的id也打包传递进去，这是url所规定的</li><li>GET获取页面时将article对象也传递到模板中去，以便后续的调用</li></ul><h2 id="编写模板"><a href="#编写模板" class="headerlink" title="编写模板"></a>编写模板</h2><p>模板文件就与创建文章的更像了，不过我们这里还是重新写一遍。</p><p>新建<code>templates/article/update.html</code>并写入：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/article/update.html&#123;% extends "base.html" %&#125; &#123;% load staticfiles %&#125;&#123;% block title %&#125; 更新文章 &#123;% endblock title %&#125;&#123;% block content %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                &#123;% csrf_token %&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文章标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                    <span class="token comment">&lt;!-- 在 value 属性中指定文本框的初始值为旧的内容，即 article 对象中的 title 字段 --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123; article.title &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文章正文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                    <span class="token comment">&lt;!-- 文本域不需要 value 属性，直接在标签体中嵌入数据即可 --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>body<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>body<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; article.body &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>完成<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>&#123;% endblock content %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在模板中，分别将文章旧的标题和正文作为初始值，传递了进去，其他就与新建文章的模板完全没区别了。</p><p>有读者可能就会问了，既然这两个函数、模板都很相似，<strong>能不能合并成一个函数、模板呢？</strong>当然是可以的，合并相同功能的函数可以让代码更加简洁漂亮，也便于后期的维护。有兴趣的读者可以自己尝试一下。</p><h2 id="URL-和入口"><a href="#URL-和入口" class="headerlink" title="URL 和入口"></a>URL 和入口</h2><p>接下来的套路都懂的，配置路由<code>article/urls.py</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>urls<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment"># 更新文章</span>    path<span class="token punctuation">(</span><span class="token string">'article-update/&lt;int:id>/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>article_update<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'article_update'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在文章详情页面<code>tempaltes/article/detail.html</code>中添加修改文章的入口：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">tempaltes/article/detail.html...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-12 alert alert-success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>作者：&#123;&#123; article.author &#125;&#125;    · <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">confirm_delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>删除文章<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    · <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">article:</span>article_update"</span> <span class="token attr-name">article.id</span> <span class="token attr-name">%&#125;"</span><span class="token punctuation">></span></span>编辑文章<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动服务器，可以看到修改文章的功能就实现了。同样的，如有故障也不要着急，在Debug页面寻找出错的线索，求助网络帮忙解决吧。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>至此我们就实现了一篇文章的增、删、改、查四个基础功能，也算小有成就。</strong></p><p>当然还有很多进阶的功能可以去做，不过我们在这里先休息休息，来罐快乐水庆祝一下。</p><p>下一章开始解决更加燃眉之急的内容：用户管理。</p><ul><li>有疑问请在<a href="http://www.dusaiphoto.com/">杜赛的个人网站</a>留言，我会尽快回复。</li><li>或Email私信我：<a href="mailto:&#x64;&#117;&#x73;&#x61;&#x69;&#112;&#x68;&#111;&#116;&#x6f;&#x40;&#x66;&#111;&#120;&#109;&#x61;&#105;&#108;&#46;&#x63;&#111;&#x6d;">&#x64;&#117;&#x73;&#x61;&#x69;&#112;&#x68;&#111;&#116;&#x6f;&#x40;&#x66;&#111;&#120;&#109;&#x61;&#105;&#108;&#46;&#x63;&#111;&#x6d;</a></li><li>项目完整代码：<a href="https://github.com/stacklens/django_blog_tutorial">Django_blog_tutorial</a></li></ul><blockquote><p>转载请告知作者并注明出处。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--14.用户的注册</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/14.yong-hu-de-zhu-ce/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/14.yong-hu-de-zhu-ce/</url>
      
        <content type="html"><![CDATA[<p>既然有登录登出，那么用户的注册肯定也是少不了的。</p><h2 id="注册表单类"><a href="#注册表单类" class="headerlink" title="注册表单类"></a>注册表单类</h2><p>用户注册时会用到<strong>表单</strong>来提交账号、密码等数据，所以需要写注册用的表单<code>/userprofile/forms.py</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">/</span>userprofile<span class="token operator">/</span>forms<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 注册用户表单</span><span class="token keyword">class</span> <span class="token class-name">UserRegisterForm</span><span class="token punctuation">(</span>forms<span class="token punctuation">.</span>ModelForm<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 复写 User 的密码</span>    password <span class="token operator">=</span> forms<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token punctuation">)</span>    password2 <span class="token operator">=</span> forms<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> User        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token string">'email'</span><span class="token punctuation">)</span>    <span class="token comment"># 对两次输入的密码是否一致进行检查</span>    <span class="token keyword">def</span> <span class="token function">clean_password2</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> self<span class="token punctuation">.</span>cleaned_data        <span class="token keyword">if</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span> <span class="token operator">==</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password2'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> forms<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token string">"密码输入不一致,请重试。"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上一章也讲过，对数据库进行操作的表单应该继承<code>forms.ModelForm</code>，可以自动生成模型中已有的字段。</p><p>这里我们覆写了<code>password</code>字段，因为通常在注册时需要重复输入<code>password</code>来确保用户没有将密码输入错误，所以覆写掉它以便我们自己进行数据的验证工作。<code>def clean_password2()</code>中的内容便是在验证密码是否一致了。<code>def clean_[字段]</code>这种写法Django会自动调用，来对单个字段的数据进行验证清洗。</p><p>覆写某字段之后，内部类<code>class Meta</code>中的定义对这个字段就没有效果了，所以<code>fields</code>不用包含<code>password</code>。</p><p><strong>需要注意：</strong></p><ul><li>验证密码一致性方法不能写<code>def clean_password()</code>，因为如果你不定义<code>def clean_password2()</code>方法，会导致password2中的数据被Django判定为无效数据从而清洗掉，从而<code>password2</code>属性不存在。最终导致两次密码输入始终会不一致，并且很难判断出错误原因。</li><li>从POST中取值用的<code>data.get(&#39;password&#39;)</code>是一种稳妥的写法，即使用户没有输入密码也不会导致程序错误而跳出。前面章节提取POST数据我们用了<code>data[&#39;password&#39;]</code>，这种取值方式如果data中不包含<code>password</code>，Django会报错。另一种防止用户不输入密码就提交的方式是在表单中插入<code>required</code>属性，后面会讲到。</li></ul><h2 id="视图函数"><a href="#视图函数" class="headerlink" title="视图函数"></a>视图函数</h2><p>编写注册的视图<code>/userprofile/views.py</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">/</span>userprofile<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token comment"># 引入 UserRegisterForm 表单类</span><span class="token keyword">from</span> <span class="token punctuation">.</span>forms <span class="token keyword">import</span> UserLoginForm<span class="token punctuation">,</span> UserRegisterForm<span class="token comment"># 用户注册</span><span class="token keyword">def</span> <span class="token function">user_register</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        user_register_form <span class="token operator">=</span> UserRegisterForm<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>        <span class="token keyword">if</span> user_register_form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            new_user <span class="token operator">=</span> user_register_form<span class="token punctuation">.</span>save<span class="token punctuation">(</span>commit<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>            <span class="token comment"># 设置密码</span>            new_user<span class="token punctuation">.</span>set_password<span class="token punctuation">(</span>user_register_form<span class="token punctuation">.</span>cleaned_data<span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            new_user<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 保存好数据后立即登录并返回博客列表页面</span>            login<span class="token punctuation">(</span>request<span class="token punctuation">,</span> new_user<span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">"article:article_list"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"注册表单输入有误。请重新输入~"</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">:</span>        user_register_form <span class="token operator">=</span> UserRegisterForm<span class="token punctuation">(</span><span class="token punctuation">)</span>        context <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">'form'</span><span class="token punctuation">:</span> user_register_form <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'userprofile/register.html'</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"请使用GET或POST请求数据"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>逻辑上结合了<strong>发表文章视图</strong>和<strong>用户登录视图</strong>，没有新的知识。</p><p>用户在注册成功后会自动登录并返回博客列表页面。</p><h2 id="模板和url"><a href="#模板和url" class="headerlink" title="模板和url"></a>模板和url</h2><p>表单有关的模板文件我们也很熟悉了，新建<code>/templates/userprofile/register.html</code>：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">/templates/userprofile/register.html&#123;% extends "base.html" %&#125; &#123;% load staticfiles %&#125;&#123;% block title %&#125; 登录 &#123;% endblock title %&#125;&#123;% block content %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                &#123;% csrf_token %&#125;                <span class="token comment">&lt;!-- 账号 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>昵称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- 邮箱 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Email<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- 密码 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>设置密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- 确认密码 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>确认密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password2<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password2<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- 提交按钮 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>&#123;% endblock content %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的模板文件中，我们在昵称、密码<code>input</code> 标签中添加了<code>required</code>属性（前面提到过）。如果用户不填写带有<code>required</code>属性的字段，表单就不能提交，并提示用户填写。实际上前面学习的很多表单都可以添加<code>required</code>属性来提前验证数据的有效性。</p><p>注册的入口你可以放在任何喜欢的地方。本文放在登录页面中<code>/templates/userprofile/login.html</code>：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">/templates/userprofile/login.html...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">></span></span>还没有账号？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">></span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>&#123;% url <span class="token punctuation">"</span>userprofile:register<span class="token punctuation">"</span> %&#125;<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>注册账号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>加入我们吧！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后就是在app中配置路由文件<code>/userprofile/urls.py</code>了：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">/</span>userprofile<span class="token operator">/</span>urls<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment"># 用户注册</span>    path<span class="token punctuation">(</span><span class="token string">'register/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>user_register<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'register'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>运行服务器，进入到登录页面，多了注册的提示：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20181030/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE71.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20181030/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE71.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>点击<strong>注册账号</strong>进入注册页面：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20181030/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE72.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20181030/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE72.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>填写好表单后提交（Email地址是可以为空的）：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20181030/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE73.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20181030/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE73.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>成功登录并返回了博客列表，功能完成。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章用到了表单类、对数据进行验证清洗等知识，完成了用户的注册功能。</p><p>接下来学习如何实现删除已有的用户。</p><ul><li>有疑问请在<a href="http://www.dusaiphoto.com/">杜赛的个人网站</a>留言，我会尽快回复。</li><li>或Email私信我：<a href="mailto:&#100;&#117;&#115;&#x61;&#x69;&#112;&#104;&#111;&#x74;&#111;&#x40;&#102;&#x6f;&#120;&#x6d;&#x61;&#105;&#108;&#46;&#99;&#111;&#109;">&#100;&#117;&#115;&#x61;&#x69;&#112;&#104;&#111;&#x74;&#111;&#x40;&#102;&#x6f;&#120;&#x6d;&#x61;&#105;&#108;&#46;&#99;&#111;&#109;</a></li><li>项目完整代码：<a href="https://github.com/stacklens/django_blog_tutorial">Django_blog_tutorial</a></li></ul><blockquote><p>转载请告知作者并注明出处。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--15.用户的删除</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/15.yong-hu-de-shan-chu/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/15.yong-hu-de-shan-chu/</url>
      
        <content type="html"><![CDATA[<p>这一章将实现删除用户数据的功能。实际上删除用户和前面的删除文章是完全类似的，有了之前的铺垫，这一章会非常的轻松。</p><h2 id="权限与视图"><a href="#权限与视图" class="headerlink" title="权限与视图"></a>权限与视图</h2><p>用户数据是很多网站最重要的财产，<strong>确保用户数据的安全是非常重要的</strong>。</p><p>前面学习的用户登录、退出、创建都是相对安全的操作；而删除数据就很危险，弄不好会造成不可逆的损失。因此我们希望对操作者做一些限制，比如只能用户登录且必须是本用户才能进行删除的操作。这就是<strong>权限</strong>。</p><p>因此在视图中进行简单的用户权限的验证工作。编写<code>/userprofile/views.py</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">/</span>userprofile<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token comment"># 引入验证登录的装饰器</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> login_required<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token decorator annotation punctuation">@login_required</span><span class="token punctuation">(</span>login_url<span class="token operator">=</span><span class="token string">'/userprofile/login/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">user_delete</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        user <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token builtin">id</span><span class="token punctuation">)</span>        <span class="token comment"># 验证登录用户、待删除用户是否相同</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>user <span class="token operator">==</span> user<span class="token punctuation">:</span>            <span class="token comment">#退出登录，删除数据并返回博客列表</span>            logout<span class="token punctuation">(</span>request<span class="token punctuation">)</span>            user<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">"article:article_list"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"你没有删除操作的权限。"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"仅接受post请求。"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析上面的代码：</p><ul><li><p><code>@login_required</code>是一个<strong>Python装饰器</strong>。装饰器可以在不改变某个函数内容的前提下，给这个函数添加一些功能。具体来说就是<code>@login_required</code>要求调用<code>user_delete()</code>函数时，用户必须登录；如果未登录则不执行函数，将页面重定向到<code>/userprofile/login/</code>地址去。</p></li><li><p>装饰器确认用户已经登录后，允许调用<code>user_delete()</code>；然后需要删除的用户<strong>id</strong>通过请求传递到视图中，由<code>if</code>语句确认是否与登录的用户一致，成功后则退出登录并删除用户数据，返回博客列表页面。</p></li></ul><blockquote><p>装饰器的详细解释可以看这里：<a href="https://www.zhihu.com/question/26930016">如何理解Python装饰器？</a></p><p><code>@login_required</code>的详细解释看这里：<a href="https://docs.djangoproject.com/en/2.1/topics/auth/default/#django.contrib.auth.decorators.login_required">login_required</a></p></blockquote><h2 id="模板与url"><a href="#模板与url" class="headerlink" title="模板与url"></a>模板与url</h2><p>然后改写<code>/templates/header.html</code>，新增了<strong>删除用户</strong>的入口，并且在末尾添加<strong>弹窗组件</strong>的代码:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">/templates/header.html...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dropdown-menu<span class="token punctuation">"</span></span> <span class="token attr-name">aria-labelledby</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbarDropdown<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 新增 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dropdown-item<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">user_delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>删除用户<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dropdown-item<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>&#123;% url <span class="token punctuation">"</span>userprofile:logout<span class="token punctuation">"</span> %&#125;<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>退出登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>...<span class="token comment">&lt;!-- 新增 --></span>&#123;% if user.is_authenticated %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span>     <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span>     <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_delete<span class="token punctuation">"</span></span>    <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>userprofile:delete<span class="token punctuation">'</span> user.id %&#125;<span class="token punctuation">"</span></span>     <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;% csrf_token %&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>发送<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">function</span> <span class="token function">user_delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 调用layer弹窗组件</span>            layer<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                title<span class="token operator">:</span> <span class="token string">"确认删除"</span><span class="token punctuation">,</span>                content<span class="token operator">:</span> <span class="token string">"确认删除用户资料吗？"</span><span class="token punctuation">,</span>                <span class="token function-variable function">yes</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> layero</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'form#user_delete button'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    layer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>&#123;% endif %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>因为删除用户要求用户必须登录，因此就把它的入口放在登陆后才显示的下拉框中，这样页面可以更加简洁。当然这种方式并不是最佳的选择，通常的做法是把删除功能放在独立的用户资料页面中。</p></li><li><p>与删除文章类似，点击<strong>删除用户</strong>链接后调用了<code>user_delete()</code>函数，函数包含了<strong>弹窗组件</strong>确认用户没有误操作；点击弹窗中的确认按钮后，提交删除的隐藏表单，执行视图。</p></li><li><p>注意到<code>user_delete()</code>函数和表单是用<code>if</code>模板语句包裹起来的。因为用户未登录时页面对象中是没有<code>user.id</code>属性的，但是函数中却又包含了<code>user.id</code>，Django在解析模板时就会报错。<code>if</code>语句确保了<strong>只有在用户登录时才对这段JavaScript代码进行解析</strong>，回避了这个问题。</p></li><li><p>我们在<code>base.html</code>已经引用了<strong>弹窗组件模块</strong>，而<code>header.html</code>是拼接在<code>base.html</code>中的，因此就不用再重复引用弹窗组件了。</p></li></ul><p>最后就是写好<code>/userprofile/urls.py</code>的路由映射了：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">/</span>userprofile<span class="token operator">/</span>urls<span class="token punctuation">.</span>pyurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment"># 用户删除</span>    path<span class="token punctuation">(</span><span class="token string">'delete/&lt;int:id>/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>user_delete<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'delete'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行服务器看看效果。登录用户并在右上角下拉框中点击<strong>删除用户</strong>：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20181031/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE74.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20181031/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE74.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>点击确定后就可以成功删除用户数据了。</p><h2 id="检查数据库"><a href="#检查数据库" class="headerlink" title="检查数据库"></a>检查数据库</h2><p>前面我们已经讲过如何用<a href="https://sqlitestudio.pl/index.rvt">SQLiteStudio</a>查看数据库存储的内容，确保数据真正的从数据库中擦除了。</p><p>用<strong>SQLiteStudio</strong>打开项目中<code>db.sqlite3</code>文件，找到<code>auth_user</code>字段，显示如下：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20181031/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE75.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20181031/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE75.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>可以看到<code>dusai123</code>这个用户确实已经没有了。</p><p>在验证操作数据的逻辑时，<strong>SQLiteStudio</strong>可以帮助我们直观的发现问题，一定要善加利用。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章学习了删除用户功能，并给它赋予了简单的权限。</p><p>下一章将学习通过邮箱重置用户密码。</p><ul><li>有疑问请在<a href="http://www.dusaiphoto.com/">杜赛的个人网站</a>留言，我会尽快回复。</li><li>或Email私信我：<a href="mailto:&#100;&#x75;&#115;&#x61;&#105;&#x70;&#x68;&#111;&#x74;&#111;&#x40;&#102;&#111;&#x78;&#x6d;&#x61;&#x69;&#108;&#x2e;&#99;&#111;&#109;">&#100;&#x75;&#115;&#x61;&#105;&#x70;&#x68;&#111;&#x74;&#111;&#x40;&#102;&#111;&#x78;&#x6d;&#x61;&#x69;&#108;&#x2e;&#99;&#111;&#109;</a></li><li>项目完整代码：<a href="https://github.com/stacklens/django_blog_tutorial">Django_blog_tutorial</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--16.重置用户密码</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/16.chong-zhi-yong-hu-mi-ma/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/16.chong-zhi-yong-hu-mi-ma/</url>
      
        <content type="html"><![CDATA[<p>随着技术的发展，验证用户身份的手段越来越多，指纹、面容、声纹应有尽有，但密码依然是最重要的手段。</p><p>互联网处处都有密码的身影，甚至变成了现代人的一种负担。像笔者这样的，动辄几十个账号密码，忘记其中几个简直太正常了。</p><p>本章讲如何帮助健忘症患者，重置用户密码。</p><h2 id="安装第三方库"><a href="#安装第三方库" class="headerlink" title="安装第三方库"></a>安装第三方库</h2><p>前面我们已经知道如何修改文章标题、正文等内容，但是密码作为验证身份的重要口令，必须以更加稳妥的方式修改。一种比较常用的方式是<strong>发送一封修改密码的邮件到用户事先绑定的邮箱里</strong>。</p><p>业务流程分析如下：</p><ul><li>向用户邮箱发送包含重置密码地址的邮件。邮件的地址需要动态生成，防止不怀好意的用户从中捣乱；</li><li>向网站用户展示一条发送邮件成功的信息；</li><li>用户点击邮箱中的地址后，转入重置密码的页面；</li><li>向用户展示一条重置成功的信息。</li></ul><p>上面4个步骤包含了4个视图和模板，自己写代码看来有些繁琐。</p><p>可能你会想，Django这种以开发效率著称的框架，<strong>重置密码这种常用功能是不是内置了呢</strong>？答案是肯定的。事实上内置模块的流程和上面的是完全相同的，你只需要将上面4个步骤的<code>url</code>配置好就可以使用了。当然内置的模板很简陋，你可以覆写模板变成自己网站的风格。</p><blockquote><p>实际上Django不仅内置了密码重置，还包括登录、登出、密码修改等功能。建议读者到一定水平后多阅读Django的源码，学习其中的编程技巧。另外这部分内容Django是用<strong>类视图</strong>写的，现在阅读可能有一定困难。</p><p>源码位置：/env/Lib/site-packages/django/contrib/auth/views.py</p><p>官方文档：<a href="https://docs.djangoproject.com/zh-hans/2.1/topics/auth/default/">Django 的验证系统</a></p></blockquote><p>使用内置的模块似乎要简单多了，那还能不能更简单呢？确实是可以的。</p><p>Django作为优秀的Web框架，有很多优秀的<strong>第三方库</strong>（即APP）被世界各地的程序员们打包发布在网上，免费供你使用。成功从来都是站在巨人的肩膀上的，既然已经有了“轮子”，何必要自己再造一个呢。</p><p>我们这里就可以用到一个叫<code>Django-password-reset</code>的第三方库。</p><p>打开虚拟环境，输入指令<code>pip install -U django-password-reset</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>env<span class="token punctuation">)</span> E:<span class="token punctuation">\</span>django_project<span class="token punctuation">\</span>my_blog<span class="token operator">></span>pip <span class="token function">install</span> -U django-password-resetCollecting django-password-reset<span class="token punctuation">..</span>.Installing collected packages: django-password-resetSuccessfully installed django-password-reset-2.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到以上信息说明安装成功了。</p><h2 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h2><p>既然第三方库也是app，那肯定需要在<code>/my_blog/settings.py</code>中注册了：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">/</span>my_blog<span class="token operator">/</span>settings<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token string">'password_reset'</span><span class="token punctuation">,</span>    <span class="token comment"># 新增</span>    <span class="token string">'article'</span><span class="token punctuation">,</span>    <span class="token string">'userprofile'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在根路由<code>/my_blog/urls.py</code>中添加app的地址：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">/</span>my_blog<span class="token operator">/</span>urls<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    path<span class="token punctuation">(</span><span class="token string">'password-reset/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'password_reset.urls'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改<code>/templates/userprofile/login.html</code>，提供一个重置密码的入口：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">/templates/userprofile/login.html...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 新增 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">></span></span>忘记密码了？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">></span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>&#123;% url <span class="token punctuation">"</span>password_reset_recover<span class="token punctuation">"</span> %&#125;<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>这里<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>重置密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>邮件不能凭空产生</strong>，目前为止我们并没有配置发件邮箱的账号密码，也没有配置发送邮件的端口、发件人等信息。</p><p>因此还需要在<code>/my_blog/settings.py</code>末尾添加发送邮箱的相关配置：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">/</span>my_blog<span class="token operator">/</span>settings<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># SMTP服务器，改为你的邮箱的smtp!</span>EMAIL_HOST <span class="token operator">=</span> <span class="token string">'smtp.qq.com'</span><span class="token comment"># 改为你自己的邮箱名！</span>EMAIL_HOST_USER <span class="token operator">=</span> <span class="token string">'your_email_account@xxx.com'</span><span class="token comment"># 你的邮箱密码</span>EMAIL_HOST_PASSWORD <span class="token operator">=</span> <span class="token string">'your_password'</span><span class="token comment"># 发送邮件的端口</span>EMAIL_PORT <span class="token operator">=</span> <span class="token number">25</span><span class="token comment"># 是否使用 TLS</span>EMAIL_USE_TLS <span class="token operator">=</span> <span class="token boolean">True</span><span class="token comment"># 默认的发件人</span>DEFAULT_FROM_EMAIL <span class="token operator">=</span> <span class="token string">'xxx的博客 &lt;your_email_account@xxx.com>'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>有读者反应，这里如果用QQ邮箱有如下问题：1. 邮箱密码不是登录密码，而是 smtp 的专门的认证码；2. 发送端口 25 可能不通，请尝试 465 或 587 端口。若还是不行，建议更换其他品牌的邮箱测试。</p><p><strong>简单邮件传输协议 (Simple Mail Transfer Protocol, SMTP)</strong> 是在Internet传输Email的协议标准。</p><p>SMTP是基于文本的协议。在其之上指定了一条消息的一个或多个接收者，然后消息文本会被传输。SMTP使用TCP端口25。</p><p>SMTP是一个“推”的协议（发送邮件），它不允许从远程服务器上“拉”来消息（接收邮件）。要接收邮件，客户端必须使用<strong>POP3</strong>或<strong>IMAP</strong>。</p></blockquote><p>设置好后就可以开启服务器测试了。</p><p>点击登录页面：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20181102/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE76.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20181102/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE76.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>点击最后一行的链接“这里”：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20181102/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE77.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20181102/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE77.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>按照要求输入用户名或者Email，点击确认按钮：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20181102/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE78a.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20181102/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE78a.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>提示已经把重置密码的链接发到邮箱中了。</p><p>前往Email中查看新邮件：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20181102/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE79.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20181102/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE79.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>居然神奇的收到了邮件！继续点击邮件中的链接：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20181102/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE81.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20181102/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE81.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>按照提示输入新密码后：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20181102/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE80.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20181102/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE80.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>密码重置就成功了。</p><p>尝试一下新密码登录是没问题的，顺利完成了任务。</p><p>篇幅关系就没有去挨个覆写原有的模板文件了。如果有兴趣可以仔细阅读官方文档，尝试去改写模板文件，让页面更加匹配自己网站的风格。</p><p><strong>官方文档在这里：</strong><a href="https://django-password-reset.readthedocs.io/en/latest/index.html">docs</a></p><p><strong>GitHub：</strong><a href="https://github.com/brutasse/django-password-reset">django-password-reset</a></p><p>相信读者也尝到使用三方库的甜头了：<strong>只需要写很少的代码，就可以完成大量的功能。</strong>笔者是推荐在开发中多使用优秀的三方库的，可以极大的提高效率，减少重复劳动。当然使用三方库也有一些缺点，比如会因为一知半解而维护困难、不能量身定制等。在实践中到底用还是不用，就根据实际情况再做权衡了。</p><p>后面陆续还会介绍更多的三方库，还是贯彻那句话：成功是站在巨人肩膀上的。</p><h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><p>发送邮件因为涉及到了发送邮箱的相关设置和权限，所以容易出各种各样奇怪的问题。</p><p>好比说你的发送邮箱设置是<a href="mailto:&#120;&#x78;&#x78;&#x40;&#x73;&#x69;&#x6e;&#97;&#46;&#x63;&#111;&#x6d;">&#120;&#x78;&#x78;&#x40;&#x73;&#x69;&#x6e;&#97;&#46;&#x63;&#111;&#x6d;</a>。项目代码都是对的，但是新浪禁止了smtp服务，那邮件也会发送不成功。如果报错请尝试以下方法：</p><ul><li>设置发送邮箱为允许smtp服务</li><li>检查账号、密码是否正确</li><li>有的发送端口需要额外的设置，尝试更换端口</li><li>更换其他服务商的邮箱</li></ul><p>如果还不行，就请根据报错页面，搜索一下类似问题的解决方案了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章学习了使用第三方库<code>django-password-reset</code>，高效完成了重置密码的功能。</p><p>下一章学习扩展并更新用户资料。</p><ul><li>有疑问请在<a href="http://www.dusaiphoto.com/">杜赛的个人网站</a>留言，我会尽快回复。</li><li>或Email私信我：<a href="mailto:&#x64;&#x75;&#115;&#x61;&#x69;&#112;&#104;&#x6f;&#x74;&#x6f;&#x40;&#102;&#111;&#x78;&#109;&#x61;&#x69;&#108;&#46;&#x63;&#x6f;&#x6d;">&#x64;&#x75;&#115;&#x61;&#x69;&#112;&#104;&#x6f;&#x74;&#x6f;&#x40;&#102;&#111;&#x78;&#109;&#x61;&#x69;&#108;&#46;&#x63;&#x6f;&#x6d;</a></li><li>项目完整代码：<a href="https://github.com/stacklens/django_blog_tutorial">Django_blog_tutorial</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--18.上传头像</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/18.shang-chuan-tou-xiang/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/18.shang-chuan-tou-xiang/</url>
      
        <content type="html"><![CDATA[<p>到目前为止我们的博客处理的都是文字。现代互联网早就进入了“读图”时代，图片的维护、展示也就相当重要。</p><p>上一章中预留了avatar字段，用来保存用户上传的头像，现在我们来实现这个功能。</p><h2 id="必要的设置"><a href="#必要的设置" class="headerlink" title="必要的设置"></a>必要的设置</h2><p>图片属于一种媒体文件，它与静态文件类似，<strong>需要设置一个统一的目录</strong>，便于集中存储和访问。</p><p>这类需要框架统一设置的参数，当然应该在<code>/my_blog/settings.py</code>中。在底部加上：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">/</span>my_blog<span class="token operator">/</span>settings<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 媒体文件地址</span>MEDIA_URL <span class="token operator">=</span> <span class="token string">'/media/'</span>MEDIA_ROOT <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'media/'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>MEDIA_ROOT</strong>和<strong>MEDIA_URL</strong>是用户上传文件保存、访问的位置：</p><ul><li><p>在前面的<code>Profile</code>中我们设置了<strong>upload_to</strong>参数。有了这个参数，文件上传后将自动保存到项目根目录的<code>media</code>文件夹中。 <code>os.path.join(MEDIA_ROOT, &#39;media/&#39;)</code>指定了media文件夹的位置。</p></li><li><p>MEDIA_URL代表用户通过URL来访问这个本地地址的URL。设置好这个参数后，用户就可以通过解析url，很方便的获取文件的地址。这样做的好处是避免的硬编码，让代码更容易维护。</p></li></ul><p>Django框架擅长的是对逻辑的处理，而对图片这类文件的处理则非常的耗时。因此在实际的<strong>生产环境</strong>中（即产品上线之后），通常是有专门的Web服务器来处理文件的访问。</p><p>而在开发阶段我们不会在意效率问题，所以Django也提供了方法，让开发服务器能够处理图片。</p><p>在<code>/my_blog/urls.py</code>添加下面的语句：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">/</span>my_blog<span class="token operator">/</span>urls<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 新引入的模块</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf <span class="token keyword">import</span> settings<span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls<span class="token punctuation">.</span>static <span class="token keyword">import</span> staticurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token comment">#添加这行</span>urlpatterns <span class="token operator">+=</span> static<span class="token punctuation">(</span>settings<span class="token punctuation">.</span>MEDIA_URL<span class="token punctuation">,</span> document_root<span class="token operator">=</span>settings<span class="token punctuation">.</span>MEDIA_ROOT<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就为以后上传的图片配置好了URL路径。</p><h2 id="编写MTV"><a href="#编写MTV" class="headerlink" title="编写MTV"></a>编写MTV</h2><p>回顾一下，<code>avatar</code>的字段已经在上一章写好了：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">/</span>userprofile<span class="token operator">/</span>models<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">Profile</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    avatar <span class="token operator">=</span> models<span class="token punctuation">.</span>ImageField<span class="token punctuation">(</span>upload_to<span class="token operator">=</span><span class="token string">'avatar/%Y%m%d/'</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>upload_to</code>指定了图片上传的位置，即<code>/media/avatar/%Y%m%d/</code>。<code>%Y%m%d</code>是日期格式化的写法，会最终格式化为系统时间。比如说图片上传是2018年12月5日，则图片会保存在<code>/media/avatar/2018205/</code>中。</p><blockquote><p>注意<code>ImageField</code>字段不会存储图片本身，而仅仅保存图片的地址。</p><p>记得用pip指令安装Pillow。</p></blockquote><p>表单类在前面也写好了，不用修改：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">/</span>userprofile<span class="token operator">/</span>forms<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">ProfileForm</span><span class="token punctuation">(</span>forms<span class="token punctuation">.</span>ModelForm<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Profile        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'phone'</span><span class="token punctuation">,</span> <span class="token string">'avatar'</span><span class="token punctuation">,</span> <span class="token string">'bio'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着需要修改视图，使之能够对图片进行处理：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">/</span>userprofile<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token decorator annotation punctuation">@login_required</span><span class="token punctuation">(</span>login_url<span class="token operator">=</span><span class="token string">'/userprofile/login/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">profile_edit</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment"># 修改本行</span>    <span class="token comment"># 上传的文件保存在 request.FILES 中，通过参数传递给表单类</span>    profile_form <span class="token operator">=</span> ProfileForm<span class="token punctuation">(</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">,</span> request<span class="token punctuation">.</span>FILES<span class="token punctuation">)</span>    <span class="token keyword">if</span> profile_form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token comment"># 添加在 profile.bio = profile_cd['bio'] 后面</span>        <span class="token comment"># 如果 request.FILES 存在文件，则保存</span>        <span class="token keyword">if</span> <span class="token string">'avatar'</span> <span class="token keyword">in</span> request<span class="token punctuation">.</span>FILES<span class="token punctuation">:</span>            profile<span class="token punctuation">.</span>avatar <span class="token operator">=</span> profile_cd<span class="token punctuation">[</span><span class="token string">"avatar"</span><span class="token punctuation">]</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>表单上传的文件对象存储在类字典对象<code>request.FILES</code>中，因此需要修改表单类的参数，将它一并传递进去。</li><li>如果<code>request.FILES</code>中存在键为<code>avatar</code>的元素，则将其赋值给<code>profile.avatar</code>（注意保存的是图片地址）；否则不进行处理。</li></ul><p>修改模板文件，添加代码显示、处理用户的头像：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">/templates/userprofile/edit.html...&#123;% if profile.avatar %&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>头像<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123; profile.avatar.url &#125;&#125;<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">max-width</span><span class="token punctuation">:</span> 20%<span class="token punctuation">;</span> <span class="token property">border-radius</span><span class="token punctuation">:</span> 15%<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;% else %&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>暂无头像<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span>&#123;% endif %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">...</span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;% csrf_token %&#125;    <span class="token comment">&lt;!-- avatar --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上传头像<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control-file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>模板语法<code>&#123;% if ... %&#125;</code>判断用户是否上传头像。</li><li><code>&lt;img&gt;</code>标签用于显示图片内容；在<code>style</code>属性中规定了图片的最大宽度并带有一点的圆角。</li><li><strong>注意</strong>，表单必须设置<code>enctype=&quot;multipart/form-data&quot;</code>属性，才能够正确上传图片等文件。</li><li>添加<code>&lt;input type=&quot;file&quot; ...&gt;</code>标签用于上传图片。</li></ul><p>启动服务器，刷新用户信息页面：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20181206/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE89.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20181206/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE89.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>点击<strong>选择图片</strong>，上传一张图片后点击<strong>提交</strong>：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20181206/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE90.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20181206/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE90.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>查看一下项目目录，生成了新的文件夹<code>media/avatar/20181205/</code>，其中存储了该头像文件；在<strong>SQLiteStudio</strong>中查看<code>avatar</code>字段，其保存的是文件的url地址。</p><blockquote><p>除了上传，图片的处理还包括验证格式、改变尺寸、更名、裁剪、美化等多种多样的需求。</p><p>如果上传的图片重名，会导致报错吗？请试试看。</p><p>更改图片仅仅会改变字段中存储的url，并不会真正删除图片本身。因此在处理大容量文件时要小心，需要额外的方法进行清理。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章学习了通过表单上传文件的基础知识。更加高级的文件处理手段还需在探索中不断发掘。你还可以利用BootStrap知识，美化个人信息外观，使它像一个完善的产品级页面。</p><ul><li>有疑问请在<a href="http://www.dusaiphoto.com/">杜赛的个人网站</a>留言，我会尽快回复。</li><li>或Email私信我：<a href="mailto:&#x64;&#x75;&#x73;&#x61;&#105;&#x70;&#104;&#x6f;&#x74;&#111;&#x40;&#x66;&#x6f;&#120;&#x6d;&#x61;&#105;&#108;&#46;&#x63;&#111;&#x6d;">&#x64;&#x75;&#x73;&#x61;&#105;&#x70;&#104;&#x6f;&#x74;&#111;&#x40;&#x66;&#x6f;&#120;&#x6d;&#x61;&#105;&#108;&#46;&#x63;&#111;&#x6d;</a></li><li>项目完整代码：<a href="https://github.com/stacklens/django_blog_tutorial">Django_blog_tutorial</a></li></ul><blockquote><p>转载请告知作者并注明出处。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--19.文章分页</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/19.wen-zhang-fen-ye/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/19.wen-zhang-fen-ye/</url>
      
        <content type="html"><![CDATA[<p>随着时间的推移（<strong>加上勤奋的写作！</strong>），你的博客文章一定会越来越多。如果不进行处理，可能同一个页面会挤上成百上千的文章，不美观不说，还降低了页面的反应速度。</p><p>这个时候就需要对文章进行分页的处理。</p><h2 id="利用轮子"><a href="#利用轮子" class="headerlink" title="利用轮子"></a>利用轮子</h2><p>写一个完善的分页功能是有些难度的，好在Django已经帮你准备好一个现成的分页模块了（Django把大部分基础功能都替你准备好了！）。内置模块虽然简单，但是对博客来说完全足够了。</p><p>我们要用到的是<code>Paginator</code>类。在<code>Shell</code>中可以充分尝试它的用法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>paginator <span class="token keyword">import</span> Paginator<span class="token operator">>></span><span class="token operator">></span> objects <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'john'</span><span class="token punctuation">,</span> <span class="token string">'paul'</span><span class="token punctuation">,</span> <span class="token string">'george'</span><span class="token punctuation">,</span> <span class="token string">'ringo'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> p <span class="token operator">=</span> Paginator<span class="token punctuation">(</span>objects<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> p<span class="token punctuation">.</span>count<span class="token number">4</span><span class="token operator">>></span><span class="token operator">></span> p<span class="token punctuation">.</span>num_pages<span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> p<span class="token punctuation">.</span>page_range<span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> page1 <span class="token operator">=</span> p<span class="token punctuation">.</span>page<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> page1<span class="token operator">&lt;</span>Page <span class="token number">1</span> of <span class="token number">2</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> page1<span class="token punctuation">.</span>object_list<span class="token punctuation">[</span><span class="token string">'john'</span><span class="token punctuation">,</span> <span class="token string">'paul'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> page2 <span class="token operator">=</span> p<span class="token punctuation">.</span>page<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> page2<span class="token punctuation">.</span>object_list<span class="token punctuation">[</span><span class="token string">'george'</span><span class="token punctuation">,</span> <span class="token string">'ringo'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> page2<span class="token punctuation">.</span>has_next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> page2<span class="token punctuation">.</span>has_previous<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> page2<span class="token punctuation">.</span>has_other_pages<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> page2<span class="token punctuation">.</span>previous_page_number<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这是一个官网的例子。详见：<a href="https://docs.djangoproject.com/zh-hans/2.1/topics/pagination/">Pagination</a></p></blockquote><p>有了这个类，剩下的工作就是把它应用到项目中去。</p><h2 id="轻车熟路"><a href="#轻车熟路" class="headerlink" title="轻车熟路"></a>轻车熟路</h2><p>要对文章列表分页，因此就要修改<code>article/views.py</code>的<code>def article_list()</code>视图：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 引入分页模块</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>paginator <span class="token keyword">import</span> Paginator<span class="token keyword">def</span> <span class="token function">article_list</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 修改变量名称（articles -> article_list）</span>    article_list <span class="token operator">=</span> ArticlePost<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 每页显示 1 篇文章</span>    paginator <span class="token operator">=</span> Paginator<span class="token punctuation">(</span>article_list<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment"># 获取 url 中的页码</span>    page <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'page'</span><span class="token punctuation">)</span>    <span class="token comment"># 将导航对象相应的页码内容返回给 articles</span>    articles <span class="token operator">=</span> paginator<span class="token punctuation">.</span>get_page<span class="token punctuation">(</span>page<span class="token punctuation">)</span>    context <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">'articles'</span><span class="token punctuation">:</span> articles <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'article/list.html'</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在视图中通过<code>Paginator</code>类，给传递给模板的内容做了手脚：<strong>返回的不再是所有文章的集合，而是对应页码的部分文章的对象，并且这个对象还包含了分页的方法。</strong></p><p>我们在前面的文章已经接触过一些将参数传递到视图的手段了：</p><ul><li>通过POST请求将表单数据传递到视图</li><li>通过url将地址中的参数传递到视图</li></ul><p>这里用到了另一种方法：在GET请求中，在url的末尾附上<code>?key=value</code>的键值对，视图中就可以通过<code>request.GET.get(&#39;key&#39;)</code>来查询<code>value</code>的值。</p><p>然后改写模板，在最末尾的<code>&lt;/div&gt;</code>前面，加入分页的内容：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/article/list.html...<span class="token comment">&lt;!-- 页码导航 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pagination row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>m-auto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>step-links<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- 如果不是第一页，则显示上翻按钮 --></span>            &#123;% if articles.has_previous %&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>?page=1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token entity named-entity" title="&laquo;">&amp;laquo;</span> 1                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>?page=&#123;&#123; articles.previous_page_number &#125;&#125;<span class="token punctuation">"</span></span>                    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-secondary<span class="token punctuation">"</span></span>                <span class="token punctuation">></span></span>                    &#123;&#123; articles.previous_page_number &#125;&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            &#123;% endif %&#125;            <span class="token comment">&lt;!-- 当前页面 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>current btn btn-danger btn-lg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                &#123;&#123; articles.number &#125;&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- 如果不是最末页，则显示下翻按钮 --></span>            &#123;% if articles.has_next %&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>?page=&#123;&#123; articles.next_page_number &#125;&#125;<span class="token punctuation">"</span></span>                   <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-secondary<span class="token punctuation">"</span></span>                <span class="token punctuation">></span></span>                    &#123;&#123; articles.next_page_number &#125;&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>?page=&#123;&#123; articles.paginator.num_pages &#125;&#125;<span class="token punctuation">"</span></span>                   <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-success<span class="token punctuation">"</span></span>                <span class="token punctuation">></span></span>                    &#123;&#123; articles.paginator.num_pages &#125;&#125; <span class="token entity named-entity" title="&raquo;">&amp;raquo;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            &#123;% endif %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内容也比较简单，用到了前面的<code>Shell</code>中演示的部分方法，判断当前页所处的位置。</p><p>这样就行了！补充几篇文章（笔者共6篇），方便测试。刷新页面后是这样的：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20181220/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE115.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20181220/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE115.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>视图中设置了每页只有1篇文章，所以就真的只有1篇了。</p><p>当然这只是为了测试，实际环境中肯定要远大于1篇的。</p><p>点击第2页的按钮后是这样的：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20181220/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE113.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20181220/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE113.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p><strong>看到顶部地址栏中的变化了吗？</strong></p><p>思考一下<code>page</code>是如何从模板传递到视图的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>除模板外，我们只写了4行代码，就有了还不错的分页导航，Django就是这么贴心。</p><p>除了对文章列表，你可以对任何你想分页的地方运用此模块（比如以后要讲到的评论），满足用户各类的需求。</p><p>读者还可以稍加阅读<a href="https://getbootstrap.com/">Bootstrap 4官方文档</a>，改写一个符合自己品味的外观。</p><hr><ul><li>有疑问请在<a href="http://www.dusaiphoto.com/">杜赛的个人网站</a>留言，我会尽快回复。</li><li>或Email私信我：<a href="mailto:&#100;&#117;&#x73;&#97;&#105;&#112;&#104;&#111;&#116;&#111;&#x40;&#102;&#111;&#x78;&#109;&#97;&#x69;&#108;&#46;&#99;&#x6f;&#x6d;">&#100;&#117;&#x73;&#97;&#105;&#112;&#104;&#111;&#116;&#111;&#x40;&#102;&#111;&#x78;&#109;&#97;&#x69;&#108;&#46;&#99;&#x6f;&#x6d;</a></li><li>项目完整代码：<a href="https://github.com/stacklens/django_blog_tutorial">Django_blog_tutorial</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--20.浏览量</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/20.liu-lan-liang/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/20.liu-lan-liang/</url>
      
        <content type="html"><![CDATA[<p><strong>文章浏览量</strong>是所有社交类网站所必备的数据，足以显示其重要性了。</p><p>博主可以通过浏览量来评估某篇文章的受欢迎程度，读者也能够通过浏览量来筛选质量更高的文章。</p><p>然而，准确统计浏览量并不简单：</p><ul><li>某些类型的请求不应该统计为浏览量，比如作者自己的浏览或编辑文章之后的重定向请求；</li><li>由于用户众多，浏览量的数据时刻都在快速更新，会给数据库带来很大的压力。因此很多大型网站都会使用如<a href="https://redis.io/">Redis</a>这样的读写速度非常快的内存数据库辅助存储。</li></ul><p>因为我们的项目是博客网站，粗略统计就可以了，也没有那么大的用户压力，所以设计就简单得多了。</p><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p>浏览量作为每篇博文都有的数据，需要一个字段来存储。</p><p>因此修改文章的模型：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>models<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">ArticlePost</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        total_views <span class="token operator">=</span> models<span class="token punctuation">.</span>PositiveIntegerField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>PositiveIntegerField</code>是用于存储正整数的字段</li><li><code>default=0</code>设定初始值从0开始</li></ul><p>修改完数据库别忘了要<strong>数据迁移</strong>，否则更改不会生效。</p><p>由于新字段设置了初始值，迁移会很顺畅：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>env<span class="token punctuation">)</span> E:<span class="token punctuation">\</span>django_project<span class="token punctuation">\</span>my_blog<span class="token operator">></span>python manage.py makemigrationsMigrations <span class="token keyword">for</span> <span class="token string">'article'</span><span class="token builtin class-name">:</span>  article<span class="token punctuation">\</span>migrations<span class="token punctuation">\</span>0003_articlepost_total_views.py    - Add field total_views to articlepostMigrations <span class="token keyword">for</span> <span class="token string">'userprofile'</span><span class="token builtin class-name">:</span>  userprofile<span class="token punctuation">\</span>migrations<span class="token punctuation">\</span>0002_auto_20181227_2041.py    - Alter field avatar on profile    - Alter field user on profile<span class="token punctuation">(</span>env<span class="token punctuation">)</span> E:<span class="token punctuation">\</span>django_project<span class="token punctuation">\</span>my_blog<span class="token operator">></span>python manage.py migrateOperations to perform:  Apply all migrations: admin, article, auth, contenttypes, sessions, userprofileRunning migrations:  Applying article.0003_articlepost_total_views<span class="token punctuation">..</span>. OK  Applying userprofile.0002_auto_20181227_2041<span class="token punctuation">..</span>. OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="列表模板"><a href="#列表模板" class="headerlink" title="列表模板"></a>列表模板</h2><p>为了方便观察效果，这次先写模板文件。</p><p>什么地方需要显示浏览量呢？很容易想到的就是文章列表了。修改文章列表的模板：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/article/list.html...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 已有代码 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>article:article_detail<span class="token punctuation">'</span> article.id %&#125;<span class="token punctuation">"</span></span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        阅读本文    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 显示浏览量 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col align-self-end<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>            浏览: &#123;&#123; article.total_views &#125;&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>笔者将浏览量显示在了<strong>“阅读本文”</strong>的边上。</p><p>有的同学觉得显示在这里不好看，请修改代码，将其放到自己最满意的地方。（顺便熟悉一下Bootstrap！）</p><h2 id="详情模板"><a href="#详情模板" class="headerlink" title="详情模板"></a>详情模板</h2><p>除了文章列表外，通常详情页面中也需要显示浏览量。</p><p>除此之外，在前面的学习中为了方便，没有做任何<strong>权限管理</strong>，以至于任何用户都可以对所有文章进行修改、删除：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20181228/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE118.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20181228/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE118.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>这样是肯定不行的，必须修复这个严重的错误。</p><p>修改<code>article/detail.html</code>模板文件：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/article/detail.html...<span class="token comment">&lt;!-- 文章详情 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        ...        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-12 alert alert-success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                作者：&#123;&#123; article.author &#125;&#125;                &#123;% if user == article.author %&#125;                    · <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">confirm_delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>删除文章<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    · <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">article:</span>article_update"</span> <span class="token attr-name">article.id</span> <span class="token attr-name">%&#125;"</span><span class="token punctuation">></span></span>                        编辑文章                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                &#123;% endif %&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                浏览：&#123;&#123; article.total_views &#125;&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改内容有：</p><ul><li>确认当前登录用户是文章的作者，才显示“删除文章、“编辑文章”两个链接</li><li>显示浏览量</li></ul><p>修改后的页面如下：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20181228/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE119.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20181228/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE119.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>上图中由于文章作者和登录用户不一致，修改文章的链接没有渲染出来了；如果登录用户是作者本人，它们又会正常显示。</p><blockquote><p>这样的方法可以阻止大部分的“好用户”非法修改数据。但是如果有“坏用户”直接输入url地址来使坏，该怎么办呢？所以光是靠前端页面来鉴权是不够的。</p></blockquote><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>现在浏览量能够正确显示了，但是由于没有进行任何处理，其数值会一直为0。我们希望每当用户访问详情页面时，浏览量就加1。</p><p>修改<code>article_detail()</code>如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">def</span> <span class="token function">article_detail</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    article <span class="token operator">=</span> ArticlePost<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token builtin">id</span><span class="token punctuation">)</span>        <span class="token comment"># 浏览量 +1</span>    article<span class="token punctuation">.</span>total_views <span class="token operator">+=</span> <span class="token number">1</span>    article<span class="token punctuation">.</span>save<span class="token punctuation">(</span>update_fields<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'total_views'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>update_fields=[]</code>指定了数据库只更新<code>total_views</code>字段，优化执行效率。</p><p>测试一下，可以正常对浏览量计数了：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20181228/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE121.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20181228/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE121.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><h2 id="视图中鉴权"><a href="#视图中鉴权" class="headerlink" title="视图中鉴权"></a>视图中鉴权</h2><p>前面讲了，光是在模板中鉴权是不够的，必须在后端业务逻辑中再次验证用户身份。</p><p>修改<code>article_update()</code>更新文章的视图：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 提醒用户登录</span><span class="token decorator annotation punctuation">@login_required</span><span class="token punctuation">(</span>login_url<span class="token operator">=</span><span class="token string">'/userprofile/login/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">article_update</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 已有代码</span>    article <span class="token operator">=</span> ArticlePost<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token builtin">id</span><span class="token punctuation">)</span>    <span class="token comment"># 过滤非作者的用户</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>user <span class="token operator">!=</span> article<span class="token punctuation">.</span>author<span class="token punctuation">:</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"抱歉，你无权修改这篇文章。"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>视图中进行了两次鉴权：</p><ul><li><code>login_required</code>装饰器过滤未登录的用户</li><li><code>if</code>语句过滤已登录、但非作者本人的用户</li></ul><p>通过在业务逻辑中再次验证身份，完全阻止恶意用户从中使坏了。</p><p>除了更新文章的视图外，<strong>删除文章也应该做类似的工作</strong>，请读者自行修改并测试。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章完成了简单的统计浏览量的功能，并且在前后端中对用户的身份进行了验证。</p><p>下一章学习与浏览量紧密相关的功能：<strong>查询最热文章</strong>。</p><ul><li>有疑问请在<a href="http://www.dusaiphoto.com/">杜赛的个人网站</a>留言，我会尽快回复。</li><li>或Email私信我：<a href="mailto:&#100;&#117;&#x73;&#97;&#105;&#112;&#104;&#111;&#x74;&#111;&#x40;&#x66;&#111;&#x78;&#109;&#x61;&#105;&#x6c;&#46;&#99;&#x6f;&#x6d;">&#100;&#117;&#x73;&#97;&#105;&#112;&#104;&#111;&#x74;&#111;&#x40;&#x66;&#111;&#x78;&#109;&#x61;&#105;&#x6c;&#46;&#99;&#x6f;&#x6d;</a></li><li>项目完整代码：<a href="https://github.com/stacklens/django_blog_tutorial">Django_blog_tutorial</a></li></ul><blockquote><p>转载请注明出处。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--21.最热文章</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/21.zui-re-wen-zhang/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/21.zui-re-wen-zhang/</url>
      
        <content type="html"><![CDATA[<p>有了浏览量之后，文章受欢迎的程度就有了评价标准。随之而来的就有根据浏览量对文章进行排序的需求，即显示<strong>“最热文章”</strong>。</p><p>现在你已经很熟悉MTV模式，不需要我啰嗦也能完成任务：</p><ul><li>文章的模型已经有了，不需要写Model了</li><li>写一个视图函数<code>article_list_by_views()</code>，取出按浏览排序后的文章对象</li><li>将文章对象传递到模板，并进行渲染</li></ul><p><strong>很简单，但也隐藏着问题</strong>：最热文章列表和之前的普通文章列表相比，大部分功能其实都是相同的，仅仅是排序不同而已。</p><p>万一哪天需要根据文章标题排序呢？万一还需要用户id排序、标签排序、收藏排序…不仅如此，就连路由<code>urls.py</code>都要跟着膨胀。代码会越来越臃肿且不可维护。</p><p><strong>重复的代码是万恶之源。</strong>因此这里挑战一下，不创建新的视图/路由，而是将排序功能融合到已有的视图/路由中。</p><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>根据以上需求，重写<code>article_list()</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 重写文章列表</span><span class="token keyword">def</span> <span class="token function">article_list</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 根据GET请求中查询条件</span>    <span class="token comment"># 返回不同排序的对象数组</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'order'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'total_views'</span><span class="token punctuation">:</span>        article_list <span class="token operator">=</span> ArticlePost<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'-total_views'</span><span class="token punctuation">)</span>        order <span class="token operator">=</span> <span class="token string">'total_views'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        article_list <span class="token operator">=</span> ArticlePost<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        order <span class="token operator">=</span> <span class="token string">'normal'</span>    paginator <span class="token operator">=</span> Paginator<span class="token punctuation">(</span>article_list<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    page <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'page'</span><span class="token punctuation">)</span>    articles <span class="token operator">=</span> paginator<span class="token punctuation">.</span>get_page<span class="token punctuation">(</span>page<span class="token punctuation">)</span>        <span class="token comment"># 修改此行</span>    context <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">'articles'</span><span class="token punctuation">:</span> articles<span class="token punctuation">,</span> <span class="token string">'order'</span><span class="token punctuation">:</span> order <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'article/list.html'</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>重点知识如下：</strong></p><ul><li>前面用过GET请求传递单个参数。它也是可以传递多个参数的，如<code>?a=1&amp;b=2</code>，参数间用<code>&amp;</code>隔开</li><li>视图根据GET参数<code>order</code>的值，判断取出的文章如何排序</li><li><code>order_by()</code>方法指定对象如何进行排序。模型中有<code>total_views</code>这个整数字段，因此‘total_views’为正序，‘-total_views’为逆序</li><li>为什么把新变量<code>order</code>也传递到模板中？因为文章需要翻页！<code>order</code>给模板一个标识，提醒模板下一页应该如何排序</li></ul><p>这样一来，排序所需要的参数都可以通过查询获得，连<code>urls.py</code>都不用改写了。</p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>接下来修改文章列表模板：优化入口，并且正确分页：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/article/list.html...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>breadcrumb<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>breadcrumb<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>breadcrumb-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>article:article_list<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    最新                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>breadcrumb-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>article:article_list<span class="token punctuation">'</span> %&#125;?order=total_views<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    最热                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row mt-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        &#123;% for article in articles %&#125;        ...        &#123;% endfor %&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 页码导航 --></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>?page=1&amp;order=&#123;&#123; order &#125;&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&laquo;">&amp;laquo;</span> 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>?page=&#123;&#123; articles.previous_page_number &#125;&#125;&amp;order=&#123;&#123; order &#125;&#125;<span class="token punctuation">"</span></span>    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-secondary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>...    &#123;% if articles.has_next %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>?page=&#123;&#123; articles.next_page_number &#125;&#125;&amp;order=&#123;&#123; order &#125;&#125;<span class="token punctuation">"</span></span>   <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-secondary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; articles.next_page_number &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>?page=&#123;&#123; articles.paginator.num_pages &#125;&#125;&amp;order=&#123;&#123; order &#125;&#125;<span class="token punctuation">"</span></span>   <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; articles.paginator.num_pages &#125;&#125; <span class="token entity named-entity" title="&raquo;">&amp;raquo;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>新增了Bootstrap中的面包屑导航样式<code>breadcrumb</code></li><li>页码导航中，所有的分页链接都新增了<code>order</code>参数</li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>启动服务器，点击“最热”：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20181228/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE132.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20181228/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE132.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>工作得很好！切换页码，留意地址栏中是如何变化的。</p><p>还剩一个小瑕疵：用户点击“最热”按钮后，此按钮最好能够变为灰色，并且不可点击。这个精益求精的机会就留给读者去优化吧。</p><blockquote><p>header.html中有一个小改动：”写文章”的入口被挪到用户下拉菜单中了。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章已经摸到一个高级的编程领域门槛了：代码复用。将类似功能的代码合并到了一起，并且让后续的功能扩展变得很容易。只需要在视图中写几个<code>elif</code>语句就搞定了。</p><p>在读者以后的编程中，也要尽量优化代码结构，达到事半功倍的效果。</p><p>至此，博客虽小，功能却相当完整了。继续努力！</p><ul><li>有疑问请在<a href="http://www.dusaiphoto.com/">杜赛的个人网站</a>留言，我会尽快回复。</li><li>或Email私信我：<a href="mailto:&#100;&#117;&#115;&#97;&#x69;&#x70;&#x68;&#111;&#x74;&#111;&#x40;&#x66;&#111;&#x78;&#109;&#x61;&#105;&#108;&#46;&#99;&#111;&#x6d;">&#100;&#117;&#115;&#97;&#x69;&#x70;&#x68;&#111;&#x74;&#111;&#x40;&#x66;&#111;&#x78;&#109;&#x61;&#105;&#108;&#46;&#99;&#111;&#x6d;</a></li><li>项目完整代码：<a href="https://github.com/stacklens/django_blog_tutorial">Django_blog_tutorial</a></li></ul><blockquote><p>转载请注明出处。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--22.搜索文章</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/22.sou-suo-wen-zhang/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/22.sou-suo-wen-zhang/</url>
      
        <content type="html"><![CDATA[<p>不管是最新文章列表也好、最热文章列表也罢，都是把<strong>所有</strong>的文章数据全部展示给了用户。</p><p>但是如果用户只关心某些<strong>特定类型</strong>的文章，抽取全部数据就显得既不方便、又不效率了。</p><p>因此，给用户提供一个<strong>搜索功能</strong>，提供给用户感兴趣的几篇文章，就大有用处了。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h3><p>尽管细节不同，但是<strong>搜索和列表</strong>有很多类似的地方：它们都是先检索出一些文章对象，并将其展示给用户。上一章已经说过，<strong>代码重复是万恶之源</strong>，好的实践必须把功能类似的模块尽量复用起来。基于这个原则，我们打算继续在原有的<code>article_list()</code>上添砖加瓦，让其功能更加的强大。</p><blockquote><p>随着项目越来越庞大，又需要将功能复杂的模块拆分成更简单的多个模块。目前我们还不用担心这个问题。</p></blockquote><p>更酷的是，我们希望搜索出来的文章也能够按照时间、热度等各种方式进行排序。因此需要构造一个新的参数<code>search</code>，能够和之前的<code>order</code>参数进行联合查询。</p><h3 id="GET还是POST？"><a href="#GET还是POST？" class="headerlink" title="GET还是POST？"></a>GET还是POST？</h3><p>用户搜索内容时提交的文本，可以用GET请求提交，也可以用POST请求提交。根据实际的需要进行选择。</p><p>因为<code>order</code>是用GET提交的，并且翻页是GET请求，因此选择GET方式提交搜索文本，可以方便地和之前的模块结合起来。</p><p>之前我们已经用过表单组件<code>&lt;form method=&quot;POST&quot;&gt;</code>，通过POST请求提交数据。表单组件同样也可以提交GET请求，只要去掉<code>method=&quot;POST&quot;</code>属性就可以了。</p><h3 id="Q对象"><a href="#Q对象" class="headerlink" title="Q对象"></a>Q对象</h3><p><code>Model.objects.all()</code>能够返回表中的所有对象。</p><p>对应的，<code>Model.objects.filter(**kwargs)</code>可以返回与给定参数匹配的部分对象。</p><blockquote><p>还有<code>Model.objects.exclude(**kwargs)</code>返回与给定参数不匹配的对象</p></blockquote><p>如果想对多个参数进行查询怎么办？比如同时查询文章标题和正文内容。这时候就需要<strong>Q对象</strong>。</p><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>那么按照前面说好的，修改<code>article_list()</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 引入 Q 对象</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>db<span class="token punctuation">.</span>models <span class="token keyword">import</span> Q<span class="token keyword">def</span> <span class="token function">article_list</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    search <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'search'</span><span class="token punctuation">)</span>    order <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'order'</span><span class="token punctuation">)</span>    <span class="token comment"># 用户搜索逻辑</span>    <span class="token keyword">if</span> search<span class="token punctuation">:</span>        <span class="token keyword">if</span> order <span class="token operator">==</span> <span class="token string">'total_views'</span><span class="token punctuation">:</span>            <span class="token comment"># 用 Q对象 进行联合搜索</span>            article_list <span class="token operator">=</span> ArticlePost<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>                Q<span class="token punctuation">(</span>title__icontains<span class="token operator">=</span>search<span class="token punctuation">)</span> <span class="token operator">|</span>                Q<span class="token punctuation">(</span>body__icontains<span class="token operator">=</span>search<span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'-total_views'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            article_list <span class="token operator">=</span> ArticlePost<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>                Q<span class="token punctuation">(</span>title__icontains<span class="token operator">=</span>search<span class="token punctuation">)</span> <span class="token operator">|</span>                Q<span class="token punctuation">(</span>body__icontains<span class="token operator">=</span>search<span class="token punctuation">)</span>            <span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment"># 将 search 参数重置为空</span>        search <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">if</span> order <span class="token operator">==</span> <span class="token string">'total_views'</span><span class="token punctuation">:</span>            article_list <span class="token operator">=</span> ArticlePost<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'-total_views'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            article_list <span class="token operator">=</span> ArticlePost<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    paginator <span class="token operator">=</span> Paginator<span class="token punctuation">(</span>article_list<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    page <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'page'</span><span class="token punctuation">)</span>    articles <span class="token operator">=</span> paginator<span class="token punctuation">.</span>get_page<span class="token punctuation">(</span>page<span class="token punctuation">)</span>        <span class="token comment"># 增加 search 到 context</span>    context <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">'articles'</span><span class="token punctuation">:</span> articles<span class="token punctuation">,</span> <span class="token string">'order'</span><span class="token punctuation">:</span> order<span class="token punctuation">,</span> <span class="token string">'search'</span><span class="token punctuation">:</span> search <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'article/list.html'</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重点知识如下：</p><ul><li><p>新增参数<strong>search</strong>，存放需要搜索的文本。若search不为空，则检索特定文章对象。</p></li><li><p>留意<strong>filter</strong>中<strong>Q对象</strong>的用法。<code>Q(title__icontains=search)</code>意思是在模型的<code>title</code>字段查询，<code>icontains</code>是<strong>不区分大小写的包含</strong>，中间用两个下划线隔开。<code>search</code>是需要查询的文本。多个Q对象用管道符<code>|</code>隔开，就达到了联合查询的目的。</p><blockquote><p>icontains不区分大小写，对应的contains区分大小写</p></blockquote></li><li><p>为什么需要<code>search = &#39;&#39;</code>语句？如果用户没有搜索操作，则<code>search = request.GET.get(&#39;search&#39;)</code>会使得<code>search = None</code>，而这个值传递到模板中会错误地转换成<code>&quot;None&quot;</code><strong>字符串</strong>！等同于用户在搜索“None”关键字，这明显是错误的。</p><blockquote><p>完成本章内容后，可以删除此语句看看效果</p></blockquote></li></ul><p>除此之外还有一点小的代码优化工作：将需要重复用到<code>order = request.GET.get(&#39;order&#39;)</code>提取到顶部，让模块稍稍清爽一点。</p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>还是修改文章列表的模板文件。</p><p>需要修改的内容稍多，仔细一些不要看错：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/article/list.html...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 修改，面包屑的href增加search参数 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>breadcrumb<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>breadcrumb<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>breadcrumb-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>article:article_list<span class="token punctuation">'</span> %&#125;?search=&#123;&#123; search &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    最新                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>breadcrumb-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>article:article_list<span class="token punctuation">'</span> %&#125;?order=total_views&amp;search=&#123;&#123; search &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    最热                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 新增，搜索栏 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-auto mr-auto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-inline<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sr-only<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>                     <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control mb-2 mr-sm-2<span class="token punctuation">"</span></span>                     <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span>                     <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>搜索文章...<span class="token punctuation">"</span></span>                     <span class="token attr-name">required</span>                <span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 新增，搜索提示语 --></span>    &#123;% if search %&#125;        &#123;% if articles %&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> red</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>"&#123;&#123; search &#125;&#125;"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>的搜索结果如下：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>                &#123;% else %&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>暂无<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> red</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>"&#123;&#123; search &#125;&#125;"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>有关的文章。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>        &#123;% endif %&#125;    &#123;% endif %&#125;                    ...    <span class="token comment">&lt;!-- 修改，页码href增加search参数 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>?page=1&amp;order=&#123;&#123; order &#125;&#125;&amp;search=&#123;&#123; search &#125;&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>?page=&#123;&#123; articles.previous_page_number &#125;&#125;&amp;order=&#123;&#123; order &#125;&#125;&amp;search=&#123;&#123; search &#125;&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-secondary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>?page=&#123;&#123; articles.next_page_number &#125;&#125;&amp;order=&#123;&#123; order &#125;&#125;&amp;search=&#123;&#123; search &#125;&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-secondary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>?page=&#123;&#123; articles.paginator.num_pages &#125;&#125;&amp;order=&#123;&#123; order &#125;&#125;&amp;search=&#123;&#123; search &#125;&#125;<span class="token punctuation">"</span></span><span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>面包屑组件、页码组件都改动了href：增加了<code>search</code>参数</li><li>新增搜索栏，以GET请求提交<code>search</code>参数；<code>required</code>属性阻止用户提交空白文本</li><li>新增搜索提示语。好的UI必须让用户了解当前的状态</li></ul><p>Emmm…想想也不用改动其他东西了。</p><p>开始测试吧！</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>还是打开文章列表页面：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20181230/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE133.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20181230/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE133.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>出现了搜索栏！并且翻页、最热等功能一切正常。</p><p>在搜索栏中输入“PYTHON”，结果如下：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20181230/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE134.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20181230/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE134.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>成功将标题或正文中含有”python”关键字的文章检索出来了，并且是忽略大小写的。点击<strong>最热</strong>可以让检索结果按浏览量排序，翻页功能也正常工作。很好，达成了目标！</p><p>学到这里的读者应该感到自豪：你用了同一个url，集成了很多种功能，展示了不同的内容！这对新手来说其实并不容易做到。</p><blockquote><p>这种方法有一个小缺点：有的时候url中会包含像<code>search=&#39;&#39;</code>（空值）这样无意义的字符串，强迫症简直不能忍。所幸这无伤大雅，通常用户并不会关心你的url是什么样子的，只要网页美观好用就行。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章完成了一个简单的搜索功能，这对于个人博客来说应该够用了。</p><p>更加复杂、深度定制的搜索可以借助第三方模块，如<a href="https://github.com/django-haystack/django-haystack">Haystack</a>。</p><p>另外笔者这样实现搜索不一定是最优的。相信你已经掌握多种途径来实现搜索功能了（POST请求？搜索专用视图？另写url？），尽情尝试一番吧。</p><ul><li>有疑问请在<a href="http://www.dusaiphoto.com/">杜赛的个人网站</a>留言，我会尽快回复。</li><li>或Email私信我：<a href="mailto:&#100;&#117;&#115;&#x61;&#105;&#x70;&#x68;&#111;&#x74;&#111;&#64;&#x66;&#111;&#120;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;">&#100;&#117;&#115;&#x61;&#105;&#x70;&#x68;&#111;&#x74;&#111;&#64;&#x66;&#111;&#120;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;</a></li><li>项目完整代码：<a href="https://github.com/stacklens/django_blog_tutorial">Django_blog_tutorial</a></li></ul><blockquote><p>转载请注明出处。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--23.文章目录</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/23.wen-zhang-mu-lu/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/23.wen-zhang-mu-lu/</url>
      
        <content type="html"><![CDATA[<p>对会读书的人来说，读一本书要做的第一件事，就是仔细阅读这本书的目录。阅读目录可以对整体内容有所了解，并清楚地知道感兴趣的部分在哪里，提高阅读质量。</p><p>博文也是同样的，好的目录对博主和读者都很有帮助。更进一步的是，还可以在目录中设置锚点，点击标题就立即前往该处，非常的方便。</p><h2 id="文中的目录"><a href="#文中的目录" class="headerlink" title="文中的目录"></a>文中的目录</h2><p>之前我们已经为博文支持了Markdown语法，现在继续增强其功能。</p><p>有折腾代码高亮的痛苦经历之后，设置Markdown的目录扩展就显得特别轻松了。</p><p>修改文章详情视图：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 文章详情</span><span class="token keyword">def</span> <span class="token function">article_detail</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    article<span class="token punctuation">.</span>body <span class="token operator">=</span> markdown<span class="token punctuation">.</span>markdown<span class="token punctuation">(</span>article<span class="token punctuation">.</span>body<span class="token punctuation">,</span>        extensions<span class="token operator">=</span><span class="token punctuation">[</span>        <span class="token string">'markdown.extensions.extra'</span><span class="token punctuation">,</span>        <span class="token string">'markdown.extensions.codehilite'</span><span class="token punctuation">,</span>                    <span class="token comment"># 目录扩展</span>        <span class="token string">'markdown.extensions.TOC'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>    <span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>仅仅是将<code>markdown.extensions.TOC</code>扩展添加了进去。</p><blockquote><p><strong>注意</strong>：有读者反映某些版本下 <code>markdown.extensions.TOC</code> 会报错。如果遇到这种情况，请尝试修改为 <code>markdown.extensions.toc</code> 。</p></blockquote><p>代码增加这一行就足够了。为了方便测试，往之前的文章中添加几个一级标题、二级标题等。</p><blockquote><p>还记得Markdown语法如何写标题吗？一级标题：<code># title1</code>，二级标题：<code>## title2</code></p></blockquote><p>然后你可以在文中的任何地方插入<code>[TOC]</code>字符串，目录就自动生成好了：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20181231/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE135.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20181231/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE135.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>点击标题，页面就立即前往相应的标题处（即“锚点”的概念）。</p><h2 id="任意位置的目录"><a href="#任意位置的目录" class="headerlink" title="任意位置的目录"></a>任意位置的目录</h2><p>上面的方法只能将目录插入到文章当中。如果我想把目录插入到页面的任何一个位置呢？</p><p>也简单，这次需要修改Markdown的渲染方法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">def</span> <span class="token function">article_detail</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment"># 修改 Markdown 语法渲染</span>    md <span class="token operator">=</span> markdown<span class="token punctuation">.</span>Markdown<span class="token punctuation">(</span>        extensions<span class="token operator">=</span><span class="token punctuation">[</span>        <span class="token string">'markdown.extensions.extra'</span><span class="token punctuation">,</span>        <span class="token string">'markdown.extensions.codehilite'</span><span class="token punctuation">,</span>        <span class="token string">'markdown.extensions.toc'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>    <span class="token punctuation">)</span>    article<span class="token punctuation">.</span>body <span class="token operator">=</span> md<span class="token punctuation">.</span>convert<span class="token punctuation">(</span>article<span class="token punctuation">.</span>body<span class="token punctuation">)</span>    <span class="token comment"># 新增了md.toc对象</span>    context <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">'article'</span><span class="token punctuation">:</span> article<span class="token punctuation">,</span> <span class="token string">'toc'</span><span class="token punctuation">:</span> md<span class="token punctuation">.</span>toc <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'article/detail.html'</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了能将<code>toc</code>单独提取出来，我们先将Markdown类赋值给一个临时变量<code>md</code>，然后用<code>convert()</code>方法将正文渲染为html页面。通过<code>md.toc</code>将目录传递给模板。</p><blockquote><p>注意<code>markdown.markdown()</code>和<code>markdown.Markdown()</code>的区别</p><p>更详细的解释见：<a href="https://python-markdown.github.io/extensions/toc/">官方文档</a></p></blockquote><p>为了将新的目录渲染到页面中，需要修改文章详情模板：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/article/detail.html...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 将原有内容嵌套进新的div中 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-9<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mt-4 mb-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; article.title &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>alert alert-success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                ...            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 新增的目录 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-3 mt-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>目录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                &#123;&#123; toc|safe &#125;&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>重新布局，将原有内容装进<code>col-9</code>的容器中，将右侧<code>col-3</code>的空间留给目录</li><li><code>toc</code>需要<code>|safe</code>标签才能正确渲染</li></ul><p>重新打开页面：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20181231/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE136.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20181231/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE136.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>完成了文章的目录功能，至此文章详情页面也比较完善了。</p><ul><li>有疑问请在<a href="http://www.dusaiphoto.com/">杜赛的个人网站</a>留言，我会尽快回复。</li><li>或Email私信我：<a href="mailto:&#x64;&#x75;&#115;&#97;&#x69;&#x70;&#x68;&#x6f;&#x74;&#111;&#64;&#102;&#x6f;&#x78;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#x6d;">&#x64;&#x75;&#115;&#97;&#x69;&#x70;&#x68;&#x6f;&#x74;&#111;&#64;&#102;&#x6f;&#x78;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#x6d;</a></li><li>项目完整代码：<a href="https://github.com/stacklens/django_blog_tutorial">Django_blog_tutorial</a></li></ul><blockquote><p>转载请注明出处。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--24.评论</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/24.ping-lun/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/24.ping-lun/</url>
      
        <content type="html"><![CDATA[<p>在没有互联网的年代，我们用日记来记录每天的心得体会。小的时候我有一个带锁的日记本，生怕被别人看见里面写了啥，钥匙藏得那叫一个绝。</p><p>现在时代变了，网络版的日记本：博客，却巴不得越多人看越好。</p><p>别人看完你写的深度好文，难免也想高谈阔论一番，这就是“评论”功能。</p><p>本章将要编写的评论模块，几乎没有新的知识点，而是将前面章节内容的综合应用。</p><p><strong>强烈建议读者自行尝试编写这部分内容，测试自己的知识掌握程度。</strong></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>评论是一个相对独立的功能，因此新建一个评论的app：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>env<span class="token punctuation">)</span> E:<span class="token punctuation">\</span>django_project<span class="token punctuation">\</span>my_blog <span class="token operator">></span> ppython manage.py startapp comment<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>有的人觉得奇怪，没有博文就没有评论，为什么说评论是“独立”的功能？</p><p>那是因为不仅博文可以评论，照片、视频甚至网站本身都可以“被评论”。将其封装成单独的模块方便以后的扩展。</p></blockquote><p>确认app创建成功后，记得在<code>settings.py</code>中注册：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">my_blog<span class="token operator">/</span>settings<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token string">'comment'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>TIME_ZONE <span class="token operator">=</span> <span class="token string">'Asia/Shanghai'</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为我们想显示发表评论的时间，修改时区设置<code>TIME_ZONE</code>为上海的时区。</p><p>然后在<code>my_blog/urls.py</code>中注册根路由：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">my_blog<span class="token operator">/</span>urls<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment"># 评论</span>    path<span class="token punctuation">(</span><span class="token string">'comment/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'comment.urls'</span><span class="token punctuation">,</span> namespace<span class="token operator">=</span><span class="token string">'comment'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="编写核心功能"><a href="#编写核心功能" class="headerlink" title="编写核心功能"></a>编写核心功能</h2><h3 id="评论的模型"><a href="#评论的模型" class="headerlink" title="评论的模型"></a>评论的模型</h3><p>首先编写评论的模型：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">comment<span class="token operator">/</span>models<span class="token punctuation">.</span>py<span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> ArticlePost<span class="token comment"># 博文的评论</span><span class="token keyword">class</span> <span class="token class-name">Comment</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    article <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>        ArticlePost<span class="token punctuation">,</span>        on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">,</span>        related_name<span class="token operator">=</span><span class="token string">'comments'</span>    <span class="token punctuation">)</span>    user <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>        User<span class="token punctuation">,</span>         on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">,</span>         related_name<span class="token operator">=</span><span class="token string">'comments'</span>    <span class="token punctuation">)</span>    body <span class="token operator">=</span> models<span class="token punctuation">.</span>TextField<span class="token punctuation">(</span><span class="token punctuation">)</span>    created <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>auto_now_add<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        ordering <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'created'</span><span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>body<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模型中共有2个外键：</p><ul><li><code>article</code>是被评论的文章</li><li><code>user</code>是评论的发布者</li></ul><p>别忘了每次新增、修改Model后，必须<strong>数据迁移</strong>。</p><blockquote><p>提示：你必须先在setting.py中注册app，这个app中的数据迁移才能生效</p></blockquote><h3 id="评论的表单"><a href="#评论的表单" class="headerlink" title="评论的表单"></a>评论的表单</h3><p>用户提交评论时会用到表单，因此<strong>新建</strong>表单类：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">comment<span class="token operator">/</span>forms<span class="token punctuation">.</span>py<span class="token keyword">from</span> django <span class="token keyword">import</span> forms<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Comment<span class="token keyword">class</span> <span class="token class-name">CommentForm</span><span class="token punctuation">(</span>forms<span class="token punctuation">.</span>ModelForm<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Comment        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'body'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为模型中的2个外键将通过视图逻辑自动填写，所以这里只需要提交<code>body</code>就足够了。</p><h3 id="评论的url"><a href="#评论的url" class="headerlink" title="评论的url"></a>评论的url</h3><p>在comment app中<strong>新建</strong>路由文件：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">comment<span class="token operator">/</span>urls<span class="token punctuation">.</span>py<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> viewsapp_name <span class="token operator">=</span> <span class="token string">'comment'</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token comment"># 发表评论</span>    path<span class="token punctuation">(</span><span class="token string">'post-comment/&lt;int:article_id>/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>post_comment<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'post_comment'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>评论必须关联在某篇具体的博文里，因此传入博文的<code>id</code>，方便后续调用。</p><p><code>post_comment()</code>视图还没写，先取个名字占位置。</p><h3 id="评论的视图"><a href="#评论的视图" class="headerlink" title="评论的视图"></a>评论的视图</h3><p>评论的视图函数如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">comment<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token punctuation">,</span> get_object_or_404<span class="token punctuation">,</span> redirect<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> login_required<span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> ArticlePost<span class="token keyword">from</span> <span class="token punctuation">.</span>forms <span class="token keyword">import</span> CommentForm<span class="token comment"># 文章评论</span><span class="token decorator annotation punctuation">@login_required</span><span class="token punctuation">(</span>login_url<span class="token operator">=</span><span class="token string">'/userprofile/login/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">post_comment</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> article_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    article <span class="token operator">=</span> get_object_or_404<span class="token punctuation">(</span>ArticlePost<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span>article_id<span class="token punctuation">)</span>    <span class="token comment"># 处理 POST 请求</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        comment_form <span class="token operator">=</span> CommentForm<span class="token punctuation">(</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>        <span class="token keyword">if</span> comment_form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            new_comment <span class="token operator">=</span> comment_form<span class="token punctuation">.</span>save<span class="token punctuation">(</span>commit<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>            new_comment<span class="token punctuation">.</span>article <span class="token operator">=</span> article            new_comment<span class="token punctuation">.</span>user <span class="token operator">=</span> request<span class="token punctuation">.</span>user            new_comment<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>article<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"表单内容有误，请重新填写。"</span><span class="token punctuation">)</span>    <span class="token comment"># 处理错误请求</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"发表评论仅接受POST请求。"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码中有2个新面孔。</strong></p><p><code>get_object_or_404()</code>：它和<code>Model.objects.get()</code>的功能基本是相同的。区别是在生产环境下，如果用户请求一个不存在的对象时，<code>Model.objects.get()</code>会返回<code>Error 500</code>（服务器内部错误），而<code>get_object_or_404()</code>会返回<code>Error 404</code>。相比之下，返回404错误更加的准确。</p><p><code>redirect()</code>：返回到一个适当的url中：即用户发送评论后，重新定向到文章详情页面。当其参数是一个Model对象时，会自动调用这个Model对象的<code>get_absolute_url()</code>方法。因此接下来马上修改<code>article</code>的模型。</p><blockquote><p>实际上之前的章节已经用过<code>redirect()</code>了。功能是相同的，实现上略有区别。</p></blockquote><h3 id="文章的模型"><a href="#文章的模型" class="headerlink" title="文章的模型"></a>文章的模型</h3><p>按照上面说的，在文章模型中添加<code>get_absolute_url()</code>方法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>models<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 记得导入</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> reverse<span class="token keyword">class</span> <span class="token class-name">ArticlePost</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment"># 获取文章地址</span>    <span class="token keyword">def</span> <span class="token function">get_absolute_url</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> reverse<span class="token punctuation">(</span><span class="token string">'article:article_detail'</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过<code>reverse()</code>方法返回文章详情页面的url，实现了路由重定向。</p><h3 id="文章详情视图"><a href="#文章详情视图" class="headerlink" title="文章详情视图"></a>文章详情视图</h3><p>评论模块需要在<strong>文章详情</strong>页面展示，所以必须把评论模块的上下文也传递到模板中。</p><p>因此修改<code>article/views.py</code>中的<code>article_detail()</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">from</span> comment<span class="token punctuation">.</span>models <span class="token keyword">import</span> Comment<span class="token keyword">def</span> <span class="token function">article_detail</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 已有代码</span>    article <span class="token operator">=</span> ArticlePost<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token builtin">id</span><span class="token punctuation">)</span>    <span class="token comment"># 取出文章评论</span>    comments <span class="token operator">=</span> Comment<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>article<span class="token operator">=</span><span class="token builtin">id</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment"># 添加comments上下文</span>    context <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">'article'</span><span class="token punctuation">:</span> article<span class="token punctuation">,</span> <span class="token string">'toc'</span><span class="token punctuation">:</span> md<span class="token punctuation">.</span>toc<span class="token punctuation">,</span> <span class="token string">'comments'</span><span class="token punctuation">:</span> comments <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>filter()</code>可以取出多个满足条件的对象，而<code>get()</code>只能取出1个，注意区分使用</p></blockquote><h3 id="文章详情模板"><a href="#文章详情模板" class="headerlink" title="文章详情模板"></a>文章详情模板</h3><p>到最后一步了，坚持。所有后台的功能已经写完了，就差把所有这些展现到页面中了。</p><p>修改文章详情页面：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/article/detail.html...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-9<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    ...    <span class="token comment">&lt;!-- 已有代码，文章正文 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 发表评论 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>    &#123;% if user.is_authenticated %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span>                 <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>comment:post_comment<span class="token punctuation">'</span> article.id %&#125;<span class="token punctuation">"</span></span>                 <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span>            <span class="token punctuation">></span></span>            &#123;% csrf_token %&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>                            我也要发言：                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span>                         <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>                         <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span>                         <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>body<span class="token punctuation">"</span></span>                         <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>body<span class="token punctuation">"</span></span>                         <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- 提交按钮 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>发送<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    &#123;% else %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row justify-content-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            请<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>userprofile:login<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>后回复        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    &#123;% endif %&#125;        <span class="token comment">&lt;!-- 显示评论 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>共有&#123;&#123; comments.count &#125;&#125;条评论<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        &#123;% for comment in comments %&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> pink</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>                    &#123;&#123; comment.user &#125;&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span> 于                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> green</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>                    &#123;&#123; comment.created|date:"Y-m-d H:i:s" &#125;&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> 时说：            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">font-family</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span> <span class="token property">font-size</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>&#123;&#123; comment.body &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span>        &#123;% endfor %&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 目录 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-3 mt-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>表单组件中的<code>action</code>指定数据提交到哪个url中</p></li><li><p>显示评论中的<code>comments.count</code>是模板对象中内置的方法，对包含的元素进行计数</p></li><li><p><code>|date:&quot;Y-m-d H:i :s&quot;</code>：管道符你已经很熟悉了，用于给对象“粘贴”某些属性或功能。这里用于格式化日期的显示方式。请尝试修改其中的某些字符试试效果。</p></li><li><p><code>&lt;pre&gt;</code>定义预格式化的文本，在我们的项目中最关键的作用是保留空格和换行符。该标签会改变文字的字体、大小等，因此用<code>style</code>属性重新定义相关内容。尝试将<code>&lt;pre&gt;</code>替换为<code>div</code>，输入多行文本试试效果。</p><blockquote><p>之前说代码最好不要复制粘贴，否则有些“小坑”你是留意不到的。比如在<code>&lt;pre&gt;</code>标签中的文本千万不能缩进。</p></blockquote></li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>又到了激动人心的测试环节了。</p><p>登录自己的账户，进入某个文章详情页面，发现已经可以进行留言了：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190101/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE137.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190101/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE137.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>如果退出登录，显示提示语：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190101/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE138.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190101/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE138.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>点击登录就回到登录页面。</p><p>评论模块的发布、展示功能就搞定了。</p><h3 id="扫尾工作"><a href="#扫尾工作" class="headerlink" title="扫尾工作"></a>扫尾工作</h3><p>数据的删、改功能我们已经做过很多遍，这里不打算再赘述了。</p><p>评论同样也可以支持Markdown语法，或者插入Emoji表情符号。</p><p>读者可以自己去实现感兴趣的功能。</p><blockquote><p>有些网站干脆就没有删除、更新评论的功能。因为对小站来说，这些功能用到的次数太少太少了，不如把精力用在更有价值的地方去。比如<a href="https://www.dusaiphoto.com/">我的博客</a>就没有。</p><p>还有的网站提供软删除，删除后仅仅是不显示而已，实际上数据还存在。</p><p>具体应该如何做，都以你的喜好而定。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章实现了发表评论、展示评论的功能。像开头说的一样，本章的内容是前面所学章节的综合。</p><p>如果你没有看本章代码，而是完全靠自己完成了评论功能，那么恭喜你获得了<strong>“Django入门程序员”</strong>的称号！不要小看“入门”两字，万事开头难嘛。</p><ul><li>有疑问请在<a href="http://www.dusaiphoto.com/">杜赛的个人网站</a>留言，我会尽快回复。</li><li>或Email私信我：<a href="mailto:&#x64;&#117;&#115;&#x61;&#x69;&#112;&#x68;&#111;&#x74;&#111;&#64;&#102;&#x6f;&#120;&#x6d;&#x61;&#105;&#108;&#46;&#x63;&#111;&#x6d;">&#x64;&#117;&#115;&#x61;&#x69;&#112;&#x68;&#111;&#x74;&#111;&#64;&#102;&#x6f;&#120;&#x6d;&#x61;&#105;&#108;&#46;&#x63;&#111;&#x6d;</a></li><li>项目完整代码：<a href="https://github.com/stacklens/django_blog_tutorial">Django_blog_tutorial</a></li></ul><blockquote><p>转载请注明出处。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--25.课间休息</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/25.ke-jian-xiu-xi/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/25.ke-jian-xiu-xi/</url>
      
        <content type="html"><![CDATA[<p><strong>教程看到这里，你已经学会如下内容：</strong></p><ul><li>搭建开发环境</li><li>博文管理</li><li>用户管理</li><li>发表评论</li><li>若干其他功能</li></ul><p>搭建简单的小博客，以上的功能够用了。<strong>但相信你的志向不止于此，</strong>毕竟程序员面试个个造火箭啊。</p><h2 id="接下来学什么"><a href="#接下来学什么" class="headerlink" title="接下来学什么"></a>接下来学什么</h2><p><strong>教程接下来是进阶部分，包括：</strong></p><ul><li>类视图</li><li>多级评论</li><li>文章栏目和标签</li><li>图片处理</li><li>第三方登录</li><li>测试与维护</li><li>部署</li><li>其他内容</li></ul><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>开发好项目的demo后，你应该尽快部署到云服务器上，让世界各地的用户随时浏览你的网页。不要误会，<strong>部署只是一个起点</strong>，作用是让你获得巨大的成就感；部署后你还是需要持续的优化、添加网站的功能，以及修补你满天飞的Bug。</p><p><a href="https://www.dusaiphoto.com/article/detail/71/">将项目部署到线上的章节</a>在本教程的末尾，心急的同学可以先去尝试部署。当然按部就班的学完教程再部署也是可以的。</p><h2 id="继续战斗"><a href="#继续战斗" class="headerlink" title="继续战斗"></a>继续战斗</h2><p>看完这些，你就可以踏上新的征程了。</p><p>写这篇博文正好在2019年元旦，而你应该在未来的某个普通的日子看到。</p><p><strong>陌生人，祝你学业进步、事业有成，继续战斗吧！</strong></p><blockquote><p>写教程付出博主很多的精力，如果你有收获，欢迎点击教程尾部的**[打赏]**按钮，请博主喝杯咖啡~</p><p>或者在我的<a href="https://github.com/stacklens/django_blog_tutorial">GitHub博客教程代码</a>给一个小星星，感谢各位的支持。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--26.基于类的视图</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/26.ji-yu-lei-de-shi-tu/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/26.ji-yu-lei-de-shi-tu/</url>
      
        <content type="html"><![CDATA[<p>说是完结，马上又开始写进阶篇了。</p><p>本章不会为博客项目增加新功能，<strong>但是也同样重要</strong>，因为我们要学习<del>高逼格的</del>基于<strong>类</strong>的视图。</p><h2 id="什么是类视图"><a href="#什么是类视图" class="headerlink" title="什么是类视图"></a>什么是类视图</h2><p>前面章节中写的所有视图都是基于函数的，即<code>def</code>；而类视图是基于类的，即<code>class</code>。</p><p>有编程基础的同学都知道，<strong>类</strong>是面向对象技术中非常重要的概念。具有复杂<strong>数据</strong>、<strong>功能</strong>的类，可以通过继承轻而易举的将自身特性传递给另一个类，从而实现代码的高效复用。</p><p>相比以前的函数视图，类视图有以下优势：</p><ul><li>HTTP方法（<code>GET</code>，<code>POST</code>等）相关的代码，可以通过<strong>方法</strong>而不是<strong>条件分支</strong>来组织</li><li>可以通过诸如mixins（多重继承）之类的面向对象技术将代码分解为<strong>可重用组件</strong></li></ul><p>说的都是什么意思？通过例子来感受一下。</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="函数和类"><a href="#函数和类" class="headerlink" title="函数和类"></a>函数和类</h3><p>假设我们有一个<a href="https://www.dusaiphoto.com/article/detail/16/">博客列表</a>，列表既有GET方法、又有POST方法，那么用视图函数看起来像这样：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">views<span class="token punctuation">.</span>py<span class="token keyword">def</span> <span class="token function">article_list_example</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""处理GET请求"""</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">:</span>        articles <span class="token operator">=</span> ArticlePost<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        context <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'articles'</span><span class="token punctuation">:</span> articles<span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'article/list.html'</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而在<strong>类视图</strong>中，则变为这样：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">views<span class="token punctuation">.</span>py<span class="token keyword">from</span> django<span class="token punctuation">.</span>views <span class="token keyword">import</span> View<span class="token keyword">class</span> <span class="token class-name">ArticleListView</span><span class="token punctuation">(</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""处理GET请求"""</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        articles <span class="token operator">=</span> ArticlePost<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        context <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'articles'</span><span class="token punctuation">:</span> articles<span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'article/list.html'</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从本质上讲，基于类的视图允许你使用不同的<strong>类实例方法</strong>（即上面的<code>def get()</code>）响应不同的HTTP请求方法，而不需要使用<strong>条件分支</strong>代码。这样做的好处是把不同的HTTP请求都分离到独立的函数中，逻辑更加清晰，并且方便复用。</p><p><strong>需要注意的是</strong>，因为Django的URL解析器希望将请求发送到<strong>函数</strong>而不是类，所以类视图有一个 <code>as_view()</code>方法，该方法返回一个函数，当请求匹配关联模式的URL时，则调用该函数。</p><p>即，视图函数的url原本写为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">urls<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'...'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>article_list_example<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'...'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>类视图的url需改写为：</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">urls<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'...'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>ArticleListView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'...'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通用视图"><a href="#通用视图" class="headerlink" title="通用视图"></a>通用视图</h3><p>像<strong>列表</strong>这样的功能在web开发中是很常见的，开发者会一遍又一遍写几乎相同的列表逻辑。Django的<strong>通用视图</strong>正是为缓解这种痛苦而开发的。它们对常用模式进行抽象，以便你快速编写公共视图，而无需编写太多代码。</p><p>因此用列表通用视图改写如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">views<span class="token punctuation">.</span>py<span class="token keyword">from</span> django<span class="token punctuation">.</span>views<span class="token punctuation">.</span>generic <span class="token keyword">import</span> ListView<span class="token keyword">class</span> <span class="token class-name">ArticleListView</span><span class="token punctuation">(</span>ListView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 上下文的名称</span>    context_object_name <span class="token operator">=</span> <span class="token string">'articles'</span>    <span class="token comment"># 查询集</span>    queryset <span class="token operator">=</span> ArticlePost<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 模板位置</span>    template_name <span class="token operator">=</span> <span class="token string">'article/list.html'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>列表继承了父类<code>ListView</code>，也就获得了父类中的处理列表的方法，因此你可以看到，我们在自己的类中没有写任何处理的逻辑，仅仅是赋值了几个变量而已。</p><h3 id="动态过滤"><a href="#动态过滤" class="headerlink" title="动态过滤"></a>动态过滤</h3><p>从数据库中筛选特定的内容也是常见的需求，类视图如何实现呢？</p><p>你可能想到了，将上面代码中改为<code>queryset = ArticlePost.objects.filter()</code>就可以了。</p><p>除此之外，<strong>更好的办法</strong>是覆写<code>get_queryset()</code>方法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">views<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">ArticleListView</span><span class="token punctuation">(</span>ListView<span class="token punctuation">)</span><span class="token punctuation">:</span>    context_object_name <span class="token operator">=</span> <span class="token string">'articles'</span>    template_name <span class="token operator">=</span> <span class="token string">'article/list.html'</span>    <span class="token keyword">def</span> <span class="token function">get_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        查询集        """</span>        queryset <span class="token operator">=</span> ArticlePost<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'Python'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> queryset<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子中只是过滤出标题为“Python”的文章而已，有些大材小用了；但是你可以在<code>get_queryset()</code>中写复杂的联合查询逻辑，满足个性化的功能。</p><h3 id="添加上下文"><a href="#添加上下文" class="headerlink" title="添加上下文"></a>添加上下文</h3><p>在博客列表的设计时，我们返回给模板的<strong>上下文</strong>除了<code>articles</code>以外，还有很多额外的信息，如<code>order</code>、<code>search</code>；在类视图中同样可以实现，改写<code>get_context_data()</code>方法即可：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">views<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">ArticleListView</span><span class="token punctuation">(</span>ListView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">get_context_data</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 获取原有的上下文</span>        context <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_context_data<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token comment"># 增加新上下文</span>        context<span class="token punctuation">[</span><span class="token string">'order'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'total_views'</span>        <span class="token keyword">return</span> context<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除此之外，<code>ListView</code>还有些别的方法可以覆写，深入了解可以看这里：<a href="https://docs.djangoproject.com/zh-hans/2.1/ref/class-based-views/generic-display/#listview">官方文档</a></p><h3 id="混入类"><a href="#混入类" class="headerlink" title="混入类"></a>混入类</h3><p><strong>混入类（Mixin）</strong>是指<strong>具有某些功能、通常不独立使用、提供给其他类继承功能</strong>的类。嗯，就是“混入”的字面意思。</p><p>前面的列表视图中已经有<code>get_context_data()</code>方法了。假设需要写一个功能类似的视频列表，就可以用<strong>Mixin</strong>来避免重复代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">views<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">ContextMixin</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get_context_data</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        context <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_context_data<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        context<span class="token punctuation">[</span><span class="token string">'order'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'total_views'</span>        <span class="token keyword">return</span> context<span class="token keyword">class</span> <span class="token class-name">ArticleListView</span><span class="token punctuation">(</span>ContextMixin<span class="token punctuation">,</span> ListView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">VideoListView</span><span class="token punctuation">(</span>ContextMixin<span class="token punctuation">,</span> ListView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过混入，两个子类都获得了<code>get_context_data()</code>方法。</p><blockquote><p>从语法上看，混入是通过多重继承实现的。有区别的是，Mixin是<strong>作为功能</strong>添加到子类中的，而不是作为父类。</p></blockquote><p>实际上Django内置了很多通用的Mixin类，实现了大部分常用的功能，点这里深入了解：<a href="https://docs.djangoproject.com/zh-hans/2.1/ref/class-based-views/mixins/">官方文档</a></p><h2 id="详情页"><a href="#详情页" class="headerlink" title="详情页"></a>详情页</h2><p>既然列表都有通用视图，详情页当然也有对应的<code>DetailView</code>。</p><p>用类视图写一个<a href="https://www.dusaiphoto.com/article/detail/19/">简单的详情页</a>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">views<span class="token punctuation">.</span>py<span class="token keyword">from</span> django<span class="token punctuation">.</span>views<span class="token punctuation">.</span>generic <span class="token keyword">import</span> DetailView<span class="token keyword">class</span> <span class="token class-name">ArticleDetailView</span><span class="token punctuation">(</span>DetailView<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> ArticlePost<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    context_object_name <span class="token operator">=</span> <span class="token string">'article'</span>    template_name <span class="token operator">=</span> <span class="token string">'article/detail.html'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后配置url：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">urls<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token comment"># 详情类视图</span>    path<span class="token punctuation">(</span><span class="token string">'detail-view/&lt;int:pk>/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>ArticleDetailView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'...'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意这里传入的参数不是<code>id</code>而是<code>pk</code>，这是视图的要求（也可以传入<code>slug</code>）。<code>pk</code>是数据表的主键，在默认情况下其实就是<code>id</code>。</p><p>这就写好了！</p><p>也可以添加任何别的功能，比如<a href="https://www.dusaiphoto.com/article/detail/45/">统计浏览量</a>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">views<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">ArticleDetailView</span><span class="token punctuation">(</span>DetailView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">get_object</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        获取需要展示的对象        """</span>        <span class="token comment"># 首先调用父类的方法</span>        obj <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span>ArticleDetailView<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>get_object<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 浏览量 +1</span>        obj<span class="token punctuation">.</span>total_views <span class="token operator">+=</span> <span class="token number">1</span>        obj<span class="token punctuation">.</span>save<span class="token punctuation">(</span>update_fields<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'total_views'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> obj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法<code>get_object()</code>的作用是获取需要展示的对象。首先调用父类方法，将这个对象赋值给<code>obj</code>变量，然后再对其进行统计浏览量的操作，最后将对象返回。相当于在原有的方法中把自己的逻辑“塞”了进去。</p><p>关于<code>DetailView</code>更多特性看这里：<a href="https://docs.djangoproject.com/zh-hans/2.1/ref/class-based-views/generic-display/#detailview">官方文档</a></p><h1 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h1><p>除了能够展示信息，通用视图还包含<code>CreateView</code>、<code>UpdateView</code>、<code>DeleteView</code>等<strong>编辑</strong>数据的类。</p><p>如果要<a href="https://www.dusaiphoto.com/article/detail/22/">新建文章</a>，则视图可以这么写：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">views<span class="token punctuation">.</span>py<span class="token keyword">from</span> django<span class="token punctuation">.</span>views<span class="token punctuation">.</span>generic<span class="token punctuation">.</span>edit <span class="token keyword">import</span> CreateView<span class="token keyword">class</span> <span class="token class-name">ArticleCreateView</span><span class="token punctuation">(</span>CreateView<span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> ArticlePost        fields <span class="token operator">=</span> <span class="token string">'__all__'</span>    <span class="token comment"># 或者只填写部分字段，比如：</span>    <span class="token comment"># fields = ['title', 'content']</span>        template_name <span class="token operator">=</span> <span class="token string">'article/create_by_class_view.html'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建<code>create_by_class_view.html</code>文件（目录在哪，你应该已经很清楚了），写入：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">create_by_class_view.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;% csrf_token %&#125;    &#123;&#123; form.as_p &#125;&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Save<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后添加url：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">urls<span class="token punctuation">.</span>pyurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'create-view/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>ArticleCreateView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'...'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然外观简陋（这不是重点），但现在这个视图确实已经能够创建新文章了！</p><p><code>UpdateView</code>和<code>DeleteView</code>这里就不再赘述了，以后用到的地方再进行讲解。</p><p>想提前了解的同学戳这里：<a href="https://docs.djangoproject.com/zh-hans/2.1/ref/class-based-views/generic-editing/">官方文档</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>有没有感受到<strong>代码隔离</strong>和<strong>继承</strong>的强大？没有？以后的章节会逐渐使用<strong>类</strong>编写视图，你会慢慢体会的。</p><p>类视图的内容非常丰富，短短一篇文章只能蜻蜓点水而已。读者在编程中遇到困难了，官方文档是你最好的教程。</p><p>如果你有耐心从头到尾阅读类视图的官方文档，那当然是最好的了。</p><hr><ul><li>有疑问请在<a href="http://www.dusaiphoto.com/">杜赛的个人网站</a>留言，我会尽快回复。</li><li>或Email私信我：<a href="mailto:&#x64;&#117;&#115;&#x61;&#105;&#x70;&#104;&#x6f;&#116;&#x6f;&#x40;&#x66;&#111;&#x78;&#109;&#x61;&#105;&#108;&#x2e;&#x63;&#111;&#x6d;">&#x64;&#117;&#115;&#x61;&#105;&#x70;&#104;&#x6f;&#116;&#x6f;&#x40;&#x66;&#111;&#x78;&#109;&#x61;&#105;&#108;&#x2e;&#x63;&#111;&#x6d;</a></li><li>项目完整代码：<a href="https://github.com/stacklens/django_blog_tutorial">Django_blog_tutorial</a></li></ul><blockquote><p>转载请告知作者并注明出处。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--27.文章栏目</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/27.wen-zhang-lan-mu/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/27.wen-zhang-lan-mu/</url>
      
        <content type="html"><![CDATA[<p>博客的文章类型通常不止一种：有时候你会写高深莫测的技术文章，有时候又纯粹只记录一下当天的心情。</p><p>因此<strong>对文章的分类</strong>就显得相当的重要了，既方便博主对文章进行分类归档，也方便用户有针对性的阅读。</p><p>而文章分类一个重要的途径就是设置<strong>栏目</strong>。</p><h2 id="栏目的模型"><a href="#栏目的模型" class="headerlink" title="栏目的模型"></a>栏目的模型</h2><p>实现文章栏目功能的方法有多种。你可以只是简单的在文章的Model中增加<code>CharField()</code>字段，以字符串的形式将栏目名称保存起来（实际上这种实现更像是<strong>“标签”</strong>，以后会讲到）。这样做的优点是比较简单；缺点也很明显，就是时间长了你可能会记混栏目的名字，并且也不方便对栏目的其他属性进行扩展。</p><p>因此对文章栏目可以独立为一个Model，用外键与文章的Model关联起来。</p><p>修改<code>article/modles.py</code>文件：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>models<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">ArticleColumn</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    栏目的 Model    """</span>    <span class="token comment"># 栏目标题</span>    title <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment"># 创建时间</span>    created <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>default<span class="token operator">=</span>timezone<span class="token punctuation">.</span>now<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>title<span class="token keyword">class</span> <span class="token class-name">ArticlePost</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment"># 文章栏目的 “一对多” 外键</span>    column <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>        ArticleColumn<span class="token punctuation">,</span>        null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">,</span>        related_name<span class="token operator">=</span><span class="token string">'article'</span>    <span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>栏目的Model有两个字段，“名称”和“创建日期”。</p><p>一篇文章只有一个栏目，而一个栏目可以对应多篇文章，因此建立“一对多”的关系。</p><p>写好模型后记得用<code>makemigrations</code>和<code>migrate</code>指令<strong>迁移数据</strong>。</p><h2 id="列表中显示栏目"><a href="#列表中显示栏目" class="headerlink" title="列表中显示栏目"></a>列表中显示栏目</h2><h3 id="添加测试数据"><a href="#添加测试数据" class="headerlink" title="添加测试数据"></a>添加测试数据</h3><p>模型写好之后就需要几条栏目的数据来进行测试。由于还没有写视图，因此需要善加利用Django自带的后台。</p><p>首先把栏目模型注册到后台：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>admin<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> ArticleColumn<span class="token comment"># 注册文章栏目</span>admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>ArticleColumn<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后就可以在后台中添加栏目的数据条目了：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190129/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE153.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190129/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE153.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>先随便添加了“HTML”、“Java”、“Django”这3条。</p><p>在后台中随便打开一篇文章，“栏目”字段已经静静的在等你了：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190129/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE155.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190129/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE155.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>随机找几篇文章设置不同的<strong>栏目</strong>用于测试。</p><h3 id="重写文章列表"><a href="#重写文章列表" class="headerlink" title="重写文章列表"></a>重写文章列表</h3><p>之前我们用<strong>卡片类型</strong>的UI界面展示文章列表。</p><p>卡片的好处是简洁大方，但是<strong>随着数据的增多</strong>，卡片小小的版面已经不堪重负了。</p><p>因此这里重写<code>list.html</code>模板的列表循环：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">article/list.html...<span class="token comment">&lt;!-- 列表循环 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row mt-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &#123;% for article in articles %&#125;        <span class="token comment">&lt;!-- 文章内容 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- 栏目 --></span>            &#123;% if article.column %&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>                     <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-sm mb-2                        &#123;% if article.column.title == <span class="token punctuation">'</span>Django<span class="token punctuation">'</span> %&#125;                            btn-success                        &#123;% elif article.column.title == <span class="token punctuation">'</span>Java<span class="token punctuation">'</span> %&#125;                            btn-danger                        &#123;% elif article.column.title == <span class="token punctuation">'</span>HTML<span class="token punctuation">'</span> %&#125;                            btn-warning                        &#123;% endif %&#125;                    <span class="token punctuation">"</span></span>                <span class="token punctuation">></span></span>                    &#123;&#123; article.column &#125;&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            &#123;% endif %&#125;            <span class="token comment">&lt;!-- 标题 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>article:article_detail<span class="token punctuation">'</span> article.id %&#125;<span class="token punctuation">"</span></span>                       <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span>                     <span class="token punctuation">></span></span>                        &#123;&#123; article.title &#125;&#125;                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- 摘要 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>                    &#123;&#123; article.body|slice:'100' &#125;&#125;...                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- 注脚 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- 附加信息 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>                    &#123;&#123; article.total_views &#125;&#125; 浏览<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>                    &#123;&#123; article.created|date:'Y-m-d' &#125;&#125; 发布<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> darkred<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>                    &#123;&#123; article.updated|date:'Y-m-d' &#125;&#125; 更新                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    &#123;% endfor %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最主要的改动就是新增了展现“栏目”的按钮。我们甚至还为不同的栏目设置了不同的按钮颜色。</p><p>在附加信息中顺便还把之前没有用到的日期信息也添加上去了。</p><p>来看看效果：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190129/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE159_Dl0zERq.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190129/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE159_Dl0zERq.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>感觉还不错！</p><h2 id="修改写文章功能"><a href="#修改写文章功能" class="headerlink" title="修改写文章功能"></a>修改写文章功能</h2><p>展示已经没问题了，但是发表新文章时还不能选择栏目。</p><p>修改写文章的模板，在表单中新增下面的内容：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/article/create.html...<span class="token comment">&lt;!-- 提交文章的表单 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &#123;% csrf_token %&#125;    <span class="token comment">&lt;!-- 文章标题 --></span>    ...        <span class="token comment">&lt;!-- 文章栏目 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>栏目<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span>                 <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span>                 <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span>        <span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>请选择栏目..<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            &#123;% for column in columns %&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123; column.id &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; column &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            &#123;% endfor %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 文章正文 --></span>    ...    <span class="token comment">&lt;!-- 提交按钮 --></span>    ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>&lt;select&gt;</code>是表单的下拉框选择组件。在这个组件中循环列出所有的栏目数据，并且设置<code>value</code>属性，指定表单提交栏目的<code>id</code>值。</p><p>刷新页面，效果像下面这样：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190129/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE158.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190129/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE158.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>跟之前一样，能够展示了，但是还没有处理表单的视图逻辑。</p><p>修改已有的写文章视图<code>article_create()</code>，让其能够处理表单上传的栏目数据：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token comment"># 引入栏目Model</span><span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> ArticleColumn<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 写文章的视图</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">def</span> <span class="token function">article_create</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"POST"</span><span class="token punctuation">:</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">if</span> article_post_form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                        <span class="token comment"># 新增的代码</span>            <span class="token keyword">if</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">[</span><span class="token string">'column'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'none'</span><span class="token punctuation">:</span>                new_article<span class="token punctuation">.</span>column <span class="token operator">=</span> ArticleColumn<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">[</span><span class="token string">'column'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                        <span class="token comment"># 已有代码</span>            new_article<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token comment"># 新增及修改的代码</span>        columns <span class="token operator">=</span> ArticleColumn<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        context <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">'article_post_form'</span><span class="token punctuation">:</span> article_post_form<span class="token punctuation">,</span> <span class="token string">'columns'</span><span class="token punctuation">:</span> columns <span class="token punctuation">&#125;</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新增代码涉及<code>get</code>和<code>post</code>两部分：</p><ul><li>POST：主要考虑某些文章是可以没有栏目的。因此用<code>if</code>语句判断该文章是否有栏目，如果有，则根据表单提交的<code>value</code>值，关联对应的栏目。</li><li>GET：增加栏目的上下文，以便模板使用。</li></ul><p>测试一下，写文章的栏目功能应该可以正常工作了。</p><h2 id="修改更新视图"><a href="#修改更新视图" class="headerlink" title="修改更新视图"></a>修改更新视图</h2><p>更新文章的视图同样也需要升级一下。</p><p>还是先更改模板：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/article/update.html...<span class="token comment">&lt;!-- 提交文章的表单 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &#123;% csrf_token %&#125;    <span class="token comment">&lt;!-- 文章标题 --></span>    ...    <span class="token comment">&lt;!-- 文章栏目 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>栏目<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span>                 <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span>                 <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span>        <span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>请选择栏目..<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            &#123;% for column in columns %&#125;                &lt;option value="&#123;&#123; column.id &#125;&#125;"                    &#123;% if column.id == article.column.id %&#125;                        selected                    &#123;% endif %&#125;                >                    &#123;&#123; column &#125;&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            &#123;% endfor %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 文章正文 --></span>    ...    <span class="token comment">&lt;!-- 提交按钮 --></span>    ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与前面稍有不同的是，表单中判断了<code>column.id</code>与<code>article.column.id</code>是否相等，如果相等则将其设置为默认值。</p><p>然后修改视图函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token comment"># 更新文章</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">def</span> <span class="token function">article_update</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment"># 判断用户是否为 POST 提交表单数据</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"POST"</span><span class="token punctuation">:</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">if</span> article_post_form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token comment"># 新增的代码</span>            <span class="token keyword">if</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">[</span><span class="token string">'column'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'none'</span><span class="token punctuation">:</span>                article<span class="token punctuation">.</span>column <span class="token operator">=</span> ArticleColumn<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">[</span><span class="token string">'column'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                article<span class="token punctuation">.</span>column <span class="token operator">=</span> <span class="token boolean">None</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment"># 新增及修改的代码</span>        columns <span class="token operator">=</span> ArticleColumn<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        context <span class="token operator">=</span> <span class="token punctuation">&#123;</span>             <span class="token string">'article'</span><span class="token punctuation">:</span> article<span class="token punctuation">,</span>             <span class="token string">'article_post_form'</span><span class="token punctuation">:</span> article_post_form<span class="token punctuation">,</span>            <span class="token string">'columns'</span><span class="token punctuation">:</span> columns<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码逻辑与前面很类似。修改文章的栏目功能，也就完成了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章实现了简单的<strong>栏目功能</strong>，可以舒舒服服对文章进行分类了，强迫症福音啊。</p><p>还有些可以完善的工作，比如：</p><ul><li><p>单击<strong>栏目按钮</strong>显示所有相同栏目的文章。这个功能与之前学过的<a href="https://www.dusaiphoto.com/article/detail/46/">最热文章排序</a>以及<a href="https://www.dusaiphoto.com/article/detail/47/">搜索文章</a>非常的类似。还记得<code>filter()</code>方法吗？稍微麻烦点的地方是你需要考虑栏目、搜索、排序三者的联合查询，因此可能会对原有代码结构做适当的调整。</p><blockquote><p><strong>实在不知道如何去实现的同学，请查看<a href="https://github.com/stacklens/django_blog_tutorial">教程代码</a>文章列表的视图和模板，答案就在里面。</strong></p></blockquote></li><li><p>栏目Model的增删改查。</p><blockquote><p>如果你不想写增删改查，用后台管理栏目是完全可以的。</p></blockquote></li></ul><p>以上内容就不在这里赘述了。留给读者去尝试实现。</p><ul><li>有疑问请在<a href="http://www.dusaiphoto.com/">杜赛的个人网站</a>留言，我会尽快回复。</li><li>或Email私信我：<a href="mailto:&#x64;&#117;&#x73;&#x61;&#x69;&#112;&#x68;&#x6f;&#116;&#x6f;&#x40;&#102;&#x6f;&#x78;&#x6d;&#x61;&#105;&#x6c;&#46;&#99;&#111;&#x6d;">&#x64;&#117;&#x73;&#x61;&#x69;&#112;&#x68;&#x6f;&#116;&#x6f;&#x40;&#102;&#x6f;&#x78;&#x6d;&#x61;&#105;&#x6c;&#46;&#99;&#111;&#x6d;</a></li><li>项目完整代码：<a href="https://github.com/stacklens/django_blog_tutorial">Django_blog_tutorial</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--28.文章标签</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/28.wen-zhang-biao-qian/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/28.wen-zhang-biao-qian/</url>
      
        <content type="html"><![CDATA[<p><strong>“标签”</strong>是作者从文章中提取的<strong>核心词汇</strong>，其他用户可以通过标签快速了解文章的关注点。每一篇文章的标签可能都不一样，并且还可能拥有多个标签，这是与栏目功能不同的。</p><p>好在标签功能也有优秀的三方库：<a href="https://github.com/jazzband/django-taggit">Django-taggit</a>，省得自己动手设计了。快速开发就是这样，能“借用”就不要自己重复劳动。</p><h2 id="安装及设置"><a href="#安装及设置" class="headerlink" title="安装及设置"></a>安装及设置</h2><p>首先在<strong>虚拟环境</strong>中安装Django-taggit：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> django-taggit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装成功后，修改项目设置以添加库：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">my_blog<span class="token operator">/</span>settings<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token string">'taggit'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修改文章模型"><a href="#修改文章模型" class="headerlink" title="修改文章模型"></a>修改文章模型</h2><p>标签是文章Model的属性，因此需要修改文章模型。</p><p>需要注意的是标签引用的不是内置字段，而是库中的<code>TaggableManager</code>，它是处理多对多关系的管理器：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>models<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># Django-taggit</span><span class="token keyword">from</span> taggit<span class="token punctuation">.</span>managers <span class="token keyword">import</span> TaggableManager<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">ArticlePost</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment"># 文章标签</span>    tags <span class="token operator">=</span> TaggableManager<span class="token punctuation">(</span>blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后记得<strong>数据迁移</strong>。</p><h2 id="带标签文章的发表"><a href="#带标签文章的发表" class="headerlink" title="带标签文章的发表"></a>带标签文章的发表</h2><p>修改文章的表单类，让其能够提交标签字段：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>forms<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">ArticlePostForm</span><span class="token punctuation">(</span>forms<span class="token punctuation">.</span>ModelForm<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">,</span> <span class="token string">'body'</span><span class="token punctuation">,</span> <span class="token string">'tags'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后修改发表文章的视图，保存POST中的标签：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">def</span> <span class="token function">article_create</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 已有代码</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"POST"</span><span class="token punctuation">:</span>        article_post_form <span class="token operator">=</span> ArticlePostForm<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>        <span class="token keyword">if</span> article_post_form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            new_article <span class="token operator">=</span> article_post_form<span class="token punctuation">.</span>save<span class="token punctuation">(</span>commit<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            new_article<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token comment"># 新增代码，保存 tags 的多对多关系</span>            article_post_form<span class="token punctuation">.</span>save_m2m<span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是，如果提交的表单使用了<code>commit=False</code>选项，则必须调用<code>save_m2m()</code>才能正确的保存标签，就像普通的多对多关系一样。</p><p>最后就是在发表文章的模板中添加标签的表单项了：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/article/create.html...<span class="token comment">&lt;!-- 提交文章的表单 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    ...        <span class="token comment">&lt;!-- 文章标签 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tags<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>                <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control col-3<span class="token punctuation">"</span></span>                <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tags<span class="token punctuation">"</span></span>                <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tags<span class="token punctuation">"</span></span>        <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行服务器，就可以在发表页面看到效果了：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190211/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE162.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190211/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE162.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>多个标签最好用<strong>英文逗号</strong>进行分隔。<strong>中文逗号</strong>有的版本会报错，干脆就不要去使用了。</p><h2 id="列表中显示标签"><a href="#列表中显示标签" class="headerlink" title="列表中显示标签"></a>列表中显示标签</h2><p>虽然保存标签的功能已经实现了，还得把它显示出来才行。</p><p>显示标签最常用的位置是在<strong>文章列表</strong>中，方便用户筛选感兴趣的文章。</p><p>修改文章列表的模板，将标签显示出来：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/article/list.html...<span class="token comment">&lt;!-- 栏目 --></span>...<span class="token comment">&lt;!-- 标签 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>    &#123;% for tag in article.tags.all %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span>           <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>badge badge-secondary<span class="token punctuation">"</span></span>         <span class="token punctuation">></span></span>            &#123;&#123; tag &#125;&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    &#123;% endfor %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>链接中的<code>class</code>中是Bootstrap定义的<a href="https://getbootstrap.com/docs/4.1/components/badge/">徽章样式</a>。</p><p>插入位置紧靠在栏目按钮的后面。当然你想放到其他位置也是完全可以的。</p><p>刷新列表页面看看效果：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190211/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE164.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190211/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE164.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><h2 id="标签过滤"><a href="#标签过滤" class="headerlink" title="标签过滤"></a>标签过滤</h2><p>有时候用户想搜索带有某一个标签的所有文章，现在就来做这个功能。</p><p>与搜索功能一样，只需要调取数据时用<code>filter()</code>方法过滤结果就可以了。</p><p>修改<code>&lt;a&gt;</code>标签中的<code>href</code>，使其带有<code>tag</code>参数返回到View中：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/article/list.html...<span class="token comment">&lt;!-- 标签 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>    &#123;% for tag in article.tags.all %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>article:article_list<span class="token punctuation">'</span> %&#125;?tag=&#123;&#123; tag &#125;&#125;<span class="token punctuation">"</span></span>           <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>badge badge-secondary<span class="token punctuation">"</span></span>         <span class="token punctuation">></span></span>            &#123;&#123; tag &#125;&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    &#123;% endfor %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在View中取得<code>tag</code>的值，并进行搜索。</p><p>下面的代码将<code>article_list()</code>函数完整写出来了（包括上一章末尾没讲的栏目查询），方便读者比对。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">def</span> <span class="token function">article_list</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 从 url 中提取查询参数</span>    search <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'search'</span><span class="token punctuation">)</span>    order <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'order'</span><span class="token punctuation">)</span>    column <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'column'</span><span class="token punctuation">)</span>    tag <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'tag'</span><span class="token punctuation">)</span>    <span class="token comment"># 初始化查询集</span>    article_list <span class="token operator">=</span> ArticlePost<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 搜索查询集</span>    <span class="token keyword">if</span> search<span class="token punctuation">:</span>        article_list <span class="token operator">=</span> article_list<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>            Q<span class="token punctuation">(</span>title__icontains<span class="token operator">=</span>search<span class="token punctuation">)</span> <span class="token operator">|</span>            Q<span class="token punctuation">(</span>body__icontains<span class="token operator">=</span>search<span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        search <span class="token operator">=</span> <span class="token string">''</span>    <span class="token comment"># 栏目查询集</span>    <span class="token keyword">if</span> column <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">and</span> column<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        article_list <span class="token operator">=</span> article_list<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>column<span class="token operator">=</span>column<span class="token punctuation">)</span>    <span class="token comment"># 标签查询集</span>    <span class="token keyword">if</span> tag <span class="token keyword">and</span> tag <span class="token operator">!=</span> <span class="token string">'None'</span><span class="token punctuation">:</span>        article_list <span class="token operator">=</span> article_list<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>tags__name__in<span class="token operator">=</span><span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># 查询集排序</span>    <span class="token keyword">if</span> order <span class="token operator">==</span> <span class="token string">'total_views'</span><span class="token punctuation">:</span>        article_list <span class="token operator">=</span> article_list<span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'-total_views'</span><span class="token punctuation">)</span>    paginator <span class="token operator">=</span> Paginator<span class="token punctuation">(</span>article_list<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    page <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'page'</span><span class="token punctuation">)</span>    articles <span class="token operator">=</span> paginator<span class="token punctuation">.</span>get_page<span class="token punctuation">(</span>page<span class="token punctuation">)</span>        <span class="token comment"># 需要传递给模板（templates）的对象</span>    context <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'articles'</span><span class="token punctuation">:</span> articles<span class="token punctuation">,</span>        <span class="token string">'order'</span><span class="token punctuation">:</span> order<span class="token punctuation">,</span>        <span class="token string">'search'</span><span class="token punctuation">:</span> search<span class="token punctuation">,</span>        <span class="token string">'column'</span><span class="token punctuation">:</span> column<span class="token punctuation">,</span>        <span class="token string">'tag'</span><span class="token punctuation">:</span> tag<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'article/list.html'</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意Django-taggit中<strong>标签过滤</strong>的写法：<code>filter(tags__name__in=[tag])</code>，意思是在<code>tags</code>字段中过滤<code>name</code>为<code>tag</code>的数据条目。赋值的字符串<code>tag</code>用方括号包起来。</p><blockquote><p>之所以这样写是因为Django-taggit还支持多标签的联合查询，比如：</p><p><code>Model.objects.filter(tags__name__in=[&quot;tag1&quot;, &quot;tag2&quot;])</code></p></blockquote><p>为了实现带参数的交叉查询，还要将<strong>翻页</strong>等位置的<code>href</code>修改一下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/article/list.html...<span class="token comment">&lt;!-- 所有类似地方加上 tag 参数，如排序、翻页等 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>article:article_list<span class="token punctuation">'</span> %&#125;?search=&#123;&#123; search &#125;&#125;&amp;column=&#123;&#123; column &#125;&#125;&amp;tag=&#123;&#123; tag &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    最新<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>article:article_list<span class="token punctuation">'</span> %&#125;?order=total_views&amp;search=&#123;&#123; search &#125;&#125;&amp;column=&#123;&#123; column &#125;&#125;&amp;tag=&#123;&#123; tag &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    最热<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>?page=1&amp;order=&#123;&#123; order &#125;&#125;&amp;search=&#123;&#123; search &#125;&#125;&amp;column=&#123;&#123; column &#125;&#125;&amp;tag=&#123;&#123; tag &#125;&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token entity named-entity" title="&laquo;">&amp;laquo;</span> 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 上面3条是举例，其他类似地方也请补充进去 --></span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>标签过滤功能就完成了。</p><p>Django-taggit更多的用法请阅读官方文档：<a href="https://django-taggit.readthedocs.io/en/latest/index.html">Django-taggit</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章学习了使用Django-taggit来完成标签功能。</p><p>在学习阶段，你可以<strong>不借助他人的轮子，自己实现功能</strong>：瞎折腾对掌握基础有很大帮助。</p><p>实际开发时，又分为两种情况：</p><ul><li><strong>浅层需求某项通用功能，开发完成后改动不大</strong>：此类功能建议尽量使用轮子，加快开发效率。人生苦短，能节约的时间，一秒钟都不要浪费。</li><li><strong>需要大量定制化的功能，开发完成后需要频繁改动</strong>：此类功能因为经常对底层代码进行改动，与其在别人的代码上修修补补，还不如自己从头写了。自己的代码不仅熟悉，而且都是为定制化而生的。</li></ul><p>到底如何选择，就根据你的喜欢进行斟酌了。</p><hr><ul><li>有疑问请在<a href="http://www.dusaiphoto.com/">杜赛的个人网站</a>留言，我会尽快回复。</li><li>或Email私信我：<a href="mailto:&#x64;&#117;&#115;&#97;&#105;&#x70;&#104;&#x6f;&#x74;&#x6f;&#x40;&#x66;&#111;&#120;&#109;&#97;&#105;&#108;&#46;&#99;&#x6f;&#109;">&#x64;&#117;&#115;&#97;&#105;&#x70;&#104;&#x6f;&#x74;&#x6f;&#x40;&#x66;&#111;&#120;&#109;&#97;&#105;&#108;&#46;&#99;&#x6f;&#109;</a></li><li>项目完整代码：<a href="https://github.com/stacklens/django_blog_tutorial">Django_blog_tutorial</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--29.文章标题图</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/29.wen-zhang-biao-ti-tu/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/29.wen-zhang-biao-ti-tu/</url>
      
        <content type="html"><![CDATA[<p>现在虽然博客的功能大都实现了，但是界面还是比较朴素，特别是首页的文章列表几乎全是文字，看多了难免疲劳。因此，给每个文章标题配一张<strong>标题图</strong>，不仅美观，用户也能通过图片快速了解文章内容。实际上大部分社交网站也都是这么干的，毕竟人的天性就是懒，能看图就坚决不看字。</p><p>在<a href="https://www.dusaiphoto.com/article/detail/38/">上传用户头像</a>章节中，我们已经接触过上传、展示图片了。标题图的实现也差不多，不同的是本章会更近一步，<strong>对图片进行缩放</strong>等处理，使页面整洁美观、并且高效。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>与用户头像类似，标题图是属于每篇博文自己的“资产”，因此需要<strong>修改model</strong>，新建一个字段：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>models<span class="token punctuation">.</span>py<span class="token keyword">class</span> <span class="token class-name">ArticlePost</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment"># 文章标题图</span>    avatar <span class="token operator">=</span> models<span class="token punctuation">.</span>ImageField<span class="token punctuation">(</span>upload_to<span class="token operator">=</span><span class="token string">'article/%Y%m%d/'</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意上传地址中的<code>%Y%m%d</code>是日期格式化的写法。比如上传时间是2019年2月26日，则标题图会上传到<code>media/article/20190226</code>这个目录中。</p><p>记得<strong>数据迁移</strong>。</p><p>标题图通常在创建新文章的时候就设置好了，而新文章是通过表单上传到数据库中的。因此接下来就是<strong>修改发表文章的表单类</strong>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>forms<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">ArticlePostForm</span><span class="token punctuation">(</span>forms<span class="token punctuation">.</span>ModelForm<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">,</span> <span class="token string">'body'</span><span class="token punctuation">,</span> <span class="token string">'tags'</span><span class="token punctuation">,</span> <span class="token string">'avatar'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>增加了<code>avatar</code>字段而已，没有新内容。</p><p>下一步就是<strong>修改视图</strong>。因为POST的表单中包含了图片文件，所以要将<code>request.FILES</code>也一并绑定到表单类中，否则图片无法正确保存：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">def</span> <span class="token function">article_create</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"POST"</span><span class="token punctuation">:</span>        <span class="token comment"># 增加 request.FILES</span>        article_post_form <span class="token operator">=</span> ArticlePostForm<span class="token punctuation">(</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">,</span> request<span class="token punctuation">.</span>FILES<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很好，功能差不多已经通了，接下来就是对图片进行处理。</p><h2 id="处理图片"><a href="#处理图片" class="headerlink" title="处理图片"></a>处理图片</h2><p>写代码之前先构思一下需要进行怎样的处理：</p><ul><li>标题图对画质没有太高的要求，因此需要<strong>缩小图片的体积</strong>，以便提高网页的加载速度。</li><li>其次还需要对图片的长宽进行规范化。我比较喜欢将图片的<strong>宽度设置得相同</strong>，这样标题可以比较整齐。</li></ul><p>下一个问题是，代码应该写到什么地方呢？似乎在<strong>model</strong>、<strong>form</strong>或者<strong>view</strong>里处理图片都可以。在这里我打算把代码写到<strong>model</strong>中去，这样不管你在任何地方上传图片（包括后台中！），图片都会得到处理。</p><p>想好之后，就要行动了。还记得Pillow这个库吗，我们很早就把它安装好了，现在是使用它的时候了：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>models<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 记得导入！</span><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">class</span> <span class="token class-name">ArticlePost</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment"># 前面写好的代码</span>    avatar <span class="token operator">=</span> models<span class="token punctuation">.</span>ImageField<span class="token punctuation">(</span>upload_to<span class="token operator">=</span><span class="token string">'article/%Y%m%d/'</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment"># 保存时处理图片</span>    <span class="token keyword">def</span> <span class="token function">save</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 调用原有的 save() 的功能</span>        article <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span>ArticlePost<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token comment"># 固定宽度缩放图片大小</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>avatar <span class="token keyword">and</span> <span class="token keyword">not</span> kwargs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'update_fields'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            image <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>avatar<span class="token punctuation">)</span>            <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">=</span> image<span class="token punctuation">.</span>size            new_x <span class="token operator">=</span> <span class="token number">400</span>            new_y <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>new_x <span class="token operator">*</span> <span class="token punctuation">(</span>y <span class="token operator">/</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span>            resized_image <span class="token operator">=</span> image<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">(</span>new_x<span class="token punctuation">,</span> new_y<span class="token punctuation">)</span><span class="token punctuation">,</span> Image<span class="token punctuation">.</span>ANTIALIAS<span class="token punctuation">)</span>            resized_image<span class="token punctuation">.</span>save<span class="token punctuation">(</span>self<span class="token punctuation">.</span>avatar<span class="token punctuation">.</span>path<span class="token punctuation">)</span>        <span class="token keyword">return</span> article    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码不多，但是有很多细节，值得仔细推敲。</strong>不急，一行一行来：</p><ul><li><p><code>save()</code>是model内置的方法，它会在model实例每次保存时调用。这里改写它，将处理图片的逻辑“塞进去”。</p></li><li><p><code>super(ArticlePost, self).save(*args, **kwargs)</code>的作用是调用父类中原有的<code>save()</code>方法，即将model中的字段数据保存到数据库中。因为图片处理是基于已经保存的图片的，所以<strong>这句一定要在处理图片之前执行</strong>，否则会得到找不到原始图片的错误。</p></li><li><p>博文的标题图不是必须的，<code>if</code>中的<code>self.avatar</code>剔除掉没有标题图的文章，这些文章不需要处理图片。</p></li><li><p>不太好理解的是<code>if</code>中的这个<code>not kwargs.get(&#39;update_fields&#39;)</code>。还记得<code>article_detail()</code>视图中为了统计浏览量而调用了<code>save(update_fields=[&#39;total_views&#39;])</code>吗？没错，就是为了排除掉统计浏览量调用的<code>save()</code>，免得每次用户进入文章详情页面都要处理标题图，太影响性能了。</p><blockquote><p>这种判断方法虽然简单，但会造成模型和视图的紧耦合。读者在实践中可探索更优雅的方法，比如专门设置一个参数，用来判断是哪类视图调用了save()。</p></blockquote></li><li><p>接下来都是Pillow处理图片的流程了：打开原始图片，取得分辨率，将新图片的宽度设置为400并根据比例缩小高度，最后用新图片将原始图片覆盖掉。<code>Image.ANTIALIAS</code>表示缩放采用平滑滤波。</p></li><li><p>最后一步，将父类<code>save()</code>返回的结果原封不动的返回去。</p></li></ul><p>完美！</p><h2 id="模板与测试"><a href="#模板与测试" class="headerlink" title="模板与测试"></a>模板与测试</h2><p>剩下的工作就比较简单了。</p><p>修改<strong>发表文章的模板</strong>，让表单能够上传图片：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/article/create.html...<span class="token comment">&lt;!-- 记得增加 enctype ！ --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">...</span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    ...    <span class="token comment">&lt;!-- 文章标题图 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>标题图<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control-file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后<strong>修改文章列表模板</strong>，让其能够展现标题图。</p><p>为了美观，这里稍微改动了列表循环的整体结构：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/article/list.html...<span class="token comment">&lt;!-- 列表循环 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row mt-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &#123;% for article in articles %&#125;        <span class="token comment">&lt;!-- 标题图 --></span>        &#123;% if article.avatar %&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123; article.avatar.url &#125;&#125;<span class="token punctuation">"</span></span>                      <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span>                      <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">max-width</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span> <span class="token property">border-radius</span><span class="token punctuation">:</span> 20px</span><span class="token punctuation">"</span></span></span>                <span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        &#123;% endif %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- 栏目 --></span>            ...            <span class="token comment">&lt;!-- 标签 --></span>            ...            ...                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">/></span></span>    &#123;% endfor %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来又是喜闻乐见的测试环节。</p><p>启动服务器，打开发表文章页面：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190226/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE173.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190226/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE173.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>选择几张分辨率各不相同的图片作为标题图，</p><p>发表几篇文章并回到文章列表页面：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190226/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE175.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190226/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE175.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>看起来似乎不错。</p><p>查看一下media目录下实际保存的图片：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190226/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE176.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190226/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE176.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>确实保存到想要的目录下，并且左下角显示图片的宽度全都为400了。</p><h2 id="扫尾工作"><a href="#扫尾工作" class="headerlink" title="扫尾工作"></a>扫尾工作</h2><p>功能已经实现了，但还有扫尾工作需要去做：</p><ul><li><p>需要对上传的图片做更多的验证工作，比如上传的文件是否为图片、分辨率是否满足要求。虽然在个人博客项目中这些验证并不是特别重要，但在其他项目中就说不好了：谁知道用户会上传些什么奇奇怪怪的东西？</p></li><li><p>编辑文章、删除文章也同样需要处理上传的图片。你还可以将缩放分辨率的技术应用到用户头像上，比如裁剪成方形。</p><blockquote><p>注意：删除数据库中的avatar条目只是断开了数据表和图片的链接而已，实际上图片还保存在原来的位置。要彻底删除图片，你还得写操作系统文件的代码才行。</p></blockquote></li></ul><p>怎么实现这些功能就不赘述了，留给读者自己去折腾吧。</p><h2 id="编辑文章"><a href="#编辑文章" class="headerlink" title="编辑文章"></a>编辑文章</h2><blockquote><p>2019/06/24 新增本节</p></blockquote><p>有不少读者在将<strong>标题图</strong>和<strong>标签</strong>功能添加到<strong>编辑文章</strong>页面时遇到了困难，所以提示一下如何实现。</p><p>其实大家的思路是没错的，编辑和创建差不太多，唯一区别是编辑功能还需要把旧的数据给展现出来。关键是要注意几个问题：</p><ul><li><strong>标题图</strong>是文件，你应该在<code>request.FILES</code>里获取它，而不是<code>request.POST</code></li><li><strong>tags</strong>不是普通的字段，<code>article.tags</code>是取不到值的，你应该用<a href="https://django-taggit.readthedocs.io/en/latest/api.html">官方文档</a>给的<strong>接口</strong>去获取、设置数据</li></ul><p>所以<strong>视图相关代码</strong>应该这样写：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token comment"># 更新文章</span><span class="token decorator annotation punctuation">@login_required</span><span class="token punctuation">(</span>login_url<span class="token operator">=</span><span class="token string">'/userprofile/login/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">article_update</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"POST"</span><span class="token punctuation">:</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">if</span> article_post_form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token keyword">if</span> request<span class="token punctuation">.</span>FILES<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'avatar'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                article<span class="token punctuation">.</span>avatar <span class="token operator">=</span> request<span class="token punctuation">.</span>FILES<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'avatar'</span><span class="token punctuation">)</span>            article<span class="token punctuation">.</span>tags<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token operator">*</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'tags'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clear<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>            article<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        context <span class="token operator">=</span> <span class="token punctuation">&#123;</span>             <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token string">'tags'</span><span class="token punctuation">:</span> <span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> article<span class="token punctuation">.</span>tags<span class="token punctuation">.</span>names<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>tags.set()</code>和<code>tags.names()</code>就是库提供的接口了，分别用于更新数据和获取标签名。注意<code>tags.set()</code>是如何将序列分隔并解包的。</li><li>渲染空表单时用到了列表生成器将数据转换为字符串。</li></ul><p><strong>模板相关代码：</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/article/update.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &#123;% csrf_token %&#125;    ...    <span class="token comment">&lt;!-- 文章标题图 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>标题图<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control-file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 文章标签--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tags<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control col-3<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tags<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tags<span class="token punctuation">"</span></span>            <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123; tags &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>enctype=&quot;multipart/form-data&quot;</code>这个属性的意思是表单提交时不对字符编码。表单里带有文件时，一定要加上它。</p><p>核心代码大概就这样，我的<a href="https://github.com/stacklens/django_blog_tutorial">GitHub仓库master分支</a>更新了此部分的完整代码，提供给大家参考。</p><p>此外还有些细节问题可以优化，读者就自己去试试看吧！</p><h2 id="轮子"><a href="#轮子" class="headerlink" title="轮子"></a>轮子</h2><p>虽然本文是自己动手写的代码（严格说来Pillow也是轮子），但想必你也猜到了，还有更加智能的轮子：<a href="https://github.com/matthewwithanm/django-imagekit">django-imagekit</a>，这个库可以直接集成到model里面，比如这样：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>models<span class="token punctuation">.</span>py<span class="token comment"># 引入imagekit</span><span class="token keyword">from</span> imagekit<span class="token punctuation">.</span>models <span class="token keyword">import</span> ProcessedImageField<span class="token keyword">from</span> imagekit<span class="token punctuation">.</span>processors <span class="token keyword">import</span> ResizeToFit<span class="token keyword">class</span> <span class="token class-name">ArticlePost</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        avatar <span class="token operator">=</span> ProcessedImageField<span class="token punctuation">(</span>        upload_to<span class="token operator">=</span><span class="token string">'article/%Y%m%d'</span><span class="token punctuation">,</span>        processors<span class="token operator">=</span><span class="token punctuation">[</span>ResizeToFit<span class="token punctuation">(</span>width<span class="token operator">=</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">'JPEG'</span><span class="token punctuation">,</span>        options<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'quality'</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字段中定义好了上传位置、处理规则、存储格式以及图片质量，你不需要写任何处理图片的代码了。</p><p>更多的用法见<a href="https://github.com/matthewwithanm/django-imagekit">官方介绍</a>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章学习了如何上传并处理文章的标题图，从此博客首页就有了漂亮的外观。</p><p>需要指出的是，个人博客所采用的服务器通常性能不佳，用来保存文章缩略图等小尺寸的图片倒还好，但是<strong>千万不要存储大尺寸的图片文件</strong>，否则用户等待几分钟都刷不开你的图片，那是很悲剧的。</p><p>因此建议你将大尺寸的图片、视频等放到专业的云对象存储服务商中，比如<a href="https://www.qiniu.com/">七牛云</a>、<a href="https://www.upyun.com/">又拍云</a>等，在你存储量很小时（10G以内）是花不了多少钱的。</p><hr><ul><li>有疑问请在<a href="http://www.dusaiphoto.com/">杜赛的个人网站</a>留言，我会尽快回复。</li><li>或Email私信我：<a href="mailto:&#x64;&#x75;&#115;&#97;&#x69;&#x70;&#104;&#x6f;&#x74;&#111;&#64;&#102;&#111;&#x78;&#109;&#x61;&#105;&#108;&#x2e;&#99;&#x6f;&#x6d;">&#x64;&#x75;&#115;&#97;&#x69;&#x70;&#104;&#x6f;&#x74;&#111;&#64;&#102;&#111;&#x78;&#109;&#x61;&#105;&#108;&#x2e;&#99;&#x6f;&#x6d;</a></li><li>项目完整代码：<a href="https://github.com/stacklens/django_blog_tutorial">Django_blog_tutorial</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--30.富文本编辑器</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/30.fu-wen-ben-bian-ji-qi/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/30.fu-wen-ben-bian-ji-qi/</url>
      
        <content type="html"><![CDATA[<p>前面我们已经实现了用Markdown语法写文章了。但是文章的评论用Markdown就不太合适了，你不能强求用户也花时间去熟悉语法啊。另外评论中通常还有表情、带颜色的字体等功能，这些也是Markdown不具备的。</p><p>因此富文本编辑器<a href="https://github.com/django-ckeditor/django-ckeditor">Django-ckeditor</a>就派上用场了。</p><h2 id="在后台使用Ckeditor"><a href="#在后台使用Ckeditor" class="headerlink" title="在后台使用Ckeditor"></a>在后台使用Ckeditor</h2><p>在<strong>虚拟环境</strong>中安装django-ckeditor：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token operator">></span> pip <span class="token function">install</span> django-ckeditor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装成功后还是老规矩，在<code>settings.py</code>中注册app：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">my_blog<span class="token operator">/</span>settings<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token string">'ckeditor'</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来需要修改模型了。用django-ckeditor库自己的富文本字段<code>RichTextField</code>替换普通的文本字段<code>TextField</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">comment<span class="token operator">/</span>models<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># django-ckeditor</span><span class="token keyword">from</span> ckeditor<span class="token punctuation">.</span>fields <span class="token keyword">import</span> RichTextField<span class="token keyword">class</span> <span class="token class-name">Comment</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment"># 之前为 body = models.TextField()</span>    body <span class="token operator">=</span> RichTextField<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>记得每次修改模型后要<strong>迁移数据</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token operator">></span> python manage.py makemigrations<span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token operator">></span> python manage.py migrate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>为方便测试，修改<code>comment/admin.py</code>文件，将评论模块注册到后台中：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">comment<span class="token operator">/</span>admin<span class="token punctuation">.</span>py<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Commentadmin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>Comment<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动服务器，进入后台的评论页面，发现已经可以使用django-ckeditor了：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190321/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE178.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190321/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE178.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>功能相当齐全，字体、字号、颜色、链接、表情应有尽有。</p><p>如果我只需要部分功能怎么办呢？比如<strong>插入flash动画</strong>基本就用不到。另外似乎也没看到<strong>插入代码块</strong>的功能。</p><p><code>ckeditor</code>允许你在<code>settings.py</code>中进行自定义配置：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">my_blog<span class="token operator">/</span>settings<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>CKEDITOR_CONFIGS <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment"># django-ckeditor默认使用default配置</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment"># 编辑器宽度自适应</span>        <span class="token string">'width'</span><span class="token punctuation">:</span><span class="token string">'auto'</span><span class="token punctuation">,</span>        <span class="token string">'height'</span><span class="token punctuation">:</span><span class="token string">'250px'</span><span class="token punctuation">,</span>        <span class="token comment"># tab键转换空格数</span>        <span class="token string">'tabSpaces'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>        <span class="token comment"># 工具栏风格</span>        <span class="token string">'toolbar'</span><span class="token punctuation">:</span> <span class="token string">'Custom'</span><span class="token punctuation">,</span>        <span class="token comment"># 工具栏按钮</span>        <span class="token string">'toolbar_Custom'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token comment"># 表情 代码块</span>            <span class="token punctuation">[</span><span class="token string">'Smiley'</span><span class="token punctuation">,</span> <span class="token string">'CodeSnippet'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>             <span class="token comment"># 字体风格</span>            <span class="token punctuation">[</span><span class="token string">'Bold'</span><span class="token punctuation">,</span> <span class="token string">'Italic'</span><span class="token punctuation">,</span> <span class="token string">'Underline'</span><span class="token punctuation">,</span> <span class="token string">'RemoveFormat'</span><span class="token punctuation">,</span> <span class="token string">'Blockquote'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token comment"># 字体颜色</span>            <span class="token punctuation">[</span><span class="token string">'TextColor'</span><span class="token punctuation">,</span> <span class="token string">'BGColor'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token comment"># 链接</span>            <span class="token punctuation">[</span><span class="token string">'Link'</span><span class="token punctuation">,</span> <span class="token string">'Unlink'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token comment"># 列表</span>            <span class="token punctuation">[</span><span class="token string">'NumberedList'</span><span class="token punctuation">,</span> <span class="token string">'BulletedList'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token comment"># 最大化</span>            <span class="token punctuation">[</span><span class="token string">'Maximize'</span><span class="token punctuation">]</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token comment"># 加入代码块插件</span>        <span class="token string">'extraPlugins'</span><span class="token punctuation">:</span> <span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'codesnippet'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>toolbar_Custom</code>中定义需要使用的功能模块；没列出的功能就不再显示了。代码块功能是编辑器自带的插件，需要在<code>extraPlugins</code>中指定使用。效果如下：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190321/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE180.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190321/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE180.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>编辑富文本搞定后，还需要在前台界面中展示出来。富文本是以类似<code>html</code>的格式进行保存的，因此还要在展示评论的代码加入<code>|safe</code>过滤器，防止浏览器进行转义。</p><p>修改<code>detail.html</code>中展示评论的部分代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/article/detail.html...<span class="token comment">&lt;!-- 显示评论 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>共有&#123;&#123; comments.count &#125;&#125;条评论<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    &#123;% for comment in comments %&#125;        ...        <span class="token comment">&lt;!-- 修改这里 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>&#123;&#123; comment.body|safe &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    &#123;% endfor %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入文章详情页面看看效果：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190321/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE181.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190321/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE181.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><h2 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h2><p>代码高亮需要添加额外的插件<strong>Prism</strong>。在<a href="https://ckeditor.com/cke4/addon/prism">Prism</a>插件官方页面下载（也可以点击<a href="https://download.ckeditor.com/prism/releases/prism_1.0.1.zip">这里</a>直接下载）后，将解压出来的<code>prism</code>放到静态文件目录 <code>static\ckeditor\ckeditor\plugins\prism</code> 中。</p><blockquote><p>也可以将其放到 <code>env\Lib\site-packages\ckeditor\static\ckeditor\ckeditor\plugins</code> 目录，<strong>env</strong>是你创建的虚拟环境的目录。之前你安装的所有库都在这个env目录中的。不推荐。</p></blockquote><p>然后在<a href="https://prismjs.com/download.html#themes=prism-okaidia&languages=markup+css+clike+javascript+python&plugins=line-numbers">Prism官网</a>选择主题：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190321/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE185_%E6%8B%B7%E8%B4%9D.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190321/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE185_%E6%8B%B7%E8%B4%9D.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><ul><li>根据喜好选择一个喜欢的主题</li><li>然后选择需要高亮的语言。不清楚就可以全选</li><li>勾选行号插件</li><li>最后点击<code>DOWNLOAD CSS</code>下载样式</li></ul><p>在<code>static</code>目录中新建<code>prism</code>目录，将下载好的CSS文件放进去。</p><blockquote><p>注意这里的static是项目中的静态文件目录（与前面的章节相同），而不是env文件夹中的static目录。</p></blockquote><p>然后在需要代码高亮的<strong>模板文件</strong>中引用prism的静态文件，对代码进行渲染：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/article/detail.html...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% static <span class="token punctuation">'</span>ckeditor/ckeditor/plugins/prism/lib/prism/prism_patched.min.js<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% static <span class="token punctuation">'</span>prism/prism.css<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将<strong>Prism</strong>、<strong>widget</strong>、<strong>lineutils</strong>插件添加到配置文件中。后面两个编辑器自带，不用单独下载，添上就可以了：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">my_blog<span class="token operator">/</span>settings<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>CKEDITOR_CONFIGS <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment"># 添加 Prism 相关插件</span>        <span class="token string">'extraPlugins'</span><span class="token punctuation">:</span> <span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'codesnippet'</span><span class="token punctuation">,</span> <span class="token string">'prism'</span><span class="token punctuation">,</span> <span class="token string">'widget'</span><span class="token punctuation">,</span> <span class="token string">'lineutils'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就完成了：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190321/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE184.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190321/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE184.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>代码高亮效果不错！</p><h2 id="在前台使用Ckeditor"><a href="#在前台使用Ckeditor" class="headerlink" title="在前台使用Ckeditor"></a>在前台使用Ckeditor</h2><p>为了让用户在前台也能使用富文本编辑器，还得对代码稍加改动。</p><p>首先需要把评论的表单传递到文章详情页面中。因此修改<code>article_detail</code>视图：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 引入评论表单</span><span class="token keyword">from</span> comment<span class="token punctuation">.</span>forms <span class="token keyword">import</span> CommentForm<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 文章详情</span><span class="token keyword">def</span> <span class="token function">article_detail</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment"># 引入评论表单</span>    comment_form <span class="token operator">=</span> CommentForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    context <span class="token operator">=</span> <span class="token punctuation">&#123;</span>         <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token string">'comment_form'</span><span class="token punctuation">:</span> comment_form<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后将<code>detail.html</code>原来评论表单中的正文部分（即前面章节写的<code>&lt;textarea&gt;</code>）替换如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/article/detail.html...<span class="token comment">&lt;!-- 发表评论 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">...</span><span class="token punctuation">></span></span>&#123;% csrf_token %&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- 将之前的&lt;textarea>替换掉 --></span>        <span class="token comment">&lt;!-- &lt;textarea type="text"                        class="form-control"                        id="body"                        name="body"                        rows="2">&lt;/textarea>  --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            &#123;&#123; comment_form.media &#125;&#125;            &#123;&#123; comment_form.body &#125;&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 提交按钮 --></span>    ...                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中的<code>comment_form.media</code>是编辑器自身的渲染代码，<code>comment_form.body</code>则是评论正文字段。</p><p>看看效果：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190321/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE188.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190321/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE188.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>不错，编辑器已经可以正常使用了，但还有一个小问题：似乎编辑器宽度没有自适应，右边大片白白的空间也太浪费了。继续努力。</p><h2 id="宽度自适应"><a href="#宽度自适应" class="headerlink" title="宽度自适应"></a>宽度自适应</h2><p>首先在配置文件中将宽度设置为<code>auto</code>，这一步我们已经做好了。</p><p>Ckeditor编辑器本身有一个<code>inline-block</code>的样式，阻碍了自适应效果，需要用<code>Jquery</code>语法将其清除掉。在详情页面底部加入代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/article/detail.html<span class="token comment">&lt;!-- 注意这是错误的示范！ --></span>...<span class="token comment">&lt;!-- 新增代码 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".django-ckeditor-widget"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeAttr</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 这个已经有了 --></span>&#123;% endblock content %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>$</code>符号代表Jquery语句。这句的意思是：找到页面中<code>class=&#39;django-ckeditor-widget&#39;</code>的容器，然后删除这个容器的<code>style</code>属性。</p><p><strong>看似没什么问题，然而Bug藏在细节中</strong>。注意这是个Jquery语句，那么就要求运行之前先载入<code>Jquery.js</code>。然而在渲染页面时，包含<code>$</code>语句的<code>&#123;% block content %&#125;</code>会插入到<code>base.html</code>模板的<code>Jquery.js</code>标签的前面，导致语句不会生效，并且控制台会报出<code>$ is not defined</code>的错误。</p><blockquote><p>比较容易想到的办法是将引入Jquery.js的标签提到更顶部的位置，在block模板插入前就加载。这样做的问题是JS文件加载通常较慢，它会阻塞后面的代码，从而减缓页面整体加载速度。本文不采用这种办法。</p></blockquote><p>解决方案是在<code>base.html</code>中新增专门用于拼接<code>JavaScript</code>脚本的位置，命名为<code>&#123;% block script %&#125;</code>。注意它必须放置在<code>Jquery</code>标签的后面：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/base.html...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    ...    <span class="token comment">&lt;!-- 已有代码 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% static <span class="token punctuation">'</span>jquery/jquery-3.3.1.js<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    ...    <span class="token comment">&lt;!-- 新增代码 --></span>    &#123;% block script %&#125;&#123;% endblock script %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后将<code>detail.html</code>中的JS代码放到这个块中：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/article/detail.html...&#123;% block script %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".django-ckeditor-widget"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeAttr</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>&#123;% endblock script %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方法可以灵活的定义JS脚本的运行顺序，并且代码看起来更加整洁。推荐所有的JS代码都采取这种方法插入。</p><p>刷新页面，编辑器就能够宽度自适应了：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190321/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE182.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190321/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE182.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>发表含有代码块的评论，详情页面的显示如下：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190321/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE183.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190321/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE183.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>现在，博文和其评论都可以漂亮的排版了。对于有些不喜欢Markdown的人来说，甚至可以连博文都使用<code>django-cdeditor</code>提供的富文本编辑器。我自己还是倾向用Markdown写文章：写作效率比好看更重要，并且主流网站几乎都支持Markdown，多平台发稿很方便。</p><ul><li>有疑问请在<a href="http://www.dusaiphoto.com/">杜赛的个人网站</a>留言，我会尽快回复。</li><li>或Email私信我：<a href="mailto:&#100;&#x75;&#x73;&#97;&#105;&#112;&#104;&#111;&#116;&#111;&#x40;&#102;&#x6f;&#x78;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;">&#100;&#x75;&#x73;&#97;&#105;&#112;&#104;&#111;&#116;&#111;&#x40;&#102;&#x6f;&#x78;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;</a></li><li>项目完整代码：<a href="https://github.com/stacklens/django_blog_tutorial">Django_blog_tutorial</a></li></ul><blockquote><p>感谢<a href="http://www.aaron-zhao.com/post/1/">Aaron Zhao 的个人博客</a>提供了本文的参考。博主还讲解了django-ckeditor上传图片的设置，有兴趣可以前往了解。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--31.四个重要的小功能</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/31.si-ge-chong-yao-de-xiao-gong-neng/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/31.si-ge-chong-yao-de-xiao-gong-neng/</url>
      
        <content type="html"><![CDATA[<p>本章集中介绍四个重要的小功能：<strong>回到顶部浮动按钮</strong>、<strong>矢量图标</strong>、<strong>页脚沉底</strong>和<strong>粘性侧边栏</strong>。</p><p>这几个功能与Django基本没啥关系，更多的是前端知识，但是对博客网站都很重要，问的读者也比较多，因此也集中讲一下好了。</p><h2 id="回到顶部浮动按钮"><a href="#回到顶部浮动按钮" class="headerlink" title="回到顶部浮动按钮"></a>回到顶部浮动按钮</h2><p>当用户拜读完你的博文后，可能想回到文章开头重新阅读，或者审视其中的某些内容。如果文章内容较多，不停滑动滚轮回页面顶部未免有点太让人烦躁了。</p><p>一种解决办法是增加一个<strong>回到顶部的浮动按钮</strong>。当页面向下滚动到某个位置后，按钮就呈现在页面右下角；点击按钮，页面就回到顶部。这个功能 Bootstrap 4 似乎没有提供，但也不复杂，就自己用 JavaScript 和 CSS 写吧。</p><p>在<code>templates</code>目录新建<code>back_to_top_func.html</code>文件，写入以下代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/back_to_top_func.html<span class="token comment">&lt;!-- 参考了 鹦鹉 的代码，在此致谢 --></span><span class="token comment">&lt;!-- https://ezbox.idv.tw/131/back-to-top-button-without-images --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BackTop<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toTop-arrow<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">z-index</span><span class="token punctuation">:</span> 100<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">// 向上滚动的函数</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#BackTop'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'html,body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>scrollTop<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scroll</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#BackTop'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeIn</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#BackTop'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeOut</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token comment">/* 按钮边框的大小、位置、样式 */</span>    <span class="token selector">.toTop-arrow</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 3.5rem<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 3.5rem<span class="token punctuation">;</span>        <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">border-radius</span><span class="token punctuation">:</span> 33%<span class="token punctuation">;</span>        <span class="token property">opacity</span><span class="token punctuation">:</span> 0.7<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>        <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>        <span class="token property">right</span><span class="token punctuation">:</span> 1.5rem<span class="token punctuation">;</span>        <span class="token property">bottom</span><span class="token punctuation">:</span> 1.5rem<span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 绘制按钮中的向上箭头 */</span>    <span class="token selector">.toTop-arrow::before, .toTop-arrow::after</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 31px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 7px<span class="token punctuation">;</span>        <span class="token property">border-radius</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.toTop-arrow::before</span> <span class="token punctuation">&#123;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-45deg<span class="token punctuation">)</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> 0.4rem<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.toTop-arrow::after</span> <span class="token punctuation">&#123;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>45deg<span class="token punctuation">)</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">right</span><span class="token punctuation">:</span> 0.4rem<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 取消点击按钮时的聚焦 */</span>    <span class="token selector">.toTop-arrow:focus</span> <span class="token punctuation">&#123;</span>        <span class="token property">outline</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码分成<code>html</code>、<code>javascript</code>、<code>css</code>三部分。</p><p><strong>HTML</strong>部分只有一行，用<strong>button</strong>标签表示了浮动按钮的容器。</p><p><strong>JavaScript</strong>部分主要用到了<strong>Jquery</strong>的语法。页面加载完成后开始监听两个事件：</p><ul><li>当用户点击浮动按钮时，将页面滚动到顶部</li><li>当页面滚动时，根据页面距离顶部的距离，决定按钮显示或隐藏</li></ul><p><strong>CSS</strong>部分最长但也很简单，主要定义了按钮的位置、大小、图案等样式。读者可以试着、改动、删除部分代码，看看按钮形态会怎样变化。</p><p>核心代码就写好了。有点小瑕疵的是前面在<code>footer.html</code>中定义了<code>class=&quot;fixed-bottom&quot;</code>，这个属性的显示层级很高，会将浮动按钮给覆盖掉。因此删除<code>templates/footer.html</code>中的<code>fixed-bottom</code>属性：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/footer.html...<span class="token comment">&lt;!-- 删除了 fixed-bottom 属性 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>py-3 bg-dark<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>z-index这个css样式决定了页面中容器的显示顺序，数值越大则显示优先级越高。</p><p>之所以fixed-bottom会覆盖掉浮动按钮，就是因为它将z-index设置成了一个很大的数值。</p></blockquote><p>因为我们想在全站都拥有这个按钮，所以将刚写好的模块引用到<code>base.html</code>中：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/base.html...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    ...    <span class="token comment">&lt;!-- jquery.js --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% static <span class="token punctuation">'</span>jquery/jquery-3.3.1.js<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    ...    <span class="token comment">&lt;!-- 在jquery后面引入 --></span>    &#123;% include 'back_to_top_func.html' %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意模块用到了<strong>Jquery</strong>，因此要在Jquery后面引入。</p><p>效果如下：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190411/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE192.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190411/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE192.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>点击按钮后，页面滚回到顶部。</p><h2 id="矢量图标"><a href="#矢量图标" class="headerlink" title="矢量图标"></a>矢量图标</h2><p>与老版本不同，Bootstrap 4 中也没有自带图标。作为补偿，官方也推荐了几款强大且免费的第三方<strong>矢量图标</strong>提供商。我比较喜欢的是<a href="https://fontawesome.com/">Font Awesome</a>，提供1500+免费图标（以及5000+付费图标），完全够用了。各种你想得到想不到的图标都有：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190411/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE193.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190411/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE193.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>用法也很简单，你甚至不用将其下载到本地（当然想下载也可以）。根据官网的提示，直接在<code>base.html</code>中引入：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/base.html...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span>       <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://use.fontawesome.com/releases/v5.8.1/css/all.css<span class="token punctuation">"</span></span>       <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf<span class="token punctuation">"</span></span>       <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在页面中插入某个图标的标签就可以用了。</p><p>首先在<a href="https://fontawesome.com/icons?d=gallery">官网图标库</a>搜索想要的图标，比如<code>eye</code>：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190411/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE194.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190411/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE194.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>点击图标进去后就能看到它的<strong>标签名称</strong>：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190411/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE195.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190411/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE195.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>将此标签名称复制到你的网页中，图标就渲染出来了。</p><p>很神奇的是，矢量图标跟普通的字体是完全类似的，你可以通过CSS定义图标的颜色（<code>color</code>）、大小（<code>font-size</code>）等样式。</p><p>尝试一下。将图标代码添加到<code>templates/article/list.html</code>中的列表循环：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/article/list.html...<span class="token comment">&lt;!-- 注脚 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 附加信息，增加了图标 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fas fa-eye<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> lightskyblue<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>        &#123;&#123; article.total_views &#125;&#125;<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fas fa-comments<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> yellowgreen<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 修改为评论的计数 --></span>        &#123;&#123; article.comments.count &#125;&#125;<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fas fa-clock<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>        &#123;&#123; article.created|date:'Y-m-d' &#125;&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看看效果：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190411/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE196.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190411/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE196.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>好玩吧。读者朋友慢慢挑选心仪的图标，到自己的博客中吧。</p><p>相比写代码来说，这是个相当愉悦的过程。</p><h2 id="页脚沉底"><a href="#页脚沉底" class="headerlink" title="页脚沉底"></a>页脚沉底</h2><p>刚才做浮动按钮时，取消了页脚固定在底部的<code>fixed-bottom</code>。</p><p>按钮倒是没被遮盖了，但又冒出来另一个烦人的问题，请看下图：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190411/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE197.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190411/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE197.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>当页面内容较少时，页脚下方居然空出来一大块地方，太丑了。</p><blockquote><p><a href="https://css-tricks.com/couple-takes-sticky-footer/">《Sticky Footer, Five Ways》</a>罗列了5种方法解决这个问题，有兴趣的同学可深入了解。</p></blockquote><p>需要修改<code>base.html</code>和<code>footer.html</code>两个文件。先贴改动代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/base.html...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    &#123;% include 'header.html' %&#125;        <span class="token comment">&lt;!-- 新增两个 div 容器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        &#123;% block content %&#125;&#123;% endblock content %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>push<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    &#123;% include 'footer.html' %&#125;    ...        <span class="token comment">&lt;!-- 增加样式 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">html, body</span> <span class="token punctuation">&#123;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#wrapper</span> <span class="token punctuation">&#123;</span>            <span class="token property">min-height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">margin-bottom</span><span class="token punctuation">:</span> -60px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#footer,        #push</span> <span class="token punctuation">&#123;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/footer.html...<span class="token comment">&lt;!-- 增加 id="footer" 属性 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name">...</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码通过CSS样式控制页面尺寸不小于屏幕的高度，以及页脚的高度为60px。不太好理解的主要有两个地方：</p><ul><li><code>#push</code>容器留出一段与页脚等高的空隙，避免正文内容与页脚重叠。</li><li><code>#wrapper</code>容器的底部有一个负边距，作用是给页脚容器让出位置。这个负边距你不设置也可以，无非就是底部多出高度为<code>60px</code>的空白罢了。</li></ul><p>刷新页面：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190411/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE198.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190411/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE198.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>舒服了。</p><blockquote><p>随着项目逐渐增大，HTML、JavaScript、CSS交织在一起，也更加混乱。</p><p>虽然教程没有把这三种类型的代码分离开，但是你应该考虑这样做。</p></blockquote><h2 id="粘性侧边栏"><a href="#粘性侧边栏" class="headerlink" title="粘性侧边栏"></a>粘性侧边栏</h2><p>目前教程将<strong>文章目录</strong>放置在文章的右侧，这就是相当于是个侧边栏。问题是当用户向下阅读文章时，目录却不会固定在页面中，而是几下就翻得没影了，影响体验。</p><p><strong>粘性侧边栏</strong>就是来解决这个问题的。当页面向下滚动时，粘性侧边栏会灵活的固定在屏幕中，保证用户在任何位置都可以看到侧边栏中的内容。</p><p>具体工作模式如下图：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190411/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE199.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190411/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE199.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>考虑到侧边栏有可能会很长，因此设计出足够“聪明”的粘性侧边栏也不那么容易。教程将用到<a href="https://github.com/abouolia">Abouolia</a>的<a href="https://github.com/abouolia/sticky-sidebar">粘性侧边栏插件</a>，强大且小巧，读者可以去<a href="https://abouolia.github.io/sticky-sidebar/">官方示例</a>感受一下。</p><p>将<a href="https://github.com/abouolia/sticky-sidebar">插件的GitHub库</a>下载到本地后，因为博客项目已经加载好了<code>Jquery</code>，所以只需要用到<code>dist</code>目录下的<code>jquery.sticky-sidebar.min.js</code>这个文件就可以了。在项目的<code>static</code>目录下新建目录<code>sticky_sidebar</code>，将其粘贴进去：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/static/sticky_sidebar/jquery.sticky-sidebar.min.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为只需要在<strong>文章详情</strong>页面用到，所以在详情页中引入模块就够用了：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/article/detail.html...<span class="token comment">&lt;!-- 目录 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">...</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sidebar<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sidebar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sidebar__inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>目录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            &#123;&#123; toc|safe &#125;&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>...<span class="token comment">&lt;!-- 粘性侧边栏样式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.sidebar</span><span class="token punctuation">&#123;</span>        <span class="token property">will-change</span><span class="token punctuation">:</span> min-height<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.sidebar__inner</span><span class="token punctuation">&#123;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">will-change</span><span class="token punctuation">:</span> position<span class="token punctuation">,</span> transform<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>...&#123;% block script %&#125;<span class="token comment">&lt;!-- 引入粘性侧边栏 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% static <span class="token punctuation">'</span>sticky_sidebar/jquery.sticky-sidebar.min.js<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#sidebar'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stickySidebar</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        topSpacing<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>        bottomSpacing<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>...&#123;% endblock script %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按照插件的要求，侧边栏套上了<strong>两层容器</strong>，第一层含有属性<code>id=&quot;sidebar&quot; class=&quot;sidebar&quot;</code>，第二层含有属性<code>class=&quot;sidebar__inner&quot;</code>。然后设置样式，引入静态文件并调用插件，没什么好说的，照做就可以了。与前面的章节相同，由于插件需求<strong>Jquery</strong>，一定要把 JavaScript 语句放到<code>&#123;% block script %&#125;</code>中，否则会报错哦。</p><blockquote><p>插件还有其他可设置的规则，详情见<a href="https://abouolia.github.io/sticky-sidebar/">官方文档</a></p></blockquote><p>刷新页面，不管你怎么滚动页面，目录都显示在屏幕中，并且随着滚轮很自然的上下移动了：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190411/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE200.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190411/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE200.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章学习了回到顶部浮动按钮、矢量图标、页脚沉底和粘性侧边栏四个功能。</p><p>就像前面说的，这几个功能跟Django没什么关系，但是既然要想做一个完整的博客网站，就不要抱有幻想。<strong>光靠那么一点点Django代码是不可能的</strong>，什么知识你都得会一点才行。</p><p>读者以后会遇到更加多样的编程工具，一定不要被“Django程序员”这个头衔所束缚，勇敢去学吧。谁让你已经上了贼船呢。</p><hr><ul><li>有疑问请在<a href="http://www.dusaiphoto.com/">杜赛的个人网站</a>留言，我会尽快回复。</li><li>或Email私信我：<a href="mailto:&#100;&#x75;&#x73;&#x61;&#x69;&#x70;&#x68;&#111;&#x74;&#111;&#x40;&#102;&#x6f;&#x78;&#x6d;&#x61;&#x69;&#108;&#x2e;&#99;&#111;&#x6d;">&#100;&#x75;&#x73;&#x61;&#x69;&#x70;&#x68;&#111;&#x74;&#111;&#x40;&#102;&#x6f;&#x78;&#x6d;&#x61;&#x69;&#108;&#x2e;&#99;&#111;&#x6d;</a></li><li>项目完整代码：<a href="https://github.com/stacklens/django_blog_tutorial">Django_blog_tutorial</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--33.消息通知</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/33.xiao-xi-tong-zhi/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/33.xiao-xi-tong-zhi/</url>
      
        <content type="html"><![CDATA[<p>凭借你勤奋的写作，拜读你文章的用户越来越多，他们的评论也分散在众多的文章之中。作为博主，读者的留言肯定是要都看的；而读者给你留言，自然也希望得到回复。</p><p>怎么将未读的留言呈现给正确的用户呢？总不能用户自己去茫茫文章中寻找吧，那也太蠢了。给评论增加<strong>通知功能</strong>就是很流行的解决方案：比如微信朋友圈留言的通知、新浪微博留言的通知、以及各种社交平台的“小红点”。</p><p>本篇将以<code>django-notifications</code>为基础，非常高效的搭建一个简易的通知系统。</p><h2 id="发送通知"><a href="#发送通知" class="headerlink" title="发送通知"></a>发送通知</h2><p>前面的步骤我们已经很熟悉了。</p><p>首先安装<code>django-notifications</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token operator">></span> pip <span class="token function">install</span> django-notifications-hq<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注册app：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">my_blog<span class="token operator">/</span>settings<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token string">'notifications'</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在根路由中安装路径：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">my_blog<span class="token operator">/</span>urls<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">import</span> notifications<span class="token punctuation">.</span>urlsurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    path<span class="token punctuation">(</span><span class="token string">'inbox/notifications/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span>notifications<span class="token punctuation">.</span>urls<span class="token punctuation">,</span> namespace<span class="token operator">=</span><span class="token string">'notifications'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意这里的<code>notifications.urls</code>没有像之前一样用字符串，是为了确保模块安装到正确的命名空间中。</p><p>数据迁移：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token operator">></span> python manage.py migrate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>app就安装好了。</p><p>接下来你就可以在项目的<strong>任何地方</strong>发送通知了！像这样：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> notifications<span class="token punctuation">.</span>signals <span class="token keyword">import</span> notifynotify<span class="token punctuation">.</span>send<span class="token punctuation">(</span>actor<span class="token punctuation">,</span> recipient<span class="token punctuation">,</span> verb<span class="token punctuation">,</span> target<span class="token punctuation">,</span> action_object<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中的参数释义：</p><ul><li><code>actor</code>：发送通知的对象</li><li><code>recipient</code>：接收通知的对象</li><li><code>verb</code>：动词短语</li><li><code>target</code>：链接到动作的对象<em>（可选）</em></li><li><code>action_object</code>：执行通知的对象（可选）</li></ul><p>有点绕，举个栗子：<a href="https://www.dusaiphoto.com/">杜赛</a>  <code>(actor)</code>  在  <a href="https://www.dusaiphoto.com/article/detail/2">Django搭建个人博客</a>  <code>(target)</code>  中对  <a href="">你</a>  <code>(recipient)</code>  <a href="">发表了</a>  <code>(verb)</code>    <a href="">评论</a>  <code>(action_object)</code>。</p><p>因为我们想要在用户<strong>发表评论的时候发送通知</strong>，因此修改一下发表评论的视图：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">comments<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">from</span> notifications<span class="token punctuation">.</span>signals <span class="token keyword">import</span> notify<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">def</span> <span class="token function">post_comment</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment"># 已有代码，创建新回复</span>    <span class="token keyword">if</span> comment_form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment"># 已有代码，二级回复</span>        <span class="token keyword">if</span> parent_comment_id<span class="token punctuation">:</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token comment"># 新增代码，给其他用户发送通知</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> parent_comment<span class="token punctuation">.</span>user<span class="token punctuation">.</span>is_superuser<span class="token punctuation">:</span>                notify<span class="token punctuation">.</span>send<span class="token punctuation">(</span>                    request<span class="token punctuation">.</span>user<span class="token punctuation">,</span>                    recipient<span class="token operator">=</span>parent_comment<span class="token punctuation">.</span>user<span class="token punctuation">,</span>                    verb<span class="token operator">=</span><span class="token string">'回复了你'</span><span class="token punctuation">,</span>                    target<span class="token operator">=</span>article<span class="token punctuation">,</span>                    action_object<span class="token operator">=</span>new_comment<span class="token punctuation">,</span>                <span class="token punctuation">)</span>            <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'200 OK'</span><span class="token punctuation">)</span>                new_comment<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 新增代码，给管理员发送通知</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>is_superuser<span class="token punctuation">:</span>            notify<span class="token punctuation">.</span>send<span class="token punctuation">(</span>                    request<span class="token punctuation">.</span>user<span class="token punctuation">,</span>                    recipient<span class="token operator">=</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>is_superuser<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    verb<span class="token operator">=</span><span class="token string">'回复了你'</span><span class="token punctuation">,</span>                    target<span class="token operator">=</span>article<span class="token punctuation">,</span>                    action_object<span class="token operator">=</span>new_comment<span class="token punctuation">,</span>                <span class="token punctuation">)</span>                    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>增加了两条<code>notify</code>的语句，分别位于两个<code>if</code>语句中：</p><ul><li>第一个<code>notify</code>：用户之间可以互相评论，因此需要发送通知。<code>if</code>语句是为了防止管理员收到重复的通知。</li><li>第二个<code>notify</code>：普通用户回复时给管理员发送通知。</li></ul><blockquote><p>普通用户回复普通用户时，这段代码是不会发送通知给管理员的。如果需要发送给管理员，在第一个 notify 的 recipient 里以列表形式，将被回复用户和管理员添加进去即可。感谢 @囸義使鍺 反馈。</p></blockquote><p>其他的代码没有变化，注意位置不要错就行了。你可以试着发送几条评论，然后打开<code>SQLiteStudio</code>，查看<code>notifications_notification</code>表中的数据变化。</p><blockquote><p>有效代码实际上只有4行，我们就完成了创建、发送通知的功能！相信你已经逐渐体会到运用第三方库带来的便利了。这就是站在了“巨人们”的肩膀上。</p></blockquote><h2 id="小红点"><a href="#小红点" class="headerlink" title="小红点"></a>小红点</h2><p>后台创建通知的逻辑已经写好了，但是如果不能在前端显示出来，那也没起到作用。</p><p>而前端显示消息通知比较流行的是<strong>“小红点”</strong>，流行得都已经泛滥了，尽管很多软件其实根本就不需要。另一种形式是消息<strong>徽章</strong>，即一个红色方框中带有消息条目的计数。这两种方式都会用到博客页面中。</p><p>在位置的选择上，<code>header</code>是很合适的，因为它在博客的所有位置都会显示，很符合通知本身的定位。</p><p>因此修改<code>header.html</code>：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/header.html<span class="token comment">&lt;!-- 引入notifications的模板标签 --></span>&#123;% load notifications_tags %&#125;&#123;% notifications_unread as unread_count %&#125;...<span class="token comment">&lt;!-- 已有代码，用户下拉框 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-item dropdown<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-link dropdown-toggle<span class="token punctuation">"</span></span> <span class="token attr-name">...</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- 新增代码，小红点 --></span>        &#123;% if unread_count %&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">viewBox</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0 0 8 8<span class="token punctuation">"</span></span>                 <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8px<span class="token punctuation">"</span></span>                 <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>circle</span> <span class="token attr-name">cx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span>                        <span class="token attr-name">cy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span>                        <span class="token attr-name">r</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span>                        <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#ff6b6b<span class="token punctuation">"</span></span>                        <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>circle</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span>        &#123;% endif %&#125;                &#123;&#123; user.username &#125;&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 已有代码，下拉框中的链接 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dropdown-menu<span class="token punctuation">"</span></span> <span class="token attr-name">...</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- 新增代码，通知计数 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dropdown-item<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>通知            &#123;% if unread_count %&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>badge badge-danger<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; unread_count &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            &#123;% endif %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                ...        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">...</span><span class="token punctuation">></span></span>退出登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>django-notifications</code>自带简易的模板标签，可以在前台模板中调用重要的通知相关的对象，在<strong>顶部引入</strong>就可以使用了。比如<code>unread_count</code>是当前用户的未读通知的计数。</p><p><code>Bootstrap</code>自带有徽章的样式，但是却没有小红点的样式（至少我没有找到），所以就只能用<code>svg</code>自己画了，好在也不难。</p><blockquote><p><code>svg</code>是绘制矢量图形的标签，这里就不展开讲了，感兴趣请自行搜索相关文章。</p></blockquote><p>随便评论几条，刷新页面看一看：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190518/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE210.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190518/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE210.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>效果不错。但是链接的<code>href</code>是空的，接下来就处理。</p><h2 id="未读与已读"><a href="#未读与已读" class="headerlink" title="未读与已读"></a>未读与已读</h2><p>既然是通知，那么肯定能够分成<strong>”未读的“</strong>和<strong>”已读的“</strong>两种。在适当的时候，未读通知又需要转换为已读的。现在我们来开发功能集中处理它。</p><p>通知是一个独立的功能，以后有可能在任何地方用到，放到评论app中似乎并不合适。</p><p>所以新建一个app：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token operator">></span> python manage.py startapp notice<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注册：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">my_blog<span class="token operator">/</span>settings<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token string">'notice'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根路由：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">my_blog<span class="token operator">/</span>urls<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment"># notice</span>    path<span class="token punctuation">(</span><span class="token string">'notice/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'notice.urls'</span><span class="token punctuation">,</span> namespace<span class="token operator">=</span><span class="token string">'notice'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来就是视图了。之前所有的视图都是用的<strong>视图函数</strong>，这次我们更进一步，用<strong>类视图</strong>来完成。忘记什么是类视图的，回忆一下前面<a href="https://www.dusaiphoto.com/article/detail/52/">类的视图</a>章节。</p><p>编写视图：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">notice<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token punctuation">,</span> redirect<span class="token keyword">from</span> django<span class="token punctuation">.</span>views <span class="token keyword">import</span> View<span class="token keyword">from</span> django<span class="token punctuation">.</span>views<span class="token punctuation">.</span>generic <span class="token keyword">import</span> ListView<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>mixins <span class="token keyword">import</span> LoginRequiredMixin<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> ArticlePost<span class="token keyword">class</span> <span class="token class-name">CommentNoticeListView</span><span class="token punctuation">(</span>LoginRequiredMixin<span class="token punctuation">,</span> ListView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""通知列表"""</span>    <span class="token comment"># 上下文的名称</span>    context_object_name <span class="token operator">=</span> <span class="token string">'notices'</span>    <span class="token comment"># 模板位置</span>    template_name <span class="token operator">=</span> <span class="token string">'notice/list.html'</span>    <span class="token comment"># 登录重定向</span>    login_url <span class="token operator">=</span> <span class="token string">'/userprofile/login/'</span>    <span class="token comment"># 未读通知的查询集</span>    <span class="token keyword">def</span> <span class="token function">get_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>notifications<span class="token punctuation">.</span>unread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">CommentNoticeUpdateView</span><span class="token punctuation">(</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""更新通知状态"""</span>    <span class="token comment"># 处理 get 请求</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 获取未读消息</span>        notice_id <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'notice_id'</span><span class="token punctuation">)</span>        <span class="token comment"># 更新单条通知</span>        <span class="token keyword">if</span> notice_id<span class="token punctuation">:</span>            article <span class="token operator">=</span> ArticlePost<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span>request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'article_id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>notifications<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span>notice_id<span class="token punctuation">)</span><span class="token punctuation">.</span>mark_as_read<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>article<span class="token punctuation">)</span>        <span class="token comment"># 更新全部通知</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>notifications<span class="token punctuation">.</span>mark_all_as_read<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'notice:list'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>视图共两个。</p><p><code>CommentNoticeListView</code>：继承自<code>ListView</code>，用于展示所有的未读通知。<code>get_queryset</code>方法返回了传递给模板的上下文对象，<code>unread()</code>方法是<code>django-notifications</code>提供的，用于获取所有未读通知的集合。另外视图还继承了<strong>“混入类”</strong><code>LoginRequiredMixin</code>，要求调用此视图必须先登录。</p><p><code>CommentNoticeUpdateView</code>：继承自<code>View</code>，获得了如get、post等基础的方法。<code>mark_as_read()</code>、<code>mark_all_as_read</code>都是模块提供的方法，用于将未读通知转换为已读。<code>if</code>语句用来判断转换单条还是所有未读通知。</p><blockquote><p>重复：阅读有困难的同学，请重新阅读<a href="https://www.dusaiphoto.com/article/detail/52/">类的视图</a>章节，或者去<a href="https://docs.djangoproject.com/en/2.2/topics/class-based-views/">官方文档</a>查阅。</p></blockquote><p>接下来就是新建<code>urls.py</code>了，写入：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">notice<span class="token operator">/</span>urls<span class="token punctuation">.</span>py<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> viewsapp_name <span class="token operator">=</span> <span class="token string">'notice'</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token comment"># 通知列表</span>    path<span class="token punctuation">(</span><span class="token string">'list/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>CommentNoticeListView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'list'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment"># 更新通知状态</span>    path<span class="token punctuation">(</span><span class="token string">'update/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>CommentNoticeUpdateView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'update'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>path()</code>的第二个参数只能接收<strong>函数</strong>，因此别忘了要调用类视图的<code>as_view()</code>方法。</p><p><strong>集中处理通知需要一个单独的页面。</strong>新建<code>templates/notice/list.html</code>模板文件：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/notice/list.html&#123;% extends "base.html" %&#125;&#123;% load staticfiles %&#125;&#123;% block title %&#125;    通知&#123;% endblock title %&#125;&#123;% block content %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row mt-4 ml-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">notice:</span>update"</span> <span class="token attr-name">%&#125;"</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-warning<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>清空所有通知<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 未读通知列表 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row mt-2 ml-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            &#123;% for notice in notices %&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>notice_link<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">notice:</span>update"</span> <span class="token attr-name">%&#125;?article_id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>&#123;&#123;</span> <span class="token attr-name">notice.target.id</span> <span class="token attr-name">&#125;&#125;&amp;notice_id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>&#123;&#123;</span> <span class="token attr-name">notice.id</span> <span class="token attr-name">&#125;&#125;"</span>                       <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span>                    <span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> #5897fb<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>                        &#123;&#123; notice.actor &#125;&#125;                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                        在 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> #01a252<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>&#123;&#123; notice.target &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> &#123;&#123; notice.verb &#125;&#125;。                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>&#123;&#123; notice.timestamp|date:"Y/m/d H:i" &#125;&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            &#123;% endfor %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">#notice_link a:link</span> <span class="token punctuation">&#123;</span>        <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">#notice_link a:visited</span> <span class="token punctuation">&#123;</span>        <span class="token property">color</span><span class="token punctuation">:</span> lightgrey<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>&#123;% endblock content %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模板中主要提供了两个功能：</p><ul><li>点击<code>button</code>按钮清空所有未读通知</li><li>点击单个通知，将其转换为已读通知，并前往此评论所在的文章</li></ul><p>末尾<code>&lt;style&gt;</code>标签中的<strong>伪类选择器</strong>，作用是将已经点击过的通知字体颜色转换为浅灰色，优化用户体验。</p><p>最后就是补上<strong>入口</strong>：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/header.html...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">...</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">notice:</span>list"</span> <span class="token attr-name">%&#125;"</span><span class="token punctuation">></span></span>通知...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就完成了。</p><p>打开服务器，用一个普通账号评论几条，再登录管理员账号并进入通知页面：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190518/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE212.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190518/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE212.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>就能看到不错的效果了。实现的效果是仅展示未读通知，当然也可以在下边展示已读通知，方便用户追溯。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通知功能非常的重要，特别是在你的博客成长壮大了之后。你还可以把它用在别的地方，比如每新发表一篇文章，就给你所有的“粉丝”推送一条通知，提醒他们可以来拜读了。具体如何扩展运用，就靠你脑洞大开了。</p><p><strong>课后作业：</strong>前面的代码中，如果用户自己评论自己，同样也会收到通知。这种通知并没有必要，请修正它。</p><blockquote><p>遇到困难，在<a href="https://github.com/stacklens/django_blog_tutorial">教程示例代码</a>找答案吧。</p></blockquote><hr><ul><li>有疑问请在<a href="http://www.dusaiphoto.com/">杜赛的个人网站</a>留言，我会尽快回复。</li><li>或Email私信我：<a href="mailto:&#100;&#117;&#115;&#x61;&#105;&#x70;&#104;&#111;&#116;&#111;&#x40;&#x66;&#x6f;&#120;&#x6d;&#x61;&#105;&#x6c;&#46;&#99;&#x6f;&#x6d;">&#100;&#117;&#115;&#x61;&#105;&#x70;&#104;&#111;&#116;&#111;&#x40;&#x66;&#x6f;&#120;&#x6d;&#x61;&#105;&#x6c;&#46;&#99;&#x6f;&#x6d;</a></li><li>项目完整代码：<a href="https://github.com/stacklens/django_blog_tutorial">Django_blog_tutorial</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--34.锚点定位</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/34.mao-dian-ding-wei/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/34.mao-dian-ding-wei/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>老读者注意：</strong>上一章<a href="https://www.dusaiphoto.com/article/detail/64/">消息通知</a>有个bug，即发给管理员的<code>notify</code>必须移动到<code>new_comment.save()</code>的后面，否则会导致<code>action_object</code>存储为<code>NULL</code>，并且导致本章的<code>html</code>拼接锚点失效。</p><p>原文已更正，为博主的疏忽表示歉意。</p></blockquote><p>上一章已经实现了<strong>消息通知功能</strong>，可以很人性化的把用户引导到被他人回复的页面中去。</p><p>但是仔细想想，似乎还有不方便的地方：如果页面中评论较多，想找到感兴趣的那一条评论还是要费点功夫的。所以这个消息通知，最好是能够不仅前往正确的页面，还要前往正确的位置（需求是无穷无尽的..）。</p><p>为了实现这个功能，本章就要介绍一个非常古老的功能：<strong>锚点定位</strong>。以及如何在Django中实现它。</p><h2 id="锚点是什么"><a href="#锚点是什么" class="headerlink" title="锚点是什么"></a>锚点是什么</h2><p>我们在写<code>html</code>文件的容器时，经常会用到<code>id</code>属性：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fruit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>apple<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个<code>id</code>属性不仅可以作为<code>Javascript</code>或者<code>css</code>代码查询某个容器的标记，还可以作为锚点，定位页面应该前往的位置。输入下面的地址：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">http://www.myblog.com/home#fruit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>浏览器就会打开<code>home</code>页面，并且视窗前往<code>id=&quot;fruit&quot;</code>的容器。</p><p>明白了锚点是什么，下面就通过<strong>三种不同的实现方法</strong>，看看锚点在Django博客项目中是如何应用的。</p><h2 id="三种实现"><a href="#三种实现" class="headerlink" title="三种实现"></a>三种实现</h2><h3 id="html拼接"><a href="#html拼接" class="headerlink" title="html拼接"></a>html拼接</h3><p>锚点首先要实现的功能，就是<strong>当管理员点击消息通知时，浏览器视窗前往此通知的评论位置</strong>。</p><p>因此首先修改文章详情页面，给渲染评论的<code>div</code>容器添加<code>id</code>属性：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/article/detail.html...<span class="token comment">&lt;!-- 已有代码，遍历树形结构 --></span>&#123;% recursetree comments %&#125;&#123;% with comment=node %&#125;<span class="token comment">&lt;!-- 唯一新增代码：id属性 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>comment_elem_&#123;&#123; comment.id &#125;&#125;<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    ...    <span class="token comment">&lt;!-- 下面都是已有代码 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>children<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        &#123;&#123; children &#125;&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    &#123;% endif %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>&#123;% endwith %&#125;&#123;% endrecursetree %&#125;...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们还是用<code>comment.id</code>来给每条评论赋予唯一的<code>id</code>值。注意<code>id</code>属性保持<strong>唯一性</strong>。前面在二级回复的<strong>Modal</strong>中用了<code>comment_&#123;&#123; comment.id &#125;&#125;</code>，这里千万不要重复了。</p><p>然后修改通知列表模板，添加锚点：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/notice/list.html...&#123;% for notice in notices %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">...</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 新增 comment_elem_&#123;&#123; notice.action_object.id &#125;&#125; 锚点 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">notice:</span>update"</span> <span class="token attr-name">%&#125;?article_id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>&#123;&#123;</span> <span class="token attr-name">notice.target.id</span> <span class="token attr-name">&#125;&#125;&amp;notice_id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>&#123;&#123;</span> <span class="token attr-name">notice.id</span> <span class="token attr-name">&#125;&#125;#comment_elem_&#123;&#123;</span> <span class="token attr-name">notice.action_object.id</span> <span class="token attr-name">&#125;&#125;"</span>       <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span>       <span class="token punctuation">></span></span>        ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>&#123;% endfor %&#125;...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意这里<code>url</code>中拼接了两种玩意儿：</p><ul><li>跟在<code>?</code>后面的是查询参数，用于给视图传递参数，是之前写的旧代码</li><li>跟在<code>#</code>后面的是锚点，也就是本章正在学的东东</li></ul><p><code>?</code>和<code>#</code>一个重要的差别，就是<code>?</code>不能够传递到下个页面的<code>url</code>中去，而<code>#</code>可以。</p><p>测试一下，用普通用户账号发几条一级评论，登录管理员账号并点击消息通知：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190605/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE217.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190605/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE217.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>浏览器视窗没有在页面顶部，而是直接前往到该条评论处。</p><p>通过<code>html</code>拼接是实现锚点最<strong>简单直接</strong>的方法。</p><h3 id="视图拼接"><a href="#视图拼接" class="headerlink" title="视图拼接"></a>视图拼接</h3><p><code>html</code>拼接虽好，但它不是万能的。如果要<strong>前往一个当前页面还没有创建的容器</strong>，该怎么办？</p><p>举个栗子。按照目前我们的博客设计，当用户发表评论时，页面会刷新、视窗将停留在文章详情的顶部。但实际上这时候视窗应该停留在新发表的评论处才比较合理，因为用户可能想检查一下自己发表的评论是否正确。而在原页面时由于新评论都还没发表，所以<code>comment.id</code>是不存在的，没办法用<code>html</code>拼接锚点。读者好好思考一下是不是这样。</p><p>这种情况下就需要在视图中拼接锚点了。修改文章评论视图，将锚点拼接到<code>redirect</code>函数中：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">comment<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 文章评论视图</span><span class="token keyword">def</span> <span class="token function">post_comment</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> article_id<span class="token punctuation">,</span> parent_comment_id<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment"># 已有代码</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">if</span> comment_form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token keyword">if</span> parent_comment_id<span class="token punctuation">:</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            new_comment<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>is_superuser<span class="token punctuation">:</span>                notify<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>            <span class="token comment"># 新增代码，添加锚点</span>            redirect_url <span class="token operator">=</span> article<span class="token punctuation">.</span>get_absolute_url<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'#comment_elem_'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>new_comment<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span>            <span class="token comment"># 修改redirect参数</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>redirect_url<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>get_absolute_url()</code>是之前章节写的方法，用于查询某篇文章的地址。</p></blockquote><p>说白了就是把拼接的位置从<strong>模板</strong>挪到了<strong>视图</strong>中，因为新评论必须在视图中保存之后才会被分配一个<code>id</code>值。</p><h3 id="流动的数据"><a href="#流动的数据" class="headerlink" title="流动的数据"></a>流动的数据</h3><p>最后我们来看稍微复杂点的情况。</p><p>当用户发表一级评论时，我们在视图中拼接锚点解决了刷新当前页面并定位的问题。但是<strong>二级评论</strong>是通过<code>iframe + ajax</code>实现的，这又该怎么办？</p><p>理一理思路。</p><p>首先，新评论的<code>id</code>值是在视图中创建的，但是由于视图是从<code>iframe</code>中请求的，在视图中没办法刷新<code>iframe</code>的父页面。所以我们唯一能做的就是<strong>把数据传递出去</strong>，到前端去处理。</p><p>修改文章评论视图：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">comment<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token comment"># 引入JsonResponse</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> JsonResponse<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 文章评论视图</span><span class="token keyword">def</span> <span class="token function">post_comment</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> article_id<span class="token punctuation">,</span> parent_comment_id<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    article <span class="token operator">=</span> get_object_or_404<span class="token punctuation">(</span>ArticlePost<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span>article_id<span class="token punctuation">)</span>    <span class="token comment"># 已有代码</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">if</span> comment_form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token keyword">if</span> parent_comment_id<span class="token punctuation">:</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token comment"># 修改此处代码</span>                <span class="token comment"># return HttpResponse("200 OK")</span>                <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token string">"200 OK"</span><span class="token punctuation">,</span> <span class="token string">"new_comment_id"</span><span class="token punctuation">:</span> new_comment<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新引入的<code>JsonResponse</code>返回的是<code>json</code>格式的数据，由它将新评论的<code>id</code>传递出去。</p><blockquote><p>json是web开发中很常用的轻量级数据格式，非常像python的字典，读者请自行了解。</p><p>特别提醒json格式必须用双引号。</p></blockquote><p>现在数据在<code>iframe</code>中了。但是我们需要刷新的是<code>iframe</code>的父页面啊，所以还要**继续把数据往父页面“扔”**。</p><p>修改二级评论的模板：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/comment/reply.html...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token operator">...</span><span class="token keyword">function</span> <span class="token function">confirm_submit</span><span class="token punctuation">(</span><span class="token parameter">article_id<span class="token punctuation">,</span> comment_id</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token operator">...</span>    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token operator">...</span>        <span class="token comment">// 成功回调函数</span>        <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token comment">// 旧代码</span>            <span class="token comment">// if(e === '200 OK')&#123;</span>            <span class="token comment">//     parent.location.reload();</span>            <span class="token comment">// &#125;;</span>                        <span class="token comment">// 新代码</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">'200 OK'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">// 调用父页面的函数</span>                parent<span class="token punctuation">.</span><span class="token function">post_reply_and_show_it</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>new_comment_id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于现在ajax获取的是json数据，因此用<code>e.code</code>获取视图返回的状态。</p><p>旧代码用<code>parent.location.reload()</code>刷新了父页面。同样的，用<code>parent.abc()</code>可以调用父页面的<code>abc()</code>函数。这样就把数据传递到父页面里去了。</p><p>这下就好说了。在父页面中（文章详情模板）添加需要执行锚点拼接的函数：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/article/detail.html...&#123;% block script %&#125;...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token operator">...</span>    <span class="token comment">// 新增函数，处理二级回复</span>    <span class="token keyword">function</span> <span class="token function">post_reply_and_show_it</span><span class="token punctuation">(</span><span class="token parameter">new_comment_id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> next_url <span class="token operator">=</span> <span class="token string">"&#123;% url 'article:article_detail' article.id %&#125;"</span><span class="token punctuation">;</span>        <span class="token comment">// 去除 url 尾部 '/' 符号</span>        next_url <span class="token operator">=</span> next_url<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>next_url<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'/'</span> <span class="token operator">?</span> next_url<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> next_url<span class="token punctuation">;</span>        <span class="token comment">// 刷新并定位到锚点</span>        window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>next_url <span class="token operator">+</span> <span class="token string">"#comment_elem_"</span> <span class="token operator">+</span> new_comment_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>&#123;% endblock script %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数中运用了<strong>JavaScript</strong>的<strong>三元运算符</strong><code>a ? b : c</code>，翻译成人话就是：如果<code>a</code>成立则返回<code>b</code>，如果<code>a</code>不成立就返回<code>c</code>。作用是去掉<code>url</code>尾部的<code>/</code>，否则锚点不会生效。你可能会问，三元运算符多麻烦，为什么不直接把<code>url</code>末尾一个字符剔除掉呢？答案是这样写代码更加健壮。万一哪天Django解析的<code>url</code>尾部没有斜杠了呢。</p><p><code>window.location.replace()</code>作用是重定向页面，在这里面终于可以愉快的拼接锚点了。</p><p>一切都OK啦。测试发表二级评论，运气好的同学应该可以顺利将视窗定位到刚评论的位置了。</p><p>感受到数据的流动没有？</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章学习了锚点的html拼接、视图拼接、ajax+iframe综合运用，理解后就能应付绝大部分的状况了。</p><p>锚点虽然古老，但并不陈旧。</p><p>合理的运用锚点，可以让你的博客相当的人性化，这也是好网站的一个标志。</p><hr><ul><li>有疑问请在<a href="http://www.dusaiphoto.com/">杜赛的个人网站</a>留言，我会尽快回复。</li><li>或Email私信我：<a href="mailto:&#x64;&#117;&#x73;&#x61;&#x69;&#112;&#x68;&#x6f;&#x74;&#111;&#64;&#102;&#x6f;&#120;&#109;&#97;&#105;&#108;&#46;&#x63;&#111;&#x6d;">&#x64;&#117;&#x73;&#x61;&#x69;&#112;&#x68;&#x6f;&#x74;&#111;&#64;&#102;&#x6f;&#120;&#109;&#97;&#105;&#108;&#46;&#x63;&#111;&#x6d;</a></li><li>项目完整代码：<a href="https://github.com/stacklens/django_blog_tutorial">Django_blog_tutorial</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--35.第三方登录</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/35.di-san-fang-deng-lu/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/35.di-san-fang-deng-lu/</url>
      
        <content type="html"><![CDATA[<p>现在我们已经拥有一个可以进行用户<strong>本地登录</strong>的博客系统了。如果有人欣赏你的文章，说不定就会注册成为本地用户，并和你好好交流一番。</p><p>但头疼的是，用户可能每天都在互联网上浏览很多非常棒的博客，如果每个博客都要去注册才能评论，对用户是个不小的负担。对个人博客这类草根网站，说不定用户就懒得去注册了，你也就损失了一个潜在的”粉丝“。</p><p>比较流行的解决方案是允许用户通过<strong>第三方登录</strong>，即可以通过GitHub、微博这类知名社区的授权，从而登录你的小站，免去了注册的麻烦。</p><p>本章会介绍一个强大的库：<code>Django-allauth</code>，它不仅包含一整套的本地注册、登录、管理的解决方案，还支持GitHub、Twitter、微博、微信甚至百度等几十种第三方登录方式，真的是当爹又当妈啊…</p><h2 id="本地登录"><a href="#本地登录" class="headerlink" title="本地登录"></a>本地登录</h2><p>先看看<code>django-allauth</code>的本地登录如何配置。</p><p>安装<code>django-allauth</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token operator">></span> pip <span class="token function">install</span> django-allauth<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改配置文件：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">my_blog<span class="token operator">/</span>settings<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>TEMPLATES <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token string">'OPTIONS'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">'context_processors'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token comment"># allauth 启动必须项</span>                <span class="token string">'django.template.context_processors.request'</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span>AUTHENTICATION_BACKENDS <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token comment"># Django 后台可独立于 allauth 登录</span>    <span class="token string">'django.contrib.auth.backends.ModelBackend'</span><span class="token punctuation">,</span>    <span class="token comment"># 配置 allauth 独有的认证方法，如 email 登录</span>    <span class="token string">'allauth.account.auth_backends.AuthenticationBackend'</span><span class="token punctuation">,</span><span class="token punctuation">)</span>INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment"># allauth 启动必须项</span>    <span class="token string">'django.contrib.auth'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.messages'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.sites'</span><span class="token punctuation">,</span>    <span class="token string">'allauth'</span><span class="token punctuation">,</span>    <span class="token string">'allauth.account'</span><span class="token punctuation">,</span>    <span class="token string">'allauth.socialaccount'</span><span class="token punctuation">,</span>        <span class="token comment"># 可添加需要的第三方登录</span>    <span class="token string">'allauth.socialaccount.providers.github'</span><span class="token punctuation">,</span>    <span class="token string">'allauth.socialaccount.providers.weibo'</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token comment"># 设置站点</span>SITE_ID <span class="token operator">=</span> <span class="token number">1</span><span class="token comment"># 登录成功后重定向地址</span>LOGIN_REDIRECT_URL <span class="token operator">=</span> <span class="token string">'/article/article-list'</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意上面的配置中，有的内容是创建项目时本来就有的，检查一下你的项目中是否包含；有的内容是完全新增的，不要漏掉了。</p><p><code>django-allauth</code>也是一个app，因此需要分配给它<code>url</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">my_blog<span class="token operator">/</span>urls<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    path<span class="token punctuation">(</span><span class="token string">'accounts/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'allauth.urls'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后一步是迁移数据：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token operator">></span> python manage.py migrate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这就完成了！</p><p>输入<code>django-allauth</code>的默认登录页面地址：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">http://127.0.0.1:8000/accounts/login/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示页面如下：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190620/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE220.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190620/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE220.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><h3 id="设置网站首页"><a href="#设置网站首页" class="headerlink" title="设置网站首页"></a>设置网站首页</h3><p>教程到现在，我们的博客都还没有分配首页地址。</p><p>博客网站的首页通常就是文章列表本身，因此把这个路由添加到<code>my_blog/urls.py</code>中：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">my_blog<span class="token operator">/</span>urls<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">from</span> article<span class="token punctuation">.</span>views <span class="token keyword">import</span> article_listurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token comment"># home</span>    path<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> article_list<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'home'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再把登录成功后的重定向地址改过来：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">my_blog<span class="token operator">/</span>settings<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 重定向 url</span><span class="token comment">#LOGIN_REDIRECT_URL = '/article/article-list'</span>LOGIN_REDIRECT_URL <span class="token operator">=</span> <span class="token string">'/'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就拥有地址为<code>http://127.0.0.1:8000</code>首页啦。</p><h3 id="美化模板"><a href="#美化模板" class="headerlink" title="美化模板"></a>美化模板</h3><p><code>django-allauth</code>自带的模板是简陋的，需要覆写为自己网站的风格才能使用。</p><p>还记得我们一直在使用的<strong>虚拟环境</strong>吗？没错，所有项目运行所需的第三方库都是保存在虚拟环境的文件夹中的，在本教程中也就是<code>env</code>文件夹了。找到下面的路径：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">env<span class="token punctuation">\</span>Lib<span class="token punctuation">\</span>site-packages<span class="token punctuation">\</span>allauth<span class="token punctuation">\</span>templates<span class="token punctuation">\</span>account<span class="token punctuation">\</span>login.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个<code>login.html</code>就是原始的登录模板文件了。虽然可以直接修改这个文件来优化页面，但是这样做是很蠢的，因为每当你升级库、或者换台电脑部署时，模板又恢复回去了。</p><p>正确的做法是<strong>复制</strong>这个<code>login.html</code>到你自己项目的<code>templates</code>文件夹中去。即你需要在项目中创建一个<strong>完全相同的路径</strong>：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates\account\login.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p> Django会优先在项目中寻找模板文件，因此只要相对路径相同，则可以达到覆写的目的。</p></blockquote><p>接下来就可以愉快的定制风格了。</p><p>参考代码如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates\account\login.html&#123;% extends "base.html" %&#125;&#123;% load i18n %&#125;&#123;% load account socialaccount %&#125;&#123;% block title %&#125;登录&#123;% endblock %&#125;&#123;% block content %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            &#123;% get_providers as socialaccount_providers %&#125;            &#123;% if socialaccount_providers %&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>                &#123;% blocktrans with site.name as site_name %&#125;请登录已有本地账号或<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123; signup_url &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>新账号。                也可以通过第三方登录:&#123;% endblocktrans %&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>socialaccount_ballot<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mb-2 mt-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>第三方登录：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>socialaccount_providers<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                  &#123;% include "socialaccount/snippets/provider_list.html" with process="login" %&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mb-2 mt-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>本地登录：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            &#123;% include "socialaccount/snippets/login_extra.html" %&#125;            &#123;% else %&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&#123;% blocktrans %&#125;If you have not created an account yet, then please            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123; signup_url &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>sign up<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> first.&#123;% endblocktrans %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            &#123;% endif %&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>login<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>login_form<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>account_login<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    &#123;% csrf_token %&#125;                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id_login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>账号: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>login<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入用户名或Email<span class="token punctuation">"</span></span> <span class="token attr-name">autofocus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>autofocus<span class="token punctuation">"</span></span> <span class="token attr-name">required</span>                            <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id_login<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-text text-muted ml-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            还没有账号？                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>account_signup<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> cornflowerblue<span class="token punctuation">;</span> </span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>                                注册新账号                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group mb-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id_password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            密码:                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入密码<span class="token punctuation">"</span></span> <span class="token attr-name">required</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id_password<span class="token punctuation">"</span></span>                            <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-text text-muted ml-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>secondaryAction layui-text<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>account_reset_password<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                忘记密码?                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>custom-control custom-checkbox mb-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>remember<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id_remember<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>custom-control-input<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id_remember<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>custom-control-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            保持登录                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primaryAction btn btn-primary<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit_login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>确认<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>&#123;% endblock %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际效果如下：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190620/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE230.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190620/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE230.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>除了登录页面以外，其他的所有页面，如注册、邮箱认证页面及邮件、第三方登录页面等都可以用这种方法进行覆写。教程中就不再赘述，读者请自行尝试。</p><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p>接下来看看注册页面。</p><p>点击注册按钮，则看到如下页面：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190620/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE221.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190620/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE221.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>需要注意的是<strong>邮箱</strong>这一项如果你填了，那么站点会自动向填写的邮箱发送认证邮件。因此前面章节中讲过的关于邮箱的配置一定要正确，否则就会得到一个<code>ConnectionRefusedError</code>的错误。相关的配置项如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">my_blog<span class="token operator">/</span>settings<span class="token punctuation">.</span>py<span class="token comment"># SMTP服务器</span>EMAIL_HOST <span class="token operator">=</span> <span class="token string">'your smtp'</span><span class="token comment"># 邮箱名</span>EMAIL_HOST_USER <span class="token operator">=</span> <span class="token string">'your email'</span><span class="token comment"># 邮箱密码</span>EMAIL_HOST_PASSWORD <span class="token operator">=</span> <span class="token string">'your password'</span><span class="token comment"># 发送邮件的端口</span>EMAIL_PORT <span class="token operator">=</span> <span class="token number">25</span><span class="token comment"># 是否使用 TLS</span>EMAIL_USE_TLS <span class="token operator">=</span> <span class="token boolean">True</span><span class="token comment"># 默认的发件人</span>DEFAULT_FROM_EMAIL <span class="token operator">=</span> <span class="token string">'your email'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>记得修改为你自己的邮箱配置。</p><p>另外需要注意的是<code>django-allauth</code>所注册的账号与<code>django</code>内置的本地账号是通用的，也就是说通过内置<code>User</code>创建的账号，是可以通过<code>django-allauth</code>登录的。</p><blockquote><p>有了django-allauth，之前教程中写的用户登录、注册以及密码重置模块统统都可以不要了。那既然如此，博主绕了这么大个弯不是坑人吗？这个嘛，学习就是要变着法折腾..</p></blockquote><h2 id="GitHub登录"><a href="#GitHub登录" class="headerlink" title="GitHub登录"></a>GitHub登录</h2><p>搞定了本地登录，接下来的第三方登录才是重点。</p><p>由于<strong>GitHub</strong>的第三方登录是最容易的，因此作为例子来讲解。</p><blockquote><p>作为合格的程序员，怎么能没有GitHub账号！</p></blockquote><h3 id="GitHub注册OAuth"><a href="#GitHub注册OAuth" class="headerlink" title="GitHub注册OAuth"></a>GitHub注册OAuth</h3><p>创建第三方登录的第一步，是需要在GitHub网站上创建OAuth应用。登录GitHub账号，然后进入地址：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://github.com/settings/applications/new<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不排除以后这个地址会变，如果不对就麻烦读者在个人主页的<code>settings</code>里找一找<code>OAuth</code>的设置了。</p><p>进入页面后，填写一下内容：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190621/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE222.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190621/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE222.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>填写的是本地IP，以后部署在线上再修改成实际的域名。</p><p>注意<code>callback URL</code>填写的内容。点击确定后，就得到了应用的信息：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190621/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE224.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190621/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE224.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>其中的<code>Client ID</code>和<code>Client Secret</code>就是要用到的凭证。</p><h3 id="Django后台配置"><a href="#Django后台配置" class="headerlink" title="Django后台配置"></a>Django后台配置</h3><p>然后对Django后台进行设置。</p><p>进入后台，你会发现多了几个栏目：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190621/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE225.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190621/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE225.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>打开<code>Sites</code>，将<code>example.com</code>修改为博客域名。开发时则修改为本地IP：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190621/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE226.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190621/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE226.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>然后进入<code>Social applications</code>，添加一条<code>applications</code>如下：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190621/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE228.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190621/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE228.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>注意最下面的<code>Sites</code>栏<strong>一定要把刚才添加的站点选择到右边去</strong>。</p><p>回到<code>django-allauth</code>的登录页面，点击<code>github</code>登录：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190621/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE229.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190621/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE229.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>实现了GitHub登录。</p><h2 id="allauth配置项"><a href="#allauth配置项" class="headerlink" title="allauth配置项"></a>allauth配置项</h2><p><strong>挑几个比较重要的讲一下。</strong></p><p><code>ACCOUNT_EMAIL_VERIFICATION = &#39;optional&#39; / &#39;mandatory&#39; / &#39;none&#39;</code>：当其为<code>mandatory</code>时，本地注册的用户必须先验证邮箱才可以登录。<code>optional</code>和<code>none</code>都不要求验证邮箱，区别是<code>optional</code>仍然会发送验证邮件，而<code>none</code>连认证邮件都不会发送。</p><p><code>SOCIALACCOUNT_EMAIL_VERIFICATION = &#39;optional&#39; / &#39;mandatory&#39; / &#39;none&#39;</code>：同理，但是作用于第三方账号的注册。</p><p><code>ACCOUNT_AUTHENTICATION_METHOD = &#39;username_email&#39; / &#39;user&#39; / &#39;email&#39;</code>：指定登录方法，即通过用户名、邮箱进行登录，或者两者均可。</p><p><code>ACCOUNT_EMAIL_REQUIRED =  True / False</code>：注册本地用户时，是否必须填写邮箱。</p><p>除此之外还有很多配置项，详细了解请查阅<a href="https://django-allauth.readthedocs.io/en/latest/configuration.html">官方文档</a>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章学习了通过<code>django-allauth</code>实现本地及GitHub登录的功能。微博、微信的登录方式大致都遵循这个流程；本章虽然加载了微博的接口，但是限于篇幅并没有配置，请读者查阅官方文档去实现。需要注意的是国内的第三方登录多半需要一两天时间去申请、审核，要更加麻烦一些。</p><p>另外还剩下写入口、删除旧功能等收尾工作，就交给读者自己去完成了。</p><blockquote><p>提示一下，登录的逆向解析地址为<code>&#123;% url 'account_login' %&#125;</code>，注册为<code>&#123;% url 'account_signup' %&#125;</code>。这些在原始模板文件或官方网站都能查到。</p></blockquote><hr><ul><li>有疑问请在<a href="http://www.dusaiphoto.com/">杜赛的个人网站</a>留言，我会尽快回复。</li><li>或Email私信我：<a href="mailto:&#x64;&#x75;&#115;&#97;&#x69;&#112;&#x68;&#111;&#116;&#111;&#64;&#x66;&#111;&#x78;&#109;&#x61;&#x69;&#108;&#x2e;&#99;&#111;&#x6d;">&#x64;&#x75;&#115;&#97;&#x69;&#112;&#x68;&#111;&#116;&#111;&#64;&#x66;&#111;&#x78;&#109;&#x61;&#x69;&#108;&#x2e;&#99;&#111;&#x6d;</a></li><li>项目完整代码：<a href="https://github.com/stacklens/django_blog_tutorial">Django_blog_tutorial</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--36.自动化测试</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/36.zi-dong-hua-ce-shi/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/36.zi-dong-hua-ce-shi/</url>
      
        <content type="html"><![CDATA[<p>测试是伴随着开发进行的，<strong>开发有多久，测试就要多久</strong>。本教程已经进行了30多章了，都是如何测试的？当然是<code>runserver</code>啦！每当开发新功能后，都需要运行服务器，假装自己就是用户，测试是否运行正常。</p><p>这样的人工测试优点是非常直观，你看到的和用户看到的是完全相同的。但是缺点也很明显：</p><ul><li><strong>效率低。</strong>在开发时可能你需要反复的修改代码、测试功能，这样重复查看几十次甚至几百次网页时会相当的让人烦躁。</li><li><strong>容易遗漏bug。</strong>随着你的项目越来越复杂，组件之间的交互也更加复杂。修改某一个组件可能会导致另一个组件出现意想不到的bug，但是在人工测试时却很难检查出来，总不能每写几行代码就把整个网站统统检查一遍吧。过了很久之后你终于发现了这个bug，但此时你已经搞不清它来源于什么地方了。</li><li><strong>有的测试不方便进行。</strong>比如说有个功能，限制每个用户每天发表评论不能超过10条，人工测试就显得比较麻烦，特别是需要反复调试的时候。</li></ul><p>为了解决人工测试的种种问题，<code>Django</code>引入了<code>Python</code>标准库的单元测试模块，也就是<strong>自动化测试</strong>了：你可以写一段代码，让代码帮你测试！（程序员是最会偷懒的职业..）代码会忠实的完成测试任务，帮助你从繁重的测试工作中解脱出来。除此之外，自动化测试还有以下优点：</p><ul><li><strong>预防错误。</strong>当应用过于复杂时，代码的意图会变得非常不清晰，甚至你都看不懂自己写的代码，这是很常见的。而测试就好像是从内部审查代码一样，可以帮助你发现微小的错误。</li><li><strong>有利于团队协作。</strong>良好的测试保证其他人不会不小心破坏了你的代码（也保证你不会不小心弄坏别人的..）。现在已经不是单打独斗出英雄的年代了，想要成为优秀的Django程序员，你必须擅长编写测试！</li></ul><p>虽然学习自动化测试不会让你的博客增加一丝丝的功能，但是可以<strong>让代码更加强壮</strong>，所以我觉得很有必要拿出一章来专门讲讲。</p><blockquote><p><a href="https://docs.djangoproject.com/zh-hans/2.2/intro/tutorial05/">Django官方文档的第5部分</a>讲测试讲得非常的好，并且有中文版本。本章节就大量借鉴了官方文档，也非常非常推荐读者去拜读。</p></blockquote><h2 id="第一个测试"><a href="#第一个测试" class="headerlink" title="第一个测试"></a>第一个测试</h2><h3 id="给我bug！"><a href="#给我bug！" class="headerlink" title="给我bug！"></a>给我bug！</h3><p>为了演示测试是如何工作的，让我们首先在<strong>文章模型</strong>中写个有bug的方法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>models<span class="token punctuation">.</span>py<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils <span class="token keyword">import</span> timezone<span class="token keyword">class</span> <span class="token class-name">ArticlePost</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">was_created_recently</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 若文章是"最近"发表的，则返回 True</span>        diff <span class="token operator">=</span> timezone<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>created        <span class="token keyword">if</span> diff<span class="token punctuation">.</span>days <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token keyword">and</span> diff<span class="token punctuation">.</span>seconds <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个方法用于检测当前文章是否是最近发表的。</p><blockquote><p>这个方法稍微扩展一下就会变得非常实用。比如可以将博文的发表日期显示为“刚刚”、“3分钟前”、“5小时前”等相对时间，用户体验将大有提升。</p></blockquote><p>仔细看看，它是没办法正确判断“未来”的文章的：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> datetime<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> django<span class="token punctuation">.</span>utils <span class="token keyword">import</span> timezone<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> ArticlePost<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token comment"># 创建一篇"未来"的文章</span><span class="token operator">>></span><span class="token operator">></span> future_article <span class="token operator">=</span> ArticlePost<span class="token punctuation">(</span>author<span class="token operator">=</span>User<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'test'</span><span class="token punctuation">,</span>body<span class="token operator">=</span><span class="token string">'test'</span><span class="token punctuation">,</span> created<span class="token operator">=</span>timezone<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 是否是“最近”发表的？</span><span class="token operator">>></span><span class="token operator">></span> future_article<span class="token punctuation">.</span>was_created_recently<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>未来发生的肯定不是最近发生的，因此代码是错误的。</p><h3 id="写个测试暴露bug"><a href="#写个测试暴露bug" class="headerlink" title="写个测试暴露bug"></a>写个测试暴露bug</h3><p>接下来就要写测试用例，将测试转为自动化。</p><p>还记得最初生成<strong>文章app</strong>时候的目录结构吗？</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">article │  admin.py │  apps.py │  models.py │  tests.py │  views.py │  __init__.py │ └─migrations       └─ __init__.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个<code>tests.py</code>就是留给你写测试用例的地方了：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>tests<span class="token punctuation">.</span>py<span class="token keyword">from</span> django<span class="token punctuation">.</span>test <span class="token keyword">import</span> TestCase<span class="token keyword">import</span> datetime<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils <span class="token keyword">import</span> timezone<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> ArticlePost<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">class</span> <span class="token class-name">ArticlePostModelTests</span><span class="token punctuation">(</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">test_was_created_recently_with_future_article</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 若文章创建时间为未来，返回 False</span>        author <span class="token operator">=</span> User<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">'user'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'test_password'</span><span class="token punctuation">)</span>        author<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>        future_article <span class="token operator">=</span> ArticlePost<span class="token punctuation">(</span>            author<span class="token operator">=</span>author<span class="token punctuation">,</span>            title<span class="token operator">=</span><span class="token string">'test'</span><span class="token punctuation">,</span>            body<span class="token operator">=</span><span class="token string">'test'</span><span class="token punctuation">,</span>            created<span class="token operator">=</span>timezone<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertIs<span class="token punctuation">(</span>future_article<span class="token punctuation">.</span>was_created_recently<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基本就是把刚才在<code>Shell</code>中的测试代码抄了过来。有点不同的是末尾这个<code>assertIs</code>方法，了解<strong>“断言”</strong>的同学会对它很熟悉：它的作用是检测方法内的两个参数是否完全一致，如果不是则抛出异常，提醒你这个地方是有问题滴。</p><p>接下来运行测试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token operator">></span> python manage.py <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Creating test database <span class="token keyword">for</span> alias <span class="token string">'default'</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>System check identified no issues <span class="token punctuation">(</span><span class="token number">0</span> silenced<span class="token punctuation">)</span><span class="token punctuation">.</span>F<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>FAIL<span class="token punctuation">:</span> test_was_created_recently_with_future_article <span class="token punctuation">(</span>article<span class="token punctuation">.</span>tests<span class="token punctuation">.</span>ArticlePostModelTests<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"E:\django_project\my_blog\article\tests.py"</span><span class="token punctuation">,</span> line <span class="token number">19</span><span class="token punctuation">,</span> <span class="token keyword">in</span> test_was_created_recently_with_future_article    self<span class="token punctuation">.</span>assertIs<span class="token punctuation">(</span>future_article<span class="token punctuation">.</span>was_created_recently<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>AssertionError<span class="token punctuation">:</span> <span class="token boolean">True</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">False</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>Ran <span class="token number">1</span> test <span class="token keyword">in</span> <span class="token number">0.</span>000sFAILED <span class="token punctuation">(</span>failures<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>Destroying test database <span class="token keyword">for</span> alias <span class="token string">'default'</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里面名堂就很多了：</p><ul><li>首先测试系统会在所有以<code>tests</code>开头的文件中寻找测试代码</li><li>所有<code>TestCase</code>的子类都被认为是测试代码</li><li>系统创建了一个特殊的数据库供测试使用，即所有测试产生的数据不会对你自己的数据库造成影响</li><li>类中所有以<code>test</code>开头的方法会被认为是测试用例</li><li>在运行测试用例时，<code>assertIs</code>抛出异常，因为<code>True is not False</code></li><li>完成测试后，自动销毁测试数据库</li></ul><p>测试系统明确指明了错误的数量、位置和种类等信息，请读者细细品尝。</p><h3 id="修正bug"><a href="#修正bug" class="headerlink" title="修正bug"></a>修正bug</h3><p>既然通过测试找到了bug，那接下来就要把代码进行修正：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>models<span class="token punctuation">.</span>py<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils <span class="token keyword">import</span> timezone<span class="token keyword">class</span> <span class="token class-name">ArticlePost</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">was_created_recently</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        diff <span class="token operator">=</span> timezone<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>created                <span class="token comment"># if diff.days &lt;= 0 and diff.seconds &lt; 60:</span>        <span class="token keyword">if</span> diff<span class="token punctuation">.</span>days <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> diff<span class="token punctuation">.</span>seconds <span class="token operator">>=</span> <span class="token number">0</span> <span class="token keyword">and</span> diff<span class="token punctuation">.</span>seconds <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新运行测试：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token operator">></span> python manage<span class="token punctuation">.</span>py testCreating test database <span class="token keyword">for</span> alias <span class="token string">'default'</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>System check identified no issues <span class="token punctuation">(</span><span class="token number">0</span> silenced<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>Ran <span class="token number">1</span> test <span class="token keyword">in</span> <span class="token number">0.</span>000sOKDestroying test database <span class="token keyword">for</span> alias <span class="token string">'default'</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这次代码顺利通过了测试。</p><p>可以肯定的是，在往后的开发中，这个bug不会再出现了，因为你只需要运行一遍测试，就会立即得到警告。<strong>可以认为项目的这一小部分代码永远是安全的</strong>。</p><h3 id="更全面的测试"><a href="#更全面的测试" class="headerlink" title="更全面的测试"></a>更全面的测试</h3><p>既然一个测试用例就可以保证一小段代码永远安全，那我写一堆测试岂不是可以保证整个项目永远安全吗？确实如此，这个买卖绝对是不亏的。</p><p>因此我们继续再增加几个测试，全面强化代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>tests<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>test <span class="token keyword">import</span> TestCase<span class="token keyword">import</span> datetime<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils <span class="token keyword">import</span> timezone<span class="token keyword">from</span> article<span class="token punctuation">.</span>models <span class="token keyword">import</span> ArticlePost<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">class</span> <span class="token class-name">ArticlePostModelTests</span><span class="token punctuation">(</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">test_was_created_recently_with_future_article</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 若文章创建时间为未来，返回 False</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">test_was_created_recently_with_seconds_before_article</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 若文章创建时间为 1 分钟内，返回 True</span>        author <span class="token operator">=</span> User<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">'user1'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'test_password'</span><span class="token punctuation">)</span>        author<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>        seconds_before_article <span class="token operator">=</span> ArticlePost<span class="token punctuation">(</span>            author<span class="token operator">=</span>author<span class="token punctuation">,</span>            title<span class="token operator">=</span><span class="token string">'test1'</span><span class="token punctuation">,</span>            body<span class="token operator">=</span><span class="token string">'test1'</span><span class="token punctuation">,</span>            created<span class="token operator">=</span>timezone<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">45</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertIs<span class="token punctuation">(</span>seconds_before_article<span class="token punctuation">.</span>was_created_recently<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_was_created_recently_with_hours_before_article</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 若文章创建时间为几小时前，返回 False</span>        author <span class="token operator">=</span> User<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">'user2'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'test_password'</span><span class="token punctuation">)</span>        author<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>        hours_before_article <span class="token operator">=</span> ArticlePost<span class="token punctuation">(</span>            author<span class="token operator">=</span>author<span class="token punctuation">,</span>            title<span class="token operator">=</span><span class="token string">'test2'</span><span class="token punctuation">,</span>            body<span class="token operator">=</span><span class="token string">'test2'</span><span class="token punctuation">,</span>            created<span class="token operator">=</span>timezone<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>hours<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertIs<span class="token punctuation">(</span>hours_before_article<span class="token punctuation">.</span>was_created_recently<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_was_created_recently_with_days_before_article</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 若文章创建时间为几天前，返回 False</span>        author <span class="token operator">=</span> User<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">'user3'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'test_password'</span><span class="token punctuation">)</span>        author<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>        months_before_article <span class="token operator">=</span> ArticlePost<span class="token punctuation">(</span>            author<span class="token operator">=</span>author<span class="token punctuation">,</span>            title<span class="token operator">=</span><span class="token string">'test3'</span><span class="token punctuation">,</span>            body<span class="token operator">=</span><span class="token string">'test3'</span><span class="token punctuation">,</span>            created<span class="token operator">=</span>timezone<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertIs<span class="token punctuation">(</span>months_before_article<span class="token punctuation">.</span>was_created_recently<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在我们拥有了4个测试，来保证<code>was_created_recently()</code>方法对于<strong>过去</strong>、<strong>最近</strong>、<strong>未来</strong>中的4种情况都返回正确的值。你还可以继续扩展，直到你觉得完全没有任何bug藏匿的可能性为止。</p><p>在实际的开发中，有些难缠的bug会把自己伪装得非常的好，而不是像教程这样明确的知道它就在那里。有了自动化测试，无论以后你的项目怎么变化、app交互多么的复杂，只要在测试中写好的逻辑就一定是符合预期的，而你所需要做的只是运行一条测试指令而已。</p><blockquote><p>虽然教程中仅使用了<code>assertIs</code>，但实际上Django中的断言有大概几十种之多，比如<code>assertEqual</code>、<code>assertContains</code>等，并且还在不断更新。详见<a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase">Python标准断言</a>和<a href="https://docs.djangoproject.com/zh-hans/2.2/topics/testing/tools/#assertions">Django扩展断言</a></p></blockquote><h2 id="测试视图"><a href="#测试视图" class="headerlink" title="测试视图"></a>测试视图</h2><p>上面的测试都是针对模型的。<strong>视图</strong>该怎么测试？如何通过测试系统模拟出用户的请求呢？</p><p>答案是<code>TestCase</code>类提供了一个供测试使用的<code>Client</code>来模拟用户通过请求和视图层代码的交互。</p><p>以<strong>文章详情视图</strong>的<strong>浏览量统计</strong>为例，比较容易出现的潜在bug有：</p><ul><li>增加的浏览量未能正常保存进数据库（即每次请求则浏览量+1）</li><li>增加浏览量的同时，<code>updated</code>字段也错误的一并更新</li></ul><p>所以有针对的写2条测试。新写一个专门<strong>测试视图的类</strong>，与前面的<strong>测试模型的类</strong>区分开：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>tests<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> reverse<span class="token keyword">class</span> <span class="token class-name">ArticlePostModelTests</span><span class="token punctuation">(</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">ArtitclePostViewTests</span><span class="token punctuation">(</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">test_increase_views</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 请求详情视图时，阅读量 +1</span>        author <span class="token operator">=</span> User<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">'user4'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'test_password'</span><span class="token punctuation">)</span>        author<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>        article <span class="token operator">=</span> ArticlePost<span class="token punctuation">(</span>            author<span class="token operator">=</span>author<span class="token punctuation">,</span>            title<span class="token operator">=</span><span class="token string">'test4'</span><span class="token punctuation">,</span>            body<span class="token operator">=</span><span class="token string">'test4'</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span>        article<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertIs<span class="token punctuation">(</span>article<span class="token punctuation">.</span>total_views<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        url <span class="token operator">=</span> reverse<span class="token punctuation">(</span><span class="token string">'article:article_detail'</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>article<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        response <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        viewed_article <span class="token operator">=</span> ArticlePost<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span>article<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertIs<span class="token punctuation">(</span>viewed_article<span class="token punctuation">.</span>total_views<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_increase_views_but_not_change_updated_field</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 请求详情视图时，不改变 updated 字段</span>        author <span class="token operator">=</span> User<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">'user5'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'test_password'</span><span class="token punctuation">)</span>        author<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>        article <span class="token operator">=</span> ArticlePost<span class="token punctuation">(</span>            author<span class="token operator">=</span>author<span class="token punctuation">,</span>            title<span class="token operator">=</span><span class="token string">'test5'</span><span class="token punctuation">,</span>            body<span class="token operator">=</span><span class="token string">'test5'</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span>        article<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>        url <span class="token operator">=</span> reverse<span class="token punctuation">(</span><span class="token string">'article:article_detail'</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>article<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        response <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        viewed_article <span class="token operator">=</span> ArticlePost<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span>article<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertIs<span class="token punctuation">(</span>viewed_article<span class="token punctuation">.</span>updated <span class="token operator">-</span> viewed_article<span class="token punctuation">.</span>created <span class="token operator">&lt;</span> timezone<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意看代码是如何与<strong>视图层</strong>交互的：<code>response = self.client.get(url)</code>向视图发起请求并获得了响应，剩下的就是从数据库中取出更新后的数据，并用<strong>断言</strong>语句来判断代码是否符合预期了。</p><p>运行测试：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token operator">></span> python manage<span class="token punctuation">.</span>py testCreating test database <span class="token keyword">for</span> alias <span class="token string">'default'</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>System check identified no issues <span class="token punctuation">(</span><span class="token number">0</span> silenced<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>Ran <span class="token number">6</span> tests <span class="token keyword">in</span> <span class="token number">0.</span>617sOKDestroying test database <span class="token keyword">for</span> alias <span class="token string">'default'</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6条测试用例全部通过。</p><h2 id="越多越好的测试"><a href="#越多越好的测试" class="headerlink" title="越多越好的测试"></a>越多越好的测试</h2><p>仅仅是app中的两个非常小的功能，就已经写了6条测试用例了，并且还可以继续扩展。除此之外，其他的每个模型、视图都可以扩展出几十甚至上百条测试，这样下去代码总量很快就要失去控制了，并且相对于业务代码来说，测试代码显得繁琐且不够优雅。</p><p><strong>但是没关系！</strong>就让测试代码继续肆意增长吧。大部分情况下，你写完一个测试之后就可以忘掉它了。在你继续开发的过程中，它会一直默默无闻地为你做贡献的。最坏的情况是当你继续开发的时候，发现之前的一些测试现在看来是多余的。但是这也不是什么问题，多做些测试也不错。</p><h2 id="深入代码测试"><a href="#深入代码测试" class="headerlink" title="深入代码测试"></a>深入代码测试</h2><p>在前面的测试中，我们已经从模型层和视图层的角度检查了应用的输入输出，但是模板呢？虽然可以用<code>assertInHTML</code>、<code>assertJSONEqual</code>等断言大致检查模板中的某些内容，但更加近似于浏览器的检查就要使用<code>Selenium</code>等测试工具（毕竟Django的重点是后端而不是前端）。</p><p><code>Selenium</code>不仅可以测试 Django 框架里的代码，甚至还可以检查 JavaScript代码。它假装成是一个正在和你站点进行交互的浏览器，就好像有个真人在访问网站一样。Django 提供了<code>LiveServerTestCase</code>来和<code>Selenium</code>这样的工具进行交互。</p><p>关于测试的话题这里只是开了个头，读者可以继续阅读下面的内容进一步了解：</p><ul><li><a href="https://docs.djangoproject.com/en/2.2/topics/testing/overview/">Django: Writing and running tests</a></li><li><a href="https://docs.djangoproject.com/en/2.2/topics/testing/tools/">Django: Testing tools</a></li><li><a href="https://docs.djangoproject.com/en/2.2/topics/testing/advanced/">Django: Advanced testing topics</a></li><li><a href="https://selenium-python.readthedocs.io/getting-started.html">Selenium官方文档</a></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>有一帮崇尚“测试驱动”的开发者，他们开发时先写测试代码，然后才写业务代码。而普通开发者通常是先写业务代码，再写测试代码，这也是没问题的。但如果你已经写了很多业务代码了，再回头写测试确实有些无从下手，那么至少在以后写新功能时，记得加上测试。测试写得好不好，甚至比功能本身更能看出编程水平。</p><p>测试可以让代码更加强壮。项目没出bug时，皆大欢喜，有没有测试都一样；一旦出现难缠的bug，你就会无比想念一套完善的测试代码了。</p><p>博主写自己的网站时就没有对测试给与足够的重视，回想起来走了很多弯路。希望读者以前车之鉴，培养良好的编程习惯。</p><hr><ul><li>有疑问请在<a href="http://www.dusaiphoto.com/">杜赛的个人网站</a>留言，我会尽快回复。</li><li>或Email私信我：<a href="mailto:&#100;&#117;&#115;&#x61;&#x69;&#x70;&#x68;&#111;&#x74;&#x6f;&#64;&#x66;&#111;&#120;&#x6d;&#97;&#105;&#108;&#46;&#99;&#111;&#x6d;">&#100;&#117;&#115;&#x61;&#x69;&#x70;&#x68;&#111;&#x74;&#x6f;&#64;&#x66;&#111;&#120;&#x6d;&#97;&#105;&#108;&#46;&#99;&#111;&#x6d;</a></li><li>项目完整代码：<a href="https://github.com/stacklens/django_blog_tutorial">Django_blog_tutorial</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--37.日志记录</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/37.ri-zhi-ji-lu/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/37.ri-zhi-ji-lu/</url>
      
        <content type="html"><![CDATA[<p>上一章学习了自动化测试，很好，现在我们可以绞尽脑汁写出一份全面的测试，来保证代码永远健康了。</p><p>话虽如此，但是作为一个独立开发者<strong>很难写出真正全面的测试代码</strong>。这是因为用户在使用你的网站时可不会循规蹈矩，而是会以各种怪异的姿势浏览网页、上传数据。但这也不是坏事，用户就是天然的测试人员，他们会很可爱的帮你找出一大堆的bug，陪你度过难眠的夜晚（伴随着编程能力的提升）。</p><p>现在的问题是，开发者如何得知用户到底遇到了哪些问题？用户们大部分都与你素昧平生，分部在世界各地。更糟糕的是，部署在线上时由于配置了<code>DEBUG = False</code>，出错时并不会出现报错页面，连用户自己都不清楚到底是哪里有bug。</p><p>Django给你的答案：<strong>日志</strong>。</p><h2 id="日志的组成"><a href="#日志的组成" class="headerlink" title="日志的组成"></a>日志的组成</h2><p><strong>日志</strong>是指程序在运行过程中，对状态、时间、错误等的记录。即把运行过程中产生的信息输出或保存起来，供开发者查阅。</p><p>Django使用Python内置的<code>logging</code>模块处理日志。关于该模块的使用，<a href="https://docs.python.org/3/howto/logging.html">Python文档</a>里有非常详细的讨论。如果你从未用过，本文提供一个快速入门。</p><p>日志事件的信息流程如下：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190716/logging_flow.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190716/logging_flow.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><blockquote><p>这个图看不懂也没关系。以后你需要深度使用日志时，会回来仔细研究它的。</p></blockquote><p>一份日志配置由<code>Loggers</code>、<code>Handlers</code>、<code>Filters</code>、<code>Formatters</code>四部分组成。</p><h3 id="Loggers"><a href="#Loggers" class="headerlink" title="Loggers"></a>Loggers</h3><p><code>Logger</code>即<strong>记录器</strong>，是日志系统的入口。<strong>它有三个重要的工作</strong>：</p><ul><li>向应用程序（也就是你的项目）公开几种方法，以便运行时记录消息</li><li>根据传递给Logger的消息的严重性，确定出需要处理的消息</li><li>将需要处理的消息传递给所有感兴趣的处理器（<code>Handler</code>）</li></ul><p>每一条写入logger的消息都是一条日志记录。每一条日志记录也包含<strong>级别</strong>，代表对应消息的严重程度。常用的级别如下：</p><ul><li><code>DEBUG</code>：排查故障时使用的低级别系统信息，通常开发时使用</li><li><code>INFO</code>：一般的系统信息，并不算问题</li><li><code>WARNING</code>：描述系统发生的小问题的信息，但通常不影响功能</li><li><code>ERROR</code>：描述系统发生的大问题的信息，可能会导致功能不正常</li><li><code>CRITICAL</code>：描述系统发生严重问题的信息，应用程序有崩溃风险</li></ul><p>当logger处理一条消息时，会将自己的日志级别和这条消息的日志级别做对比。如果消息的级别匹配或者高于logger的日志级别，它就会被进一步处理；否则这条消息就会被忽略掉。</p><p>当logger确定了一条消息需要处理之后，会把它传给<code>Handler</code>。</p><h3 id="Handlers"><a href="#Handlers" class="headerlink" title="Handlers"></a>Handlers</h3><p><code>Handler</code>即<strong>处理器</strong>，它的主要功能是<strong>决定如何处理logger中每一条消息</strong>，比如把消息输出到屏幕、文件或者Email中。</p><p>和logger一样，handler也有<strong>级别</strong>的概念。如果一条日志记录的级别不匹配或者低于handler的日志级别，则会被handler忽略。</p><p>一个logger可以有多个handler，每一个handler可以有不同的日志级别。这样就可以根据消息的重要性不同，来提供不同类型的输出。例如，你可以添加一个handler把<code>ERROR</code>和<code>CRITICAL</code>消息发到你的Email，再添加另一个 handler把所有的消息（包括<code>ERROR</code>和<code>CRITICAL</code>消息）保存到文件里。</p><h3 id="Filters"><a href="#Filters" class="headerlink" title="Filters"></a>Filters</h3><p><code>Filter</code>即<strong>过滤器</strong>。在日志记录从logger传到handler的过程中，使用<code>Filter</code>来<strong>做额外的控制</strong>。例如只允许某个特定来源的<code>ERROR</code>消息输出。</p><p>Filter还被用来在日志输出之前对日志记录做修改。例如当满足一定条件时，把日志记录从 <code>ERROR</code> 降到 <code>WARNING</code> 级别。</p><p>Filter在logger和handler中都可以添加；多个filter可以链接起来使用，来做多重过滤操作。</p><h3 id="Formatters"><a href="#Formatters" class="headerlink" title="Formatters"></a>Formatters</h3><p><code>Formatter</code>即格式化器，主要功能是<strong>确定最终输出的形式和内容</strong>。</p><h2 id="日志配置示例"><a href="#日志配置示例" class="headerlink" title="日志配置示例"></a>日志配置示例</h2><p>说了这么多脑壳都说晕了，接下来看两个示例。</p><h3 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h3><p>在Django中可以通过字典的形式对整个项目的日志进行配置，配置的位置当然是在<code>settings.py</code>中了。一个简单的配置如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">my_blog<span class="token operator">/</span>settings<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">import</span> osLOGGING <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'version'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string">'disable_existing_loggers'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>    <span class="token string">'handlers'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">'file'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">'level'</span><span class="token punctuation">:</span> <span class="token string">'DEBUG'</span><span class="token punctuation">,</span>            <span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'logging.FileHandler'</span><span class="token punctuation">,</span>            <span class="token string">'filename'</span><span class="token punctuation">:</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'logs/debug.log'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">'loggers'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">'django'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">'handlers'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'level'</span><span class="token punctuation">:</span> <span class="token string">'DEBUG'</span><span class="token punctuation">,</span>            <span class="token string">'propagate'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字典中的<code>version</code>指明了配置的版本；<code>disable_existing_loggers</code>指明是否禁止默认配置的记录器。这两项通常不需要去改动，重点看下<code>loggers</code>和<code>handlers</code>的配置：</p><ul><li>如前面说，一条消息首先传递给logger。Django中内置了几种记录器，比如这里用到的<code>Django</code>记录器，它会接收Django层次结构中的所有消息。然后我们定义了需要处理<code>DEBUG</code>以上级别的消息，并把这些消息传递给名叫<code>file</code>的处理器。<code>&#39;propagate&#39;: True</code>意思是本记录器处理过的消息其他处理器也可以继续处理。</li><li>现在消息来到名叫<code>file</code>的<code>handlers</code>中了。这个处理器定义了消息处理级别仍然为DEBUG，在class中定义将消息输出到文件中去，文件地址为项目目录的<code>logs/debug.log</code>。</li><li>因为这里没有配置<code>filters</code>和<code>formatters</code>，因此会采用默认的设置。</li></ul><p>需要注意的是日志的输出文件的目录<code>logs/</code>一定要提前创建好，并且确保项目拥有此目录的写入权限。</p><p>这个日志系统就配置好了！接下来运行项目，随便刷新几个页面看看<code>debug.log</code>中有没有写入消息：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">logs<span class="token operator">/</span>debug<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token number">0.001</span><span class="token punctuation">)</span>             SELECT name<span class="token punctuation">,</span> <span class="token builtin">type</span> FROM sqlite_master            WHERE <span class="token builtin">type</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'table'</span><span class="token punctuation">,</span> <span class="token string">'view'</span><span class="token punctuation">)</span> AND NOT name<span class="token operator">=</span><span class="token string">'sqlite_sequence'</span>            ORDER BY name<span class="token punctuation">;</span> args<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">(</span><span class="token number">0.000</span><span class="token punctuation">)</span> SELECT <span class="token string">"django_migrations"</span><span class="token punctuation">.</span><span class="token string">"app"</span><span class="token punctuation">,</span> <span class="token string">"django_migrations"</span><span class="token punctuation">.</span><span class="token string">"name"</span> FROM <span class="token string">"django_migrations"</span><span class="token punctuation">;</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>debug.log</code>文件中出现了一大堆冗长的信息，因为<code>DEBUG</code>级别会包含所有的数据库查询记录。</p><blockquote><p>默认情况下，仅在调试模式下才会显示<code>DEBUG</code>级别的消息日志，部署在线上时只会将<code>INFO</code>或以上的信息进行记录。</p></blockquote><p>再试试别的。把上面代码中记录器和处理器的日志级别都改为<code>INFO</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">LOGGING <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token string">'handlers'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">'file'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">'level'</span><span class="token punctuation">:</span> <span class="token string">'INFO'</span><span class="token punctuation">,</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">'loggers'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">'django'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">'level'</span><span class="token punctuation">:</span> <span class="token string">'INFO'</span><span class="token punctuation">,</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再刷新几次界面，看看输出的内容：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">"GET /article/article-list/ HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">14438</span><span class="token string">"GET /article/article-detail/32/ HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">33364</span><span class="token string">"GET /accounts/login/ HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">7180</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这次清爽多了，输出的主要是页面的拉取信息。</p><p>让我们再看看<code>ERROR</code>信息长什么样的。在地址栏输入一个不存在的文章详情页面地址：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://127.0.0.1:8000/article/article-detail/9999/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>很明显这会得到一个数据不存在的报错：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Internal Server Error<span class="token punctuation">:</span> <span class="token operator">/</span>article<span class="token operator">/</span>article<span class="token operator">-</span>detail<span class="token operator">/</span><span class="token number">9999</span><span class="token operator">/</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"E:\django_project\env\lib\site-packages\django\core\handlers\exception.py"</span><span class="token punctuation">,</span> line <span class="token number">34</span><span class="token punctuation">,</span> <span class="token keyword">in</span> inner    response <span class="token operator">=</span> get_response<span class="token punctuation">(</span>request<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>article<span class="token punctuation">.</span>models<span class="token punctuation">.</span>ArticlePost<span class="token punctuation">.</span>DoesNotExist<span class="token punctuation">:</span> ArticlePost matching query does <span class="token keyword">not</span> exist<span class="token punctuation">.</span><span class="token string">"GET /article/article-detail/9999/ HTTP/1.1"</span> <span class="token number">500</span> <span class="token number">80792</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ERROR</code>日志输出了整个bug的回溯，和你在浏览器中的报错是完全一样的，这些信息就非常的有用了。基本上<code>ERROR</code>信息能够暴露出用户在使用你的网站过程中的大部分问题；也就是说每一个<code>ERROR</code>都是需要你去解决掉的。<code>ERROR</code>信息的<strong>错误码</strong>通常都是“500”，也就是<strong>服务器内部错误</strong>的代码。</p><p>不过仔细想想，似乎找不到对应的资源在很多时候并不是bug，而是用户在输入url时自己犯了错误。所以我们把文章详情视图的<code>ArticlePost.objects.get(id=id)</code>改成<code>get_object_or_404(ArticlePost, id=id)</code>试试：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> get_object_or_404<span class="token keyword">def</span> <span class="token function">article_detail</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 取出相应的文章</span>    <span class="token comment"># article = ArticlePost.objects.get(id=id)</span>    article <span class="token operator">=</span> get_object_or_404<span class="token punctuation">(</span>ArticlePost<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token builtin">id</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务器重启后再次刷新一个不存在的页面，看看日志：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Not Found<span class="token punctuation">:</span> <span class="token operator">/</span>article<span class="token operator">/</span>article<span class="token operator">-</span>detail<span class="token operator">/</span><span class="token number">9999</span><span class="token operator">/</span><span class="token string">"GET /article/article-detail/9999/ HTTP/1.1"</span> <span class="token number">404</span> <span class="token number">1780</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>现在它不是一条<code>ERROR</code>信息了，而是变为了<code>WARNING</code>，所以也没有了错误回溯（错误码也由 500 变成了 404）。这里就能看出这两个方法的重要区别了；在项目中到底选择哪个没有定论，还是以你的具体需求决定。</p><h3 id="复杂示例"><a href="#复杂示例" class="headerlink" title="复杂示例"></a>复杂示例</h3><p>接下来再看一个复杂的日志配置：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">LOGGING <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'version'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string">'disable_existing_loggers'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>    <span class="token string">'formatters'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">'verbose'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">'format'</span><span class="token punctuation">:</span> <span class="token string">'&#123;levelname&#125; &#123;asctime&#125; &#123;module&#125; &#123;process:d&#125; &#123;thread:d&#125; &#123;message&#125;'</span><span class="token punctuation">,</span>            <span class="token string">'style'</span><span class="token punctuation">:</span> <span class="token string">'&#123;'</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token string">'simple'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">'format'</span><span class="token punctuation">:</span> <span class="token string">'&#123;levelname&#125; &#123;message&#125;'</span><span class="token punctuation">,</span>            <span class="token string">'style'</span><span class="token punctuation">:</span> <span class="token string">'&#123;'</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">'filters'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">'require_debug_true'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">'()'</span><span class="token punctuation">:</span> <span class="token string">'django.utils.log.RequireDebugTrue'</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">'handlers'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">'console'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">'level'</span><span class="token punctuation">:</span> <span class="token string">'INFO'</span><span class="token punctuation">,</span>            <span class="token string">'filters'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'require_debug_true'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'logging.StreamHandler'</span><span class="token punctuation">,</span>            <span class="token string">'formatter'</span><span class="token punctuation">:</span> <span class="token string">'simple'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token string">'mail_admins'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">'level'</span><span class="token punctuation">:</span> <span class="token string">'ERROR'</span><span class="token punctuation">,</span>            <span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'django.utils.log.AdminEmailHandler'</span><span class="token punctuation">,</span>            <span class="token string">'formatter'</span><span class="token punctuation">:</span> <span class="token string">'verbose'</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token string">'file'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">'level'</span><span class="token punctuation">:</span> <span class="token string">'WARNING'</span><span class="token punctuation">,</span>            <span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'logging.FileHandler'</span><span class="token punctuation">,</span>            <span class="token string">'filename'</span><span class="token punctuation">:</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'logs/debug.log'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'formatter'</span><span class="token punctuation">:</span> <span class="token string">'verbose'</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">'loggers'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">'django'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">'handlers'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'console'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'propagate'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token string">'django.request'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">'handlers'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">,</span> <span class="token string">'mail_admins'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'level'</span><span class="token punctuation">:</span> <span class="token string">'WARNING'</span><span class="token punctuation">,</span>            <span class="token string">'propagate'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>让我们来分解一下此配置。</p><p>配置中定义了<strong>两个格式化器</strong>：</p><ul><li><code>verbose</code>：详细的格式化器，依次输出：消息级别、发生时间、抛出模块、进程ID、线程ID、提示信息</li><li><code>simple</code>：简要的格式化器，仅输出消息级别和提示信息</li></ul><p><strong>一个过滤器</strong>：</p><ul><li><code>require_debug_true</code>：使用此过滤器的消息仅在调试时才会生效</li></ul><p><strong>三个处理器</strong>：</p><ul><li><code>console</code>：处理<code>INFO</code>以上级别消息，输出简要信息到命令行中；此处理器仅在调试模式生效</li><li><code>mail_admins</code>：处理<code>ERROR</code>以上级别消息，输出详细信息到Email中</li><li><code>file</code>：处理<code>WARNING</code>以上级别消息，输出详细信息到文件中</li></ul><p><strong>两个记录器</strong>：</p><ul><li><code>django</code>：将django产生的所有消息转交给<code>console</code>处理器</li><li><code>django.request</code>：将网络请求相关消息转交给<code>file</code>、<code>mail_admins</code>这两个处理器。注意这里的<code>&#39;propagate&#39;: False</code>使得此记录器处理过的消息就不再让<code>django</code>记录器再次处理了</li></ul><p>读者可以尝试制造不同级别的消息，看看日志系统是否正常工作。当然最重要的，跟Email有关的配置一定要事先把Email给设置好，即下面的内容填成你的：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># SMTP服务器</span>EMAIL_HOST <span class="token operator">=</span> <span class="token string">'your smtp'</span><span class="token comment"># 邮箱名</span>EMAIL_HOST_USER <span class="token operator">=</span> <span class="token string">'your email'</span><span class="token comment"># 邮箱密码</span>EMAIL_HOST_PASSWORD <span class="token operator">=</span> <span class="token string">'your password'</span><span class="token comment"># 发送邮件的端口</span>EMAIL_PORT <span class="token operator">=</span> <span class="token number">25</span><span class="token comment"># 是否使用 TLS</span>EMAIL_USE_TLS <span class="token operator">=</span> <span class="token boolean">True</span><span class="token comment"># 默认的发件人</span>DEFAULT_FROM_EMAIL <span class="token operator">=</span> <span class="token string">'your email'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="日志分割"><a href="#日志分割" class="headerlink" title="日志分割"></a>日志分割</h3><p>现在我们已经可以愉快的记录日志了，接下来一个问题是如何去<strong>分割日志</strong>？假设你的网站能够有幸运行十年时间，如果不间断的往同一个文件中写日志信息，最终它会变成一个拖垮服务器的庞然大物。</p><p>最好是日志能够按自然天进行记录和分割。好在这个问题也不需要你去费脑筋，Python帮你搞定了。</p><p>只需要把处理器稍稍改一下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">my_blog<span class="token operator">/</span>settings<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>LOGGING <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token string">'handlers'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token string">'file'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token comment"># 注释掉 class</span>            <span class="token comment"># 'class': 'logging.FileHandler',</span>                        <span class="token comment">#新增内容</span>            <span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'logging.handlers.TimedRotatingFileHandler'</span><span class="token punctuation">,</span>            <span class="token string">'when'</span><span class="token punctuation">:</span> <span class="token string">'midnight'</span><span class="token punctuation">,</span>            <span class="token string">'backupCount'</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>TimedRotatingFileHandler</code>：Python内置的随时间分割日志文件的模块</li><li><code>when</code>：分割时间为凌晨</li><li><code>backupCount</code>：日志文件保存日期为30天</li></ul><p>接下来把系统时间往后调一天，然后重新启动服务器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python manage.py runserver --noreload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意这次启动有点不一样</strong>，后面有个<code>--noreload</code>后缀。这是因为通常Django的调试服务器运行时会顺带启动重载器，所以每当重载器检测到代码有变化后，会自动重启服务器，相当的方便。但问题是分割文件与重载器同时操作日志文件会产生冲突，因此这里一定要用<code>--noreload</code>暂时将重载器禁止掉。</p><p>然后就可以愉快的刷几条消息到文件中啦。你会发现老日志已经更名为<code>debug.log.2019-07-17</code>了，而刚刷的新消息则保存在<code>debug.log</code>中。</p><blockquote><p>除了上面介绍的<code>TimedRotatingFileHandler</code>，Python还提供了一个按照文件大小分割的<code>RotatingFileHandler</code>。有兴趣的看<a href="https://docs.python.org/3/library/logging.handlers.html#logging.handlers.RotatingFileHandler">Python官方文档</a></p></blockquote><h2 id="自定义日志"><a href="#自定义日志" class="headerlink" title="自定义日志"></a>自定义日志</h2><p>内置配置实际上已经能够满足90%以上的日志需求了，但总有时候你想在一些奇怪的地方进行记录，这就需要你自己在代码中插入自定义的日志记录代码了。</p><p>自定义日志用起来也是相当方便的：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> my_blog<span class="token punctuation">.</span>settings <span class="token keyword">import</span> LOGGING<span class="token keyword">import</span> logginglogging<span class="token punctuation">.</span>config<span class="token punctuation">.</span>dictConfig<span class="token punctuation">(</span>LOGGING<span class="token punctuation">)</span>logger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token string">'django.request'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">whatever</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># do something</span>    logger<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">'Something went wrong!'</span><span class="token punctuation">)</span>    <span class="token comment"># do something else</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>导入刚才写的日志框架并将<code>django.request</code>配置到<code>logger</code>对象中。然后你就可以在任何地方安插任何级别的消息了。消息内容可以用字符串的格式化方法（<code>str.format()</code>），玩出各种花样。</p><p>关于日志的入门介绍就到此为止了，想深入学习的读者请继续阅读本文的参考文章：</p><ul><li><a href="https://docs.djangoproject.com/en/2.2/topics/logging/">Django logging</a></li><li><a href="https://docs.python.org/3/library/logging.html">Python 3 logging</a></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>和上章类似，本章的内容也是概念偏多，希望读者尽可能去理解，最起码要囫囵吞枣的把日志成功移植到你的项目中去。<strong>获取一份好的日志，有时候远比开发一个无关紧要的新功能更重要。</strong></p><p>比较起来博主认为对博客项目来说，日志比测试还重要，毕竟用户的使用体验是最佳的实践。</p><p>但请不要误会我的意思。测试和日志就像两兄弟，测试解决开发中的问题，日志解决维护中的问题。有机的结合起来，你的项目才能够长期稳定健康。</p><hr><ul><li>有疑问请在<a href="http://www.dusaiphoto.com/">杜赛的个人网站</a>留言，我会尽快回复。</li><li>或Email私信我：<a href="mailto:&#x64;&#x75;&#x73;&#x61;&#105;&#112;&#104;&#x6f;&#x74;&#111;&#x40;&#x66;&#111;&#120;&#x6d;&#97;&#105;&#108;&#x2e;&#x63;&#x6f;&#109;">&#x64;&#x75;&#x73;&#x61;&#105;&#112;&#104;&#x6f;&#x74;&#111;&#x40;&#x66;&#111;&#120;&#x6d;&#97;&#105;&#108;&#x2e;&#x63;&#x6f;&#109;</a></li><li>项目完整代码：<a href="https://github.com/stacklens/django_blog_tutorial">Django_blog_tutorial</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--39.点赞功能</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/39.dian-zan-gong-neng/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/39.dian-zan-gong-neng/</url>
      
        <content type="html"><![CDATA[<p>假设你的博客已经顺利部署到了线上。你写了很多好文章，和粉丝们互动并感受成就感。</p><p>现在你想更进一步，努力提高文章质量，使其更受读者欢迎，打造圈内一流博客。问题是该如何判断一篇文章是“受欢迎的”？靠浏览量是个方法，但是并不能区分出内容花拳绣腿的标题党。靠评论数也是个好方法，但个人博客通常读者不多，好文章零评论是很正常的。</p><p>这时候<strong>“点赞”</strong>功能就显得重要了。如果大部分读者都给了一个赞，那就表明文章确实还不错。</p><h2 id="动手之前的思考"><a href="#动手之前的思考" class="headerlink" title="动手之前的思考"></a>动手之前的思考</h2><p>点赞功能可不简单，实现途径非常的多。别急着动手，耐心思考：我们的博客到底需要什么样的点赞？</p><p><strong>首先，点赞是否要求用户必须登录？</strong>要求登录的好处是可以精确的记录是哪些用户、对哪些文章点过赞（多对多关系），以便进行细致的数据分析。坏处是登录这个要求很笨重，会屏蔽掉大部分的游客用户。博主倾向于不要求用户登录，毕竟小站通常用户就不多，提高参与度才是点赞最核心的任务。</p><blockquote><p>如果某天你的小站火了，就把要求用户登录的交互功能让给“收藏”吧！</p></blockquote><p><strong>其次，用户是否可以重复点赞？</strong>很多视频平台的用户可以对某个喜欢的女主播疯狂点赞，以表达自己非常非常的喜欢。这对用户较多的平台是没问题的，因为用户数量多了之后，你点几百个赞也只是九牛一毛。但博客网站这样做很容易造成某些文章点赞为零，某些文章点赞数又出奇的高。显然这不代表文章质量的差异。</p><p>好了，目前我们的策略是不要求用户登录，也不允许用户重复点赞。<strong>下一个问题是，在哪里记录用户的点赞相关的数据呢？</strong>点赞数量毫无疑问要保存在数据库里，以便随时取出数据并呈现出来。</p><p>但问题是<strong>校验用户是否已点赞的记录保存在哪？</strong>在数据库中记录用户的IP地址是个方法，但你得处理好记录IP和记录登录用户的关系，稍微有点麻烦。另外每次用户的点赞都需要向后端发送校验请求，增加了服务器的负担。</p><p>既然数据保存在后端数据库里不好，<strong>那能不能保存在浏览器端呢？</strong>答案是可以的，并且有 <strong>Cookie</strong> 和 <strong>LocalStorage</strong> 都可以让你保存数据。它两的主要区别如下：</p><table><thead><tr><th>特性</th><th align="left">Cookie</th><th>LocalStorage</th></tr></thead><tbody><tr><td>生命周期</td><td align="left">可设置失效时间，默认是关闭浏览器后失效</td><td>除非被清除，否则永久保存</td></tr><tr><td>存储空间</td><td align="left">4K左右</td><td>一般为5MB</td></tr><tr><td>与服务器通信</td><td align="left">每次都会携带在HTTP头中</td><td>不参与服务器的通信</td></tr><tr><td>易用性</td><td align="left">源生接口不友好</td><td>源生接口可以接受</td></tr></tbody></table><p>比较下来会发现 LocalStorage 可以永久保存数据，存储空间大，也不参与服务器通信，很适合点赞的需求。由于数据保存在浏览器中，所以也不需要区分用户有没有登录了：实际上每次请求点赞时，校验的是当前这个浏览器是否已经点过赞了，而不是用户！</p><p>可能你会反驳说，那要是用户换一个浏览器不就可以重复点赞了吗，更何况浏览器端的数据是非常容易篡改的。但这又有什么关系呢？点赞数据并不需要非常精确，随他去吧。</p><blockquote><p>所有的现代浏览器都支持 LocalStorage 功能。如果你还在用 IE6 ，赶紧考虑升级浏览器吧。</p></blockquote><p>总结一下，我们的点赞功能如下：</p><ul><li>不要求用户登录</li><li>不允许重复点赞</li><li>点赞数保存在服务器数据库中</li><li>点赞校验数据保存在浏览器的 LocalStorage 中</li></ul><p>当用户点赞时，前端脚本会在 LocalStorage 里校验是否已经点过赞了；如未点过赞，才会向服务器发送点赞请求，并记录数据。</p><p>想清楚需求，难题就迎刃而解了。接下来就是代码实现。</p><blockquote><p>需要说明的是，以上分析并不代表其他方法不好，仅仅是在博客小站的环境下，博主觉得合适的技术路径而已。如果你心中住着另一个哈姆雷特，请想办法去实现它。</p></blockquote><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>本章的重点工作在前端，因此先把简单的后端代码写了，权当热身。</p><blockquote><p>有的读者听到前端就觉得头疼。你的痛苦我明白，但也是必不可少的。光写 Python 是做不出漂亮网站的。</p></blockquote><p>由于点赞数需要保存在数据库中，因此修改文章模型是必须的了：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>models<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 文章模型</span><span class="token keyword">class</span> <span class="token class-name">ArticlePost</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment"># 新增点赞数统计</span>    likes <span class="token operator">=</span> models<span class="token punctuation">.</span>PositiveIntegerField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>迁移数据：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token operator">></span> python manage.py makemigrations<span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token operator">></span> python manage.py migrate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>继续用类视图：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 点赞数 +1</span><span class="token keyword">class</span> <span class="token class-name">IncreaseLikesView</span><span class="token punctuation">(</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        article <span class="token operator">=</span> ArticlePost<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span>kwargs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        article<span class="token punctuation">.</span>likes <span class="token operator">+=</span> <span class="token number">1</span>        article<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>功能是让点赞数增加1个，并且返回 <code>success</code> 。至于为什么是 <code>success</code> 后面再讲。</p><p>最后就是路由了：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>urls<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment"># 点赞 +1</span>    path<span class="token punctuation">(</span>        <span class="token string">'increase-likes/&lt;int:id>/'</span><span class="token punctuation">,</span>         views<span class="token punctuation">.</span>IncreaseLikesView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         name<span class="token operator">=</span><span class="token string">'increase_likes'</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很简单吧。剩下的就是专心写前端代码了。</p><h3 id="JS与Ajax"><a href="#JS与Ajax" class="headerlink" title="JS与Ajax"></a>JS与Ajax</h3><p>由于校验数据保存在浏览器中，因此前端的工作较多。</p><p>先把完整代码贴出来（讲解在后面）：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/article/detail.html...<span class="token comment">&lt;!-- 已有代码，文章正文 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&#123;&#123; article.body|safe &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 新增点赞按钮 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mt-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-outline-danger<span class="token punctuation">"</span></span>            <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>            <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">validate_is_like</span><span class="token punctuation">(</span>                     <span class="token string">'&#123;% url '</span>article<span class="token operator">:</span>increase_likes<span class="token string">' article.id %&#125;'</span><span class="token punctuation">,</span>                     <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> article<span class="token punctuation">.</span>id <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                     <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> article<span class="token punctuation">.</span>likes <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>                     <span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span>            <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>点赞<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fas fa-heart<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>likes_number<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            &#123;&#123; article.likes &#125;&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>...&#123;% block script %&#125;...<span class="token comment">&lt;!-- 以下均为新代码 --></span><span class="token comment">&lt;!-- csrf token --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% static <span class="token punctuation">'</span>csrf.js<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">// 点赞功能主函数</span>    <span class="token keyword">function</span> <span class="token function">validate_is_like</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> id<span class="token punctuation">,</span> likes</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 取出 LocalStorage 中的数据</span>        <span class="token keyword">let</span> storage <span class="token operator">=</span> window<span class="token punctuation">.</span>localStorage<span class="token punctuation">;</span>        <span class="token keyword">const</span> storage_str_data <span class="token operator">=</span> storage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"my_blog_data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> storage_json_data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>storage_str_data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 若数据不存在，则创建空字典</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>storage_json_data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            storage_json_data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// 检查当前文章是否已点赞。是则 status = true</span>        <span class="token keyword">const</span> status <span class="token operator">=</span> <span class="token function">check_status</span><span class="token punctuation">(</span>storage_json_data<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            layer<span class="token punctuation">.</span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token string">'已经点过赞了哟~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 点过赞则立即退出函数</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 用 Jquery 找到点赞数量，并 +1</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'span#likes_number'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>likes <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">,</span> <span class="token string">'#dc3545'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 用 ajax 向后端发送 post 请求</span>        $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>            url<span class="token punctuation">,</span>            <span class="token comment">// post 只是为了做 csrf 校验，因此数据为空</span>            <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">===</span> <span class="token string">'success'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 尝试修改点赞数据</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        storage_json_data<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                    <span class="token comment">// 将字典转换为字符串，以便存储到 LocalStorage</span>                    <span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>storage_json_data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 尝试存储点赞数据到 LocalStorage</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        storage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"my_blog_data"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">// code 22 错误表示 LocalStorage 空间满了</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">22</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            storage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"my_blog_data"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    layer<span class="token punctuation">.</span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token string">"与服务器通信失败..过一会儿再试试呗~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 辅助点赞主函数，验证点赞状态</span>    <span class="token keyword">function</span> <span class="token function">check_status</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 尝试查询点赞状态</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token keyword">in</span> data <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>&#123;% endblock script %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码内容很多，接下来拆分讲解。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 新增点赞代码 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mt-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-outline-danger<span class="token punctuation">"</span></span>            <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>            <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">validate_is_like</span><span class="token punctuation">(</span>                     <span class="token string">'&#123;% url '</span>article<span class="token operator">:</span>increase_likes<span class="token string">' article.id %&#125;'</span><span class="token punctuation">,</span>                     <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> article<span class="token punctuation">.</span>id <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                     <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> article<span class="token punctuation">.</span>likes <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>                     <span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span>            <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>点赞<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fas fa-heart<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>likes_number<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            &#123;&#123; article.likes &#125;&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的 HTML 代码功能很简单，提供一个点赞的按钮，点击此按钮时会触发叫做<code>validate_is_like</code>的 JavaScript 函数。<strong>特别需要注意</strong>的是 <code>&#39;&#123;% url 'article:increase_likes' article.id %&#125;&#39;</code> 都是用的单引号，这里千万不能用双引号，原因请读者思考一下。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% static <span class="token punctuation">'</span>csrf.js<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还记得<a href="https://github.com/stacklens/django_blog_tutorial/blob/master/static/csrf.js">csrf.js</a>吗？我们在多级评论章节已经将它引入了，目的是让 Ajax 也能通过 csrf 校验。如果还没有这个文件的请点击链接下载。</p><p>接下来就是占据最多版面的函数<code>validate_is_like()</code>，我们来拆分里面的内容。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 取出 LocalStorage 中的数据</span><span class="token keyword">let</span> storage <span class="token operator">=</span> window<span class="token punctuation">.</span>localStorage<span class="token punctuation">;</span><span class="token keyword">const</span> storage_str_data <span class="token operator">=</span> storage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"my_blog_data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> storage_json_data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>storage_str_data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 若数据不存在，则创建空字典</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>storage_json_data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    storage_json_data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>浏览器里面， <code>window</code> 对象指当前的浏览器窗口。它也是当前页面的顶层对象（即最高一层的对象），所有其他对象都是它的下属，<code>localStorage</code> 也是如此。</p><p>要校验数据，首先必须取出数据。这里用<code>localStorage.getItem()</code>接口取出了数据。</p><p>虽然 LocalStorage 的存储方式为标准的<strong>键值对</strong>类型（类似Python的字典），但是很怪的是存储的值只支持字符串类型。所以这里要用 <code>JSON.parse()</code> 将字符串还原为对象。</p><p>用户第一次点赞时，LocalStorage 中肯定是没有任何数据的，所以 <code>if</code> 语句的作用是创建一个空的字典待用。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 检查当前文章是否已点赞。是则 status = true</span><span class="token keyword">const</span> status <span class="token operator">=</span> <span class="token function">check_status</span><span class="token punctuation">(</span>storage_json_data<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    layer<span class="token punctuation">.</span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token string">'已经点过赞了哟~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 点过赞则立即退出函数</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 用 Jquery 找到点赞数量，并 +1</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'span#likes_number'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>likes <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">,</span> <span class="token string">'#dc3545'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来马上调用函数 <code>check_status</code> 检查用户是否已经对本文点过赞了。如果点过了，就弹窗提示，并且用 <code>return</code> 马上终止 <code>validate_is_like</code> 函数，<strong>后面的代码就不执行了</strong>；如果还没点过，就让按钮的点赞数 +1。</p><p>但这时候其实后台数据库的点赞数并没有更新。接着往下看。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 用 ajax 向后端发送 post 请求</span>$<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>    url<span class="token punctuation">,</span>    <span class="token comment">// post 只是为了做 csrf 校验，因此数据为空</span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">===</span> <span class="token string">'success'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 尝试修改点赞数据</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                storage_json_data<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>storage_json_data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 尝试存储点赞数据到 LocalStorage</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                storage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"my_blog_data"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// code 22 错误表示 LocalStorage 空间满了</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">22</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    storage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"my_blog_data"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            layer<span class="token punctuation">.</span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token string">"与服务器通信失败..过一会儿再试试呗~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里开始尝试与后端通信并更新点赞数。整块代码被 <code>$.post()</code> 包裹，它其实就是 Ajax 的 post 请求。<code>function(result) &#123;...&#125;</code> 是请求成功时才执行的回调函数，参数 <code>result</code> 是后端的返回值。如果通信成功，则尝试将点赞的校验数据保存到 LocalStorage 中。期间发生任何错误（特别是 LocalStorage 存储已满的错误），都会清除 LocalStorage 中的所有数据，以便后续的数据记录。</p><p>可以看出，博主采用的数据结构比较简单，像这样：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span>    <span class="token number">2</span><span class="token punctuation">:</span> true<span class="token punctuation">,</span>    <span class="token number">31</span><span class="token punctuation">:</span> true    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>键代表文章的 <code>id</code>，布尔值代表点赞的状态。上面数据的意思是 <code>id</code> 为 2 和 31 的文章已经点过赞了。读者以后可能会希望文章、评论以及其他内容都可以点赞，那就需要设计更加复杂的数据结构。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 辅助点赞主函数，验证点赞状态</span><span class="token keyword">function</span> <span class="token function">check_status</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 尝试查询点赞状态</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token keyword">in</span> data <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至于 <code>check_status()</code> 函数就很简单了，作用是查询是否已经点过赞了，是则返回 true，否则返回 false。</p><p>整个 JavaScript 脚本就完成了。</p><h3 id="调试接口"><a href="#调试接口" class="headerlink" title="调试接口"></a>调试接口</h3><p>读者在调试时可能会出现各种问题，请按 <code>Ctrl + Shift + I</code> 打开浏览器控制台的 <code>Console</code> 界面，利用以下命令 debug：</p><ul><li>localStorage：查看 LocalStorage 的数据</li><li>localStorage.clear()：清除所有数据</li><li>localStorage.getItem()：获取某个数据</li><li>localStorage.setItem()：保存某个数据</li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>代码讲完了，接下来就打开文章详情页面测试一下：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190905/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE234.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190905/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE234.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>点击点赞按钮，点赞数 +1；再次点击点赞按钮，点赞数不会增加，并且会弹窗提示用户已经点过了。</p><p>你可以随意尝试关闭页面或浏览器，保存的点赞校验数据是不会消失的。</p><p>这样就完成了一个简单的点赞功能。</p><p>当然还可以继续往下优化：</p><ul><li>没点赞的爱心应该显示为灰色，点过的显示为红色，这样才人性化</li><li>最好再来一点酷炫的点赞动画，或者提示性文字</li><li>要不要给被点赞人发一条通知信息呢？</li><li>…</li></ul><p>教程篇幅有限，不打算再深入下去了，就当做读者朋友的课后作业吧，要用心完成哦。<strong>给你点赞！</strong></p><blockquote><p>第一条的提示：初始加载页面时，爱心统一显示为灰色，然后调用 JavaScript 脚本比对 LocalStorage 中的数据，灵活运用 Jquery ，将点过赞的爱心颜色修改为红色。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们的博客项目现在拥有了层次分明的用户交互结构：浏览量数据最轻巧，评价文章类型的受欢迎度；点赞数据比较平衡，评价文章内容的受欢迎度；评论数据最笨重，但价值也最高。读者以后在开发功能的时候，也要像这样把核心需求想清楚才行。</p><p>另一个需要提出的是，只有非敏感、不重要的数据才保存在 LocalStorage，不要对它太过依赖。</p><p>再一次提醒，教程为了便于讲解，代码文件已经变得越来越庞大。请在适当的时候把它分割成多个更小的组件，方便维护和重用。</p><hr><ul><li>有疑问请在<a href="http://www.dusaiphoto.com/">杜赛的个人网站</a>留言，我会尽快回复。</li><li>或Email私信我：<a href="mailto:&#x64;&#x75;&#115;&#x61;&#105;&#x70;&#x68;&#x6f;&#x74;&#x6f;&#64;&#x66;&#111;&#x78;&#109;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#109;">&#x64;&#x75;&#115;&#x61;&#105;&#x70;&#x68;&#x6f;&#x74;&#x6f;&#64;&#x66;&#111;&#x78;&#109;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#109;</a></li><li>项目完整代码：<a href="https://github.com/stacklens/django_blog_tutorial">Django_blog_tutorial</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--40.将项目部署到云服务器</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/40.jiang-xiang-mu-bu-shu-dao-yun-fu-wu-qi/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/40.jiang-xiang-mu-bu-shu-dao-yun-fu-wu-qi/</url>
      
        <content type="html"><![CDATA[<p>我们的博客虽然还有很多不完善的地方，但是没关系，越早把它部署到互联网上，才能越早发现线上特有的问题。现在也提倡渐进式开发，让产品在迭代中快速成长。</p><p>部署考验的不是你的 Django 编程水平，而是你对 Linux 的操作能力，以及对网络通信的理解。多说无益，直接开干！</p><h2 id="配置服务器"><a href="#配置服务器" class="headerlink" title="配置服务器"></a>配置服务器</h2><p>要架设网站，首先你要有一台连接到互联网的服务器。国内比较出名的云服务器属<strong>阿里云</strong>、<strong>腾讯云</strong>、<strong>百度云</strong>，三家各有优劣，大家自行了解比较，并选择自己适合的购买。</p><p><strong>利益相关：</strong>博主自己用的是阿里云，所以教程会以<strong>阿里云ECS</strong>作为例子讲解。新用户通过<a href="https://www.aliyun.com/product/ecs?source=5176.11533457&userCode=m3bbolgr&type=copy">推广链接</a>注册有折扣和现金券（目前是20元）；学生有<a href="https://promotion.aliyun.com/ntms/act/campus2018.html?source=5176.11533457&userCode=m3bbolgr&type=copy">优惠服务器</a>每月9.5元，性能还不错，很划算。如果你想用其他云服务器，操作流程也差不多，不必担心。</p><p>首先进入<strong>阿里云ECS的购买页面</strong>：</p><p><img src="http://blog.dusaiphoto.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%28249%29.png" class="lazyload placeholder" data-srcset="http://blog.dusaiphoto.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%28249%29.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>图片字很小，看不清楚的同学将就一下放大看吧。</p><p>挑重点说一下：</p><ul><li><strong>实例</strong>从入门级里选一款便宜的，以后流量高了再升级也不迟（土豪请无视这条）。</li><li><strong>镜像</strong>选择 Ubuntu 16.04 64位。其他 Linux 版本也是可以的。</li><li><strong>系统盘</strong>先选个 20G，够你用一阵了。数据盘暂时用不上，不用勾选。</li></ul><p>点击下一步，来到<strong>网络和安全组</strong>页面：</p><p><img src="http://blog.dusaiphoto.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%28250%29.png" class="lazyload placeholder" data-srcset="http://blog.dusaiphoto.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%28250%29.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>这页默认就行了，公网带宽选最低的 1M ，初期够用了。</p><p>点击下一步，到<strong>系统配置</strong>页面：</p><p><img src="http://blog.dusaiphoto.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%28241%29.png" class="lazyload placeholder" data-srcset="http://blog.dusaiphoto.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%28241%29.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>为了后面远程连接服务器更简单，这里勾选<strong>自定义密码</strong>，也就是输入用户/密码的认证方式了。实际上秘钥对的认证方式更安全些，以后摸熟了再改回来吧。</p><p>点击下一步，到<strong>分组设置</strong>页面。这个页面全部默认设置就好了。点击下一步，<strong>确认订单</strong>无误后，就可以付款啦。</p><p>付款成功后，通过控制台就可以看到已购买的云服务器了：</p><p><img src="http://blog.dusaiphoto.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%28243%29.png" class="lazyload placeholder" data-srcset="http://blog.dusaiphoto.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%28243%29.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>这里有时候会有黄字提醒你服务器的网络端口没开，点击黄字链接去开通一下：</p><p><img src="http://blog.dusaiphoto.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%28244%29.png" class="lazyload placeholder" data-srcset="http://blog.dusaiphoto.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%28244%29.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>把 22（远程连接端口）、443（HTTPS端口）、80（HTTP端口）都打开，3389端口顺便也开了。</p><p>至此服务器的购买、配置就完成啦。稍等几分钟后等待初始化完成，就可以得到服务器的<strong>公网 IP 地址</strong>，博主的是 <code>118.31.35.48</code> ，后面会用到。</p><p>接下来就是正式的部署。</p><h2 id="正式部署"><a href="#正式部署" class="headerlink" title="正式部署"></a>正式部署</h2><p>开发时我们用的是 Django 自带的开发服务器，但那个性能太差了，不可能用到线上环境。所以线上部署时，我们不仅要安装 <code>Django</code>，还要安装 <code>Nginx</code> 和 <code>Gunicorn</code>，这三兄弟的工作流程如下：</p><ul><li>客户端发来 http 请求，Nginx 作为直接对外的服务器接口，对 http 请求进行分析</li><li>如果是静态资源请求，则由Nginx自己处理（效率极高）</li><li>如果是动态资源请求，则把它转发给 Gunicorn</li><li>Gunicorn 对请求进行预处理后，转发给 Django，最终完成资源的返回</li></ul><p>如果用餐馆来做比喻的话，Nginx 就是迎宾小姐，客人如果点了酒水，迎宾小姐自己就帮忙拿了；而 Gunicorn 是传菜员，Django 是厨师，他两一起满足客人对现炒美食的需求。</p><h3 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h3><p>部署的第一步就是想办法连接到云服务器上去，否则一切都免谈。鉴于项目是在 Windows 环境开发的，推荐用 <strong>XShell</strong> 来作为远程连接的工具，非常的好用。XShell 有<a href="https://www.netsarang.com/zh/free-for-home-school/">学校及家庭版本</a>，填一下姓名和邮箱就可以免费使用了。千万别嫌麻烦去下载来路不明的“绿色版”、“纯净版”，万一有木马你哭都哭不出来了。</p><p>XShell 怎么使用就不赘述了，以读者的聪明才智，稍微查阅一下就明白了。</p><blockquote><p>使用相当简单，基本就是把主机 IP、端口号（22）以及登录验证填好就能连接了。</p></blockquote><p>连接成功后，就能在 XShell 窗口中看到阿里云的欢迎字样了：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Welcome to Ubuntu <span class="token number">16.04</span>.6 LTS <span class="token punctuation">(</span>GNU/Linux <span class="token number">4.4</span>.0-151-generic x86_64<span class="token punctuation">)</span> * Documentation:  https://help.ubuntu.com * Management:     https://landscape.canonical.com * Support:        https://ubuntu.com/advantageWelcome to Alibaba Cloud Elastic Compute Service <span class="token operator">!</span>root@dusaiphoto:~$ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>root@dusaiphoto:~$ </code>是命令提示符，输入命令时不需要你输入这个。本文后面把 <code>root@dusaiphoto:</code>字符省略掉，方便大家阅读。</p><h3 id="代码部署"><a href="#代码部署" class="headerlink" title="代码部署"></a>代码部署</h3><p>为了防止系统太旧引起的各种麻烦，先升级一下库的版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~$ <span class="token function">sudo</span> <span class="token function">apt-get</span> update~$ <span class="token function">sudo</span> <span class="token function">apt-get</span> upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>完成之后，接着安装需要的几个包：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> nginx~$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3~$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3-pip~$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">git</span>~$ <span class="token function">sudo</span> pip3 <span class="token function">install</span> virtualenv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分别安装了 <strong>nginx</strong>、<strong>python3</strong>、<strong>pip</strong>、<strong>git</strong>、<strong>virtualenv</strong>。其中 python3 和 pip3 的写法是因为阿里云自带了 Python2.7，把它们区分一下。之前开发时虚拟环境用的 python 自带的，为了避免读者的版本不同造成的各类错误，稳妥起见用 virtualenv 库来创建虚拟环境，操作步骤都是差不多的。</p><p>接下来就是要改一下 Django 的配置文件 <code>settings.py</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">my_blog<span class="token operator">/</span>settings<span class="token punctuation">.</span>py<span class="token comment"># 关闭调试模式</span>DEBUG <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment"># 允许的服务器</span>ALLOWED_HOSTS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'*'</span><span class="token punctuation">]</span><span class="token comment"># 静态文件收集目录</span>STATIC_ROOT <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'collected_static'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>部署时要关闭调试模式，避免安全性问题（此时 Django 就不再处理静态资源了）。</li><li><code>ALLOWED_HOSTS</code>指明了允许访问的服务器名称或 IP，星号表示允许所有的请求。实际部署时请改成你的域名或 IP，比如<code>ALLOWED_HOSTS = [&#39;.dusaiphoto.com&#39;, &#39;127.0.0.1&#39;]</code>。</li><li>项目中有很多静态文件，部署时需要找一个地方统一收集起来，也就是<code>STATIC_ROOT</code>指定的地址了。</li></ul><p>因为项目代码需要通过 <code>GitHub</code> 仓库进行下载（就像本教程的示例代码一样），因此修改完毕后需要把代码上传到 <code>GitHub</code>。怎么上传这里也不赘述了，博主之前写过一篇<a href="https://www.dusaiphoto.com/article/detail/13/">《Win 10 连接 GitHub》</a>的文章，有需要的读者稍微读一下。</p><p><strong>注意：</strong>一般情况下，需要将开发时生成的迁移文件（各个 app 中的 migrations 目录）一并上传到服务器端，这样可以保证各环境中的数据库操作一致。也就是说，服务器上不再需要 makemigrations 了，只进行 migrate 就可以了。这下理解为什么数据迁移要设计成两条指令了吧。</p><p>另外，<strong>虚拟环境一般是需要在服务器上重新生成的</strong>，因此我们需要把开发中用到的库列一个清单，以便在服务器上统一安装。在<strong>本地虚拟环境</strong>中输入：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip freeze <span class="token operator">></span> requirements.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>项目中就多了个 <code>requirements.txt</code> 文件，里面记录了项目需要的库的清单。</p><blockquote><p>教程为了演示，上传了媒体资源和数据库，实际开发时可千万不要上传。</p></blockquote><p>然后更新 Git 记录并上传到 GitHub。重新回到<strong>服务器的命令行</strong>，给项目代码创建目录并进入此目录：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~$ <span class="token function">mkdir</span> -p /home/sites/dusaiphoto.com~$ <span class="token builtin class-name">cd</span> /home/sites/dusaiphoto.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>目录位置是随便你的，但建议找个地方统一管理所有的网站项目。</p><p>然后从 GitHub 中拉取项目代码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">..</span>/dusaiphoto.com$ <span class="token function">git</span> clone https://github.com/stacklens/django_blog_tutorial.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里拉取的博客教程的代码。建议读者先拉取教程代码来测试，成功之后再重新部署自己的代码。完成之后可以输入 <code>ls</code> 指令，看看代码文件夹是否正常生成了。</p><p>接着在服务器生成虚拟环境：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">..</span>/dusaiphoto.com$ virtualenv --python<span class="token operator">=</span>python3.5 <span class="token function">env</span><span class="token punctuation">..</span>/dusaiphoto.com$ <span class="token builtin class-name">source</span> env/bin/activate<span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token punctuation">..</span>/dusaiphoto.com$ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里用 <code>virtualenv</code> 生成并激活了虚拟环境。python 版本选择 3.5 还是 3.7 都可以，区别并不大。</p><p>接下来就是安装库、收集静态资源、数据迁移了：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token punctuation">..</span>/dusaiphoto.com$ <span class="token builtin class-name">cd</span> django_blog_tutorial<span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token punctuation">..</span>/django_blog_tutorial$ pip3 <span class="token function">install</span> -r requirements.txt<span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token punctuation">..</span>/django_blog_tutorial$ python3 manage.py collectstatic<span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token punctuation">..</span>/django_blog_tutorial$ python3 manage.py migrate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>代码部署基本就完成了，接下来配置 <code>Nginx</code> 。</p><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p>前面我们安装了 <code>Nginx</code> ，先来试试安装是否正常。启动 nginx 服务：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>env<span class="token punctuation">)</span> ~$ <span class="token function">sudo</span> <span class="token function">service</span> nginx start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开浏览器，输入你的<strong>服务器公网 IP 地址</strong>：</p><p><img src="http://blog.dusaiphoto.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%28247%29.png" class="lazyload placeholder" data-srcset="http://blog.dusaiphoto.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%28247%29.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>Nginx 欢迎界面出现了，神奇吧。但这个默认配置显然是不能用的，所以需要重新写 Nginx 的配置文件。进入 <code>/etc/nginx/sites-available</code> 目录，这里是定义 <strong>Nginx 可用配置</strong>的地方。输入指令 <code>sudo vi dusaiphoto.com</code> 创建配置文件并打开 <strong>vi 编辑器</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>env<span class="token punctuation">)</span> ~$ <span class="token builtin class-name">cd</span> /etc/nginx/sites-available<span class="token punctuation">(</span>env<span class="token punctuation">)</span> /etc/nginx/sites-available$ <span class="token punctuation">(</span>env<span class="token punctuation">)</span> /etc/nginx/sites-available$ <span class="token function">sudo</span> <span class="token function">vi</span> dusaiphoto.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>关于 <code>vi</code> 编辑器如何使用也不赘述了，这里只说两个最基本的操作：</p><ul><li>按 <code>i</code> 键切换到<strong>编辑模式</strong>，这时候才可以进行输入、删除、修改等操作</li><li>按 <code> Ctrl + c</code> 退回到<strong>命令模式</strong>，然后输入 <code>:wq + Enter</code> 保存文件修改并退回到服务器命令行</li></ul><p>回到正题，用 <code>vi</code> 在 <code>dusaiphoto.com</code> 文件中写入：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server <span class="token punctuation">&#123;</span>  charset utf-8<span class="token punctuation">;</span>  listen <span class="token number">80</span><span class="token punctuation">;</span>  server_name <span class="token number">118.31</span>.35.48<span class="token punctuation">;</span>  <span class="token comment"># 改成你的 IP</span>  location /static <span class="token punctuation">&#123;</span>    <span class="token builtin class-name">alias</span> /home/sites/dusaiphoto.com/django_blog_tutorial/collected_static<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    location /media <span class="token punctuation">&#123;</span>    <span class="token builtin class-name">alias</span> /home/sites/dusaiphoto.com/django_blog_tutorial/media<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  location / <span class="token punctuation">&#123;</span>    proxy_set_header Host <span class="token variable">$host</span><span class="token punctuation">;</span>    proxy_pass http://unix:/tmp/118.31.35.48.socket<span class="token punctuation">;</span>  <span class="token comment"># 改成你的 IP</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此配置会监听 80 端口（通常 http 请求的端口），监听的 IP 地址写你自己的<strong>服务器公网 IP</strong>。</p><p>配置中有3个规则：</p><ul><li>如果请求 static 路径则由 Nginx 转发到目录中寻找静态资源</li><li>如果请求 media 路径则由 Nginx 转发到目录中寻找媒体资源</li><li>其他请求则交给 Django 处理</li></ul><blockquote><p>如果你已经申请好域名了，就把配置中有 IP 的地方都修改为域名，比如：server_name <a href="http://www.dusaiphoto.com/">www.dusaiphoto.com</a>;</p></blockquote><p>写好后就退出 <code>vi</code> 编辑器，回到命令行。因为我们写的只是 Nginx 的<strong>可用配置</strong>，所以还需要把这个配置文件链接到<strong>在用配置</strong>上去：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token punctuation">..</span>/sites-available$ <span class="token function">sudo</span> <span class="token function">ln</span> -s /etc/nginx/sites-available/dusaiphoto.com /etc/nginx/sites-enabled<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>至此 Nginx 就配置好了，接下来搞定 <code>Gunicorn</code>。</p><blockquote><p>有的读者无论怎么配置都只能看到 Nginx 欢迎页面，有可能是 sites-enabled 目录中的 default 文件覆盖了你写的配置。将 default 文件删掉就可以正常代理自己的配置文件了。</p></blockquote><h3 id="Gunicorn及测试"><a href="#Gunicorn及测试" class="headerlink" title="Gunicorn及测试"></a>Gunicorn及测试</h3><p><strong>先回到项目所在的目录</strong>，并且进入<strong>虚拟环境</strong>，然后输入：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token punctuation">..</span>/django_blog_tutorial$ pip3 <span class="token function">install</span> gunicorn<span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token punctuation">..</span>/django_blog_tutorial$ <span class="token function">sudo</span> <span class="token function">service</span> nginx reload<span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token punctuation">..</span>/django_blog_tutorial$ gunicorn --bind unix:/tmp/118.31.35.48.socket my_blog.wsgi:application<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里的三个步骤分别是：</p><ul><li>安装 <code>Gunicorn</code></li><li>重启 <code>Nginx</code> 服务</li><li>启动 <code>Gunicorn</code> </li></ul><blockquote><p>启动 Gunicorn 也是一样，如果你已经有域名了，就把套接字中的 IP 地址换成域名；wsgi 字眼前面是项目的名称。另外 <code>sudo service nginx reload</code> 可替换成 <code>sudo service nginx restart</code>，区别是 reload 只重载配置文件，restart 重启整个服务。</p></blockquote><p>接下来用浏览器访问服务器试一下：</p><p><img src="http://blog.dusaiphoto.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%28251%29.jpg" class="lazyload placeholder" data-srcset="http://blog.dusaiphoto.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%28251%29.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p><strong>大功告成啦，撒花庆祝！</strong></p><h2 id="后续工作"><a href="#后续工作" class="headerlink" title="后续工作"></a>后续工作</h2><h3 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h3><p>成功部署到线上后，还有些小问题没解决。</p><p><strong>第一个问题</strong>是进入文章详情页面， ckeditor 无法加载了，并且浏览器报出 <code>prism_patched.js Not Found</code>的错误。这个问题的根源在于之前我们在开发 ckeditor 的代码高亮功能时，<code>prism</code> 模块是直接插入到虚拟环境的库中的，但问题是部署时虚拟环境是需要重新建立的，所以就缺少了这个 prism 插件导致报错。</p><p>解决办法也很简单，在虚拟环境中找到 prism 插件的位置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">..</span><span class="token punctuation">\</span>env<span class="token punctuation">\</span>Lib<span class="token punctuation">\</span>site-packages<span class="token punctuation">\</span>ckeditor<span class="token punctuation">\</span>static<span class="token punctuation">\</span>ckeditor<span class="token punctuation">\</span>ckeditor<span class="token punctuation">\</span>plugins<span class="token punctuation">\</span>prism<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后把它原封不动的复制到项目的 <code>static</code> 中完全相同的目录中去：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">my_blog<span class="token punctuation">\</span>static<span class="token punctuation">\</span>ckeditor<span class="token punctuation">\</span>ckeditor<span class="token punctuation">\</span>plugins<span class="token punctuation">\</span>prism<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样做行得通的原因是 django-ckeditor 也是一个 app，Django 访问 app 资源时会优先在项目中搜索，没有才去虚拟环境里搜索。</p><p>然后就是通过 GitHub 更新服务器代码，并且重新收集静态文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token punctuation">..</span>/django_blog_tutorial$ <span class="token function">git</span> pull origin master<span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token punctuation">..</span>/django_blog_tutorial$ python3 manage.py collectstatic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个问题给我们的启示就是：针对三方库、资源的改动最好不要直接修改源文件或环境，而是想办法在项目副本中更改，这样更便于维护。</p><blockquote><p>有读者发现旧的富文本评论中的表情没显示，这个别担心，新发表的评论是没问题的。</p></blockquote><p><strong>第二个问题</strong>是 GitHub 登录不正常了，这个多半不是代码的问题，而是你的服务器以及 GitHub 的回调配置问题。这里也不展开讲了，请读者返回前面第三方登录的文章再研究下。</p><p><strong>第三个问题</strong>是开发阶段用的 <code>sqlite</code> 数据库虽然很方便，但是性能较差。线上以性能为王，所以需要将数据库更换为 <code>MYSQL</code> 这类主流的高性能数据库。远程安装配置 MYSQL 的方法可以参考一下<a href="http://www.liujiangblog.com/course/django/165">刘江的博客</a>，讲得很清楚。</p><p><strong>第四个问题</strong>是教程部署是以 root 用户进行的，这是服务器中具有最高权限的用户，除掉自身的瞎操作，一旦被攻击者登录了会相当惨烈（尤其是用户/密码的登录方式，安全系数极低）。比较好的方式是重新创建一个普通用户来进行部署，并且将登录方式改为秘钥对。</p><h3 id="后期运维"><a href="#后期运维" class="headerlink" title="后期运维"></a>后期运维</h3><p>你的网站是需要不断更新优化代码的。每次修改代码后，更新到服务器上也很简单。在<strong>虚拟环境</strong>中并<strong>进入项目目录</strong>，依次（collectstatic 和 migrate 是可选的）执行以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull origin masterpython3 manage.py collectstaticpython3 manage.py migrate<span class="token comment"># 重启 gunicorn</span><span class="token function">pkill</span> gunicorngunicorn --bind unix:/tmp/118.31.35.48.socket my_blog.wsgi:application<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加上 <code>cd</code> 更改目录的指令，部署过程有十几条指令，手动输入也太麻烦了。简单粗暴的办法是利用 XShell 的宏，把部署指令写成顺序执行的脚本，点几个按钮就完成了，非常方便。</p><blockquote><p>更高级的做法是在服务器上编写自动化部署的脚本，这个就读者以后慢慢研究吧</p></blockquote><p>如果你更改了 Nginx 的配置文件，还需要重启 Nginx 服务：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> nginx reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后，还记得前面章节开发的<strong>日志记录功能</strong>不？看看项目中有 <code>logs</code> 目录吗？</p><h3 id="域名及优化"><a href="#域名及优化" class="headerlink" title="域名及优化"></a>域名及优化</h3><p>相对部署来说，域名配置就很容易了。阿里云提供域名的购买、备案（顶级域名必须，约10个工作日）、解析服务，简直全家桶有没有。重点提醒有了域名之后要改的地方：</p><ul><li><code>settings.py</code> 中的 <code>ALLOWED_HOSTS</code></li><li><code>Nginx</code> 中与 IP/域名 有关的位置</li><li><code>Gunicorn</code> 中与 IP/域名 有关的位置</li></ul><p>域名搞定之后，接着就可以着手考虑把网站升级为 https 版本了，这是大趋势，一定要做。（这个也留给读者自己折腾）</p><p>另外，开发时为了效率把所有静态资源都下载到本地，但是部署时不推荐这样做，原因是静态文件通常体积都较大，你花血汗钱买的服务器载入会很慢。尽量远程 CDN 调用，像这样：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>国内推荐<a href="https://www.bootcdn.cn/">BootCDN</a>，速度快还免费。</p><p>媒体资源也是类似，小图还无所谓，大图就要放在<a href="https://portal.qiniu.com/signup?code=1hfqrn5z85c9e">七牛云</a>这类的对象存储云上，否则你网页的载入速度会很悲剧的。</p><p>最后再次提醒，在开发时我们往 <code>settings.py</code> 中写入如 SECRET_KEY 、邮箱密码等各种敏感信息，部署时千万不要直接上传到互联网（GitHub 库是公开的！），而是把这些信息写到服务器本地，然后在 <code>settings.py</code> 中读取。</p><h3 id="进程托管"><a href="#进程托管" class="headerlink" title="进程托管"></a>进程托管</h3><p>部署过程中还有个新手经常碰到的问题，就是当 SSH 终端一关闭，Web 服务也一起被关闭了，导致网站无法连接。这个问题在 @frostming 的文章 <a href="https://frostming.com/2020/05-24/process-management">《Web 服务的进程托管》</a> 中用了三种常见方法解决了，并且还实现了异常重启和开机自启动。有类似疑惑的同学可以前往围观。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>部署可以说是入门者最大的难关了，也是检验成果、获取成就感的关键一步。多查资料，要相信你遇到的问题别人早就遇到过了。</p><p>部署是菜鸟的毕业礼，也是新人的第一课。</p><p><strong>路漫漫其修远兮，吾将上下而求索。</strong></p><hr><ul><li>有疑问请在<a href="http://www.dusaiphoto.com/">杜赛的个人网站</a>留言，我会尽快回复。</li><li>或Email私信我：<a href="mailto:&#100;&#117;&#x73;&#x61;&#105;&#112;&#104;&#x6f;&#x74;&#111;&#64;&#x66;&#111;&#x78;&#109;&#x61;&#x69;&#x6c;&#46;&#x63;&#111;&#x6d;">&#100;&#117;&#x73;&#x61;&#105;&#112;&#104;&#x6f;&#x74;&#111;&#64;&#x66;&#111;&#x78;&#109;&#x61;&#x69;&#x6c;&#46;&#x63;&#111;&#x6d;</a></li><li>项目完整代码：<a href="https://github.com/stacklens/django_blog_tutorial">Django_blog_tutorial</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--41.期末总结</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/41.qi-mo-zong-jie/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/41.qi-mo-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>本教程共写作了一年多（龟速更新..），也算告一段落了。如果还有读者特别想看、但是教程又没涉及的内容，博主会继续更新，不过时间就不能保证了。业余精力有限，如果不能保证文章的质量，那我情愿不写。</p><p>如果你是本教程的忠实读者，看到这里就已经学会了以下内容：</p><ul><li>博文管理</li><li>用户管理</li><li>多级评论</li><li>文章栏目和标签</li><li>图片处理</li><li>第三方登录</li><li>点赞</li><li>测试与维护</li><li>部署</li><li>其他零星功能</li></ul><p>不错，基本功能都有了。</p><h2 id="接下来学什么"><a href="#接下来学什么" class="headerlink" title="接下来学什么"></a>接下来学什么</h2><h3 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h3><p>响应式布局，简单来说就是页面布局随着终端设备的变化而自动适应。</p><p>教程为了起步平缓，没有展开这方面的内容。也就是说教程中的博客在手机上浏览，界面会变得非常的糟糕。</p><p>好在 BootStrap 就是一个强大的响应式布局框架。在它的官网上有非常详细的介绍、复制就能用的代码，请耐心查阅：<a href="https://getbootstrap.com/docs/4.1/getting-started/introduction/">Bootstrap官方文档</a></p><h3 id="各种轮子"><a href="#各种轮子" class="headerlink" title="各种轮子"></a>各种轮子</h3><p>轮子是别人封装好的库。虽然不用自己写，但最起码要学会使用。优秀的轮子推荐如下：</p><ul><li><a href="https://github.com/brack3t/django-braces">django-braces</a>：包含各种有用的基础类视图。写类视图用它可以节省很多时间。</li><li><a href="https://django-haystack.readthedocs.io/en/master/">django-haystack</a>：实现复杂的定制化搜索。</li><li><a href="https://www.django-rest-framework.org/">django-rest-framework</a>：有的读者迫不及待想尝试前后端分离开发模式，这个框架几乎是你唯一的选择。</li></ul><p>优秀的app很多，这里没办法列举。感兴趣的同学请点这里：<a href="https://djangopackages.org/">djangopackages</a>，这个网址集合了所有优秀的库。慢慢研究吧。</p><h3 id="其他技能"><a href="#其他技能" class="headerlink" title="其他技能"></a>其他技能</h3><p>博主之前反复强调了，虽然这只是个 Django 教程，但是只会写 Django 是没法支撑一个漂亮的网站的。</p><ul><li>你要学 <code>JavaScript</code>，让界面更美观</li><li>要学 <code>Linux</code>，以便网站运维</li><li>要学数据库知识，让你在某些特殊情况下摆脱 ORM，高效的操作远程数据库</li><li>以及云服务器各种组件、微信支付接口、缓存数据库、…</li></ul><p><strong>不要你精通，但是至少得会一点点，关键时刻可以救命。</strong></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>读者在教程中是否学到新东西了呢？</p><p>如果有，欢迎点击教程尾部的**[打赏]**按钮，请博主喝杯咖啡~</p><p>或者在我的<a href="https://github.com/stacklens/django_blog_tutorial">GitHub博客教程代码</a>给一个小星星，感谢各位的支持。</p><p><strong>我的教程是写完了，但是你的学习才刚开始。</strong>胜利的背后总有无数个难熬的夜晚。</p><p>天下没有不散的筵席。下一个教程见！</p><blockquote><p>近期向博主咨询问题的读者比较多，考虑组建微信群或QQ群，让大家有一个互相学习的空间，也减轻我的压力。到时网站的醒目位置会有二维码或链接，有兴趣的读者可以偶尔来转转。</p></blockquote><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190101/end.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190101/end.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--42.小功能集合贴</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/42.xiao-gong-neng-ji-he-tie/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/42.xiao-gong-neng-ji-he-tie/</url>
      
        <content type="html"><![CDATA[<p>有些<strong>功能独立的小功能</strong>，单独一篇文章不够分量，于是在这里集中解释了。</p><p>和<a href="https://www.dusaiphoto.com/article/detail/43/">读者常见问题帖</a>一样，本篇是<strong>持续更新</strong>的，想到一个写一个。</p><h2 id="文章快捷导航"><a href="#文章快捷导航" class="headerlink" title="文章快捷导航"></a>文章快捷导航</h2><p>快捷导航指的是这个功能：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190117/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE145.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190117/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE145.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>点击对应按钮，页面立即跳转到另一篇文章中，省去了用户返回首页重新寻找文章的繁琐。</p><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>实现本功能的关键就是要查找出<strong>发表时间与当前文章相邻</strong>的文章。为了演示简单，就粗略以<code>id</code>作为发表时间的排序。</p><p>在之前的<a href="https://www.dusaiphoto.com/article/detail/47/">搜索文章的教程</a>中，我们已经体验过<code>contains</code>这种查找方法了，现在需要用到另外两种：<code>gt</code>和<code>lt</code>。</p><p>编写视图：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 文章详情</span><span class="token keyword">def</span> <span class="token function">article_detail</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 已有代码。取出相应的文章</span>    article <span class="token operator">=</span> ArticlePost<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token builtin">id</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment"># 过滤出所有的id比当前文章小的文章</span>    pre_article <span class="token operator">=</span> ArticlePost<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>id__lt<span class="token operator">=</span>article<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'-id'</span><span class="token punctuation">)</span>    <span class="token comment"># 过滤出id大的文章</span>    next_article <span class="token operator">=</span> ArticlePost<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>id__gt<span class="token operator">=</span>article<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span>        <span class="token comment"># 取出相邻前一篇文章</span>    <span class="token keyword">if</span> pre_article<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        pre_article <span class="token operator">=</span> pre_article<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        pre_article <span class="token operator">=</span> <span class="token boolean">None</span>            <span class="token comment"># 取出相邻后一篇文章</span>    <span class="token keyword">if</span> next_article<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        next_article <span class="token operator">=</span> next_article<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        next_article <span class="token operator">=</span> <span class="token boolean">None</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment"># 需要传递给模板的对象</span>    context <span class="token operator">=</span> <span class="token punctuation">&#123;</span>         <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token string">'pre_article'</span><span class="token punctuation">:</span> pre_article<span class="token punctuation">,</span>        <span class="token string">'next_article'</span><span class="token punctuation">:</span> next_article<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行逻辑如下：</p><ul><li><code>lt</code>过滤出所有<code>id</code>比当前文章小的文章</li><li>对这些文章按<code>-id</code>进行排序</li><li>取出排在首位的文章，即相邻的文章</li><li>返回给模板上下文</li></ul><p><code>gt</code>的原理也是类似。</p><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>模板得到上下文后，就要相应修改：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/detail.html...<span class="token comment">&lt;!-- 相邻文章导航 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row justify-content-end<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &#123;% if next_article %&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-auto mr-auto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span>  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123; next_article.get_absolute_url &#125;&#125;<span class="token punctuation">"</span></span>             <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-info<span class="token punctuation">"</span></span>            <span class="token punctuation">></span></span>            &#123;&#123; next_article.title &#125;&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    &#123;% endif %&#125;&#123;% if pre_article %&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-auto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span>  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123; pre_article.get_absolute_url &#125;&#125;<span class="token punctuation">"</span></span>         <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-info<span class="token punctuation">"</span></span>         <span class="token punctuation">></span></span>            &#123;&#123; pre_article.title &#125;&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>&#123;% endif %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码很简单，就是按照上下文的信息，将导航按钮正确显示出来。功能就完成了。</p><p>导航的逻辑不一定非要按时间排序，也可以按照热度、文章类别甚至文字个数，这个就随便你了。</p><h2 id="页面定位"><a href="#页面定位" class="headerlink" title="页面定位"></a>页面定位</h2><p>良好的UI设计应该让用户清楚自己当前的状态。</p><p>比如<a href="https://www.dusaiphoto.com/">我的博客</a>就是这样的：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20190105/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE139.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20190105/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE139.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>可以清楚看到当前正位于【文章】-【编程】-【最近】这个页面中的。</p><p>实现方法提供给大家参考。</p><blockquote><p>例子中的样式用的LayUI，而不是Bootstrap，但是思路是相同的</p><p>读者请尝试用Bootstrap实现</p></blockquote><h3 id="栏目和排序"><a href="#栏目和排序" class="headerlink" title="栏目和排序"></a>栏目和排序</h3><p>栏目和排序都是<strong>被查询文章集合</strong>的共有属性，因此考虑在<code>article_list()</code>视图中把它们作为<strong>上下文</strong>传递到模板中来，类似于某种“标记”：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token comment"># 传递到模板的对象</span>context <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token string">'column'</span><span class="token punctuation">:</span> column<span class="token punctuation">,</span> <span class="token string">'order'</span><span class="token punctuation">:</span> order <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后在模板中通过<code>column</code>和<code>order</code>的值，控制按钮的样式：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">/list.html<span class="token comment">&lt;!-- 栏目 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">...</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>          ...          &#123;% if column_id == column.id %&#125;          layui-btn-warm          &#123;% else %&#125;          layui-btn-primary          &#123;% endif %&#125;          <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>...<span class="token comment">&lt;!-- 排序 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">...</span><span class="token punctuation">></span></span>    &#123;% if order == 'total_views' %&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cite</span><span class="token punctuation">></span></span>最近<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cite</span><span class="token punctuation">></span></span>    &#123;% else %&#125;    最近    &#123;% endif %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码中的<code>column_id</code>是当前页面所在的栏目，<code>column.id</code>是视图传递给模板的上下文。通过比对这两个值是否一致，从而决定<strong>栏目按钮</strong>的样式。</p><p>面包屑也是类似的方法，判断是否需要插入<code>&lt;cite&gt;</code>标签。</p><h3 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h3><p>就是<a href="https://www.dusaiphoto.com/">我的博客</a>顶部的“黑条”，它是所有板块的入口。</p><p>如果导航栏也采用类似上面的<strong>传递值给模板</strong>来定位，那么要求所有的app都要传递同一个”标记”到模板中。理论上可行，但是也会导致app之间耦合得太紧，个人感觉不是好的实践。</p><p>所以我采用了一种笨办法：直接在模板中读取当前的url，从而判断页面位置：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">/header.html...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>  <span class="token punctuation">"</span>             ...             &#123;% if <span class="token punctuation">'</span>/xxx<span class="token punctuation">'</span> in request.path %&#125;             layui-this             &#123;% endif %&#125;             <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方法有个小问题，就是如果url中恰好出现了别的板块的关键词，定位可能会显示错误。</p><p>不过对博客来说也不算什么大问题，比紧耦合的设计要好多了。</p><hr><p><em>持续更新中…</em></p><hr><ul><li>有疑问请在<a href="http://www.dusaiphoto.com/">杜赛的个人网站</a>留言，我会尽快回复。</li><li>或Email私信我：<a href="mailto:&#100;&#117;&#115;&#x61;&#x69;&#x70;&#x68;&#111;&#x74;&#x6f;&#64;&#x66;&#x6f;&#120;&#x6d;&#97;&#105;&#108;&#46;&#x63;&#111;&#x6d;">&#100;&#117;&#115;&#x61;&#x69;&#x70;&#x68;&#111;&#x74;&#x6f;&#64;&#x66;&#x6f;&#120;&#x6d;&#97;&#105;&#108;&#46;&#x63;&#111;&#x6d;</a></li><li>项目完整代码：<a href="https://github.com/stacklens/django_blog_tutorial">Django_blog_tutorial</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--11.删除文章</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/11.shan-chu-wen-zhang/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/11.shan-chu-wen-zhang/</url>
      
        <content type="html"><![CDATA[<p>既然有了写文章的功能，那当然也必须要有删除文章的功能了。</p><h2 id="不安全的方式"><a href="#不安全的方式" class="headerlink" title="不安全的方式"></a>不安全的方式</h2><p>有了之前的学习做铺垫，删除文章实现起来就比较简单了。</p><p>首先增加一个视图函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 删文章</span><span class="token keyword">def</span> <span class="token function">article_delete</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 根据 id 获取需要删除的文章</span>    article <span class="token operator">=</span> ArticlePost<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token builtin">id</span><span class="token punctuation">)</span>    <span class="token comment"># 调用.delete()方法删除文章</span>    article<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 完成删除后返回文章列表</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">"article:article_list"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>与查询文章类似，因为需要知道具体应该删除哪一篇文章，因此必须传入文章的<code>id</code>；</li><li>紧接着调用<code>.delete()</code>函数删除数据库中这篇文章的条目；</li><li>删除成功后返回到文章列表。</li></ul><p>这里与上一章一样，不对用户的身份进行限制，即任何人都可以删除任意文章。当然这样肯定是不符合常理的，等到我们学习了用户管理的知识后，再回头来修改。</p><p>然后写入路由信息：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>urls<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment"># 删除文章</span>    path<span class="token punctuation">(</span><span class="token string">'article-delete/&lt;int:id>/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>article_delete<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'article_delete'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里几乎与文章详情的写法一样，没有新的内容。再次注意文章的id是如何传递到视图中的。</p><p>最后我们希望能够在文章详情的页面进行删除的操作（当然也可以在专门的管理文章的页面中），因此修改模板<code>detail.html</code>：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/article/detail.html...<span class="token comment">&lt;!-- 文章详情 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        ...        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-12 alert alert-success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>作者：&#123;&#123; article.author &#125;&#125;         · <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">article:</span>article_delete"</span> <span class="token attr-name">article.id</span> <span class="token attr-name">%&#125;"</span><span class="token punctuation">></span></span>删除文章<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里增加了一个调用<code>article_delete</code>视图函数的链接，并且将<code>article.id</code>传递进去。</p><p>运行开发服务器，可以发现已经能够正常的删除文章了：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20181008/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE56.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20181008/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE56.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><h3 id="增加弹窗"><a href="#增加弹窗" class="headerlink" title="增加弹窗"></a>增加弹窗</h3><p>功能已经实现了，但是还有个小问题没有解决：万一我只是不小心点到了链接，辛辛苦苦写的文章就被删除了，岂不是欲哭无泪了？</p><p>很容易想到的一个解决方法，就是点击删除按钮是出现一个弹窗，确认后再进行删除，确保用户不是误操作的。</p><p>弹窗是很常用的功能，但是想写出一个美观好用的弹窗却不容易。幸运的是我们不需要重复造轮子，早就有革命先驱做好相关的功能了，这里我们选择使用<strong>Layer弹窗组件</strong>。</p><p><em>layer</em>是一款备受青睐的web弹层组件，具备全方位的解决方案。首先到官网下载Layer插件：<a href="https://layer.layui.com/">Layer</a></p><p>解压后将里面的<strong>layer文件夹（含有layer.js的）</strong>直接复制到项目的<code>static</code>文件夹下。</p><p>为了未来在所有页面都能使用Layer弹窗功能，在<code>base.html</code>中通过标签引入：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/base.html...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    ...    <span class="token comment">&lt;!-- bootstrap.js 依赖 jquery.js 和popper.js，因此在这里引入 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% static <span class="token punctuation">'</span>jquery/jquery-3.3.1.js<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    ...    <span class="token comment">&lt;!-- 引入layer.js --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% static <span class="token punctuation">'</span>layer/layer.js<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>layer插件依赖jquery才能正常工作，因此要在jquery的后面引入layer。</strong></p><p>再次改写模板文件<code>detail.html</code>：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/article/detail.html...<span class="token comment">&lt;!-- 文章详情 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        ...        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-12 alert alert-success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>作者：&#123;&#123; article.author &#125;&#125;         · <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">confirm_delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>删除文章<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">// 删除文章的函数</span>    <span class="token keyword">function</span> <span class="token function">confirm_delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 调用layer弹窗组件</span>        layer<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 弹窗标题</span>            title<span class="token operator">:</span> <span class="token string">"确认删除"</span><span class="token punctuation">,</span>            <span class="token comment">// 正文</span>            content<span class="token operator">:</span> <span class="token string">"确认删除这篇文章吗？"</span><span class="token punctuation">,</span>            <span class="token comment">// 点击确定按钮后调用的回调函数</span>            <span class="token function-variable function">yes</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> layero</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 指定应当前往的 url</span>                location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">'&#123;% url "article:article_delete" article.id %&#125;'</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>&#123;% endblock content %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>&lt;a&gt;</code>标签中增加了<code>onclick</code>属性，表示在点击链接时调用后面的<code>confirm_delete()</code>函数。</li><li><code>confirm_delete()</code>函数中调用了<strong>layer弹窗组件</strong>，对弹窗的<strong>标题</strong>、<strong>正文</strong>以及<strong>确定键</strong>进行了定义。**<code>location.href</code>是点击确定键后应该前往的地址，即删除文章的url。**（当然Layer组件远不止这些用法，具体可在官方文档中查阅）。</li><li>通过<code>onclick</code>实现了功能逻辑，因此<code>href</code>链接就不需要再跳转了。</li></ul><blockquote><p>不要将模板语法和JavaScript语法搞混了。</p><p>包裹在 <code>&#123;% .. %&#125;</code> 中的是Django的模板语法。Django在模板语法帮助下将零散的模板文件拼接成完整的html文件，再传递到用户的浏览器中进行解析。模板语法适合执行一些简单的逻辑。</p><p>包裹在<code>script</code>标签中的是JavaScript语法，它是与Python不同的、能够在浏览器中运行的前端语言。学好JavaScript同样是一个漫长的过程，好在本教程中只会涉及一点基本的JavaScript代码。</p></blockquote><p>保存所有文件后刷新页面，很好，达到了理想的效果：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20181008/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE57.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20181008/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE57.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><h2 id="安全的方式"><a href="#安全的方式" class="headerlink" title="安全的方式"></a>安全的方式</h2><p>可能你认为删除文章功能实现起来没什么难度，但是请注意，<strong>上面的方法是有隐患的</strong>。要继续深入探讨，就得提到<strong>跨域请求伪造攻击</strong>，也称为<strong>CSRF攻击</strong>了（Cross-site request forgery）。</p><h3 id="CSRF攻击"><a href="#CSRF攻击" class="headerlink" title="CSRF攻击"></a>CSRF攻击</h3><p>CSRF攻击你可以理解为：攻击者盗用了你的身份，以你的名义发送恶意请求。还是拿删除文章举例：</p><ul><li>用户登录了<strong>博客网站A</strong>，浏览器记录下这次会话，并保持了登录状态；</li><li>用户在没有退出登录的情况下，又非常不小心的打开了邪恶的<strong>攻击网站B</strong>；</li><li><strong>攻击网站B</strong>在页面中植入恶意代码，悄无声息的向<strong>博客网站A</strong>发送删除文章的请求，此时浏览器误以为是用户在操作，从而顺利的执行了删除操作。</li></ul><p>由于浏览器的同源策略，CSRF攻击者并不能得到你的登录数据实际内容，但是可以欺骗浏览器，让恶意请求附上正确的登录数据。不要小看CSRF攻击的威力：倘若是你的银行账户具有此类安全漏洞，黑客就可以神不知鬼不觉转走你的所有存款。</p><p>所以这里如何防范CSRF攻击的风险呢？方法是有的，即删除文章时用POST方法，并且校验<code>csrf</code>令牌。</p><h3 id="CSRF令牌"><a href="#CSRF令牌" class="headerlink" title="CSRF令牌"></a>CSRF令牌</h3><p>前面我们讲到在 Django 中提交表单必须加<code>csrf_token</code>，这个就是CSRF令牌了，它防范CSRF攻击的流程如下：</p><ul><li>当用户访问 django 站点时，django 反馈给用户的表单中有一个隐含字段 <code>csrf_token</code>，这个值是在服务器端随机生成的，每次都不一样；</li><li>在后端处理 POST 请求前，django 会校验请求的 cookie 里的 <code>csrf_token</code> 和表单里的 <code>csrf_token</code> 是否一致。一致则请求合法，否则这个请求可能是来自于 CSRF攻击，返回 403 服务器禁止访问。</li></ul><p>由于攻击者并不能得到用户的 cookie 内容（仅仅是靠浏览器转发），所以通常情况下是无法构造出正确的 <code>csrf_token</code>  的，从而防范了此类攻击。原理就是这样，下面来看看如何实现安全的删除功能。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>首先修改删除文章的链接，以及点击它时调用的函数：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">templates/article/detail.html...<span class="token comment">&lt;!-- · &lt;a href="#" onclick="confirm_delete()">删除文章&lt;/a> --></span>· <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">confirm_safe_delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>删除文章<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 新增一个隐藏的表单 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span>       <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span>       <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>safe_delete<span class="token punctuation">"</span></span>      <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>article:article_safe_delete<span class="token punctuation">'</span> article.id %&#125;<span class="token punctuation">"</span></span>       <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span>      <span class="token punctuation">></span></span>    &#123;% csrf_token %&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>发送<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token operator">...</span><span class="token keyword">function</span> <span class="token function">confirm_safe_delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    layer<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        title<span class="token operator">:</span> <span class="token string">"确认删除"</span><span class="token punctuation">,</span>        content<span class="token operator">:</span> <span class="token string">"确认删除这篇文章吗？"</span><span class="token punctuation">,</span>        <span class="token function-variable function">yes</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> layero</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'form#safe_delete button'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            layer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码流程如下：</p><ul><li>点击删除文章链接时，弹出 layer 弹窗</li><li>弹窗不再发起 GET 请求，而是通过 Jquery 选择器找到隐藏的表单，并点击发送按钮</li><li>表单发起 POST 请求，并携带了 csrf 令牌，从而避免了 csrf 攻击</li></ul><p>接着添加表单提交的url：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>urls<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment"># 安全删除文章</span>    path<span class="token punctuation">(</span>        <span class="token string">'article-safe-delete/&lt;int:id>/'</span><span class="token punctuation">,</span>        views<span class="token punctuation">.</span>article_safe_delete<span class="token punctuation">,</span>        name<span class="token operator">=</span><span class="token string">'article_safe_delete'</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后就是将新的删除视图写好：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">article<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 安全删除文章</span><span class="token keyword">def</span> <span class="token function">article_safe_delete</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        article <span class="token operator">=</span> ArticlePost<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token builtin">id</span><span class="token punctuation">)</span>        article<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">"article:article_list"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"仅允许post请求"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可能你要问了，没发现哪行代码校验了<code>csrf</code>令牌啊？放心，默认配置下所有的 POST 请求都由 <strong>Django 中间件</strong>帮你验证了。另外视图一定要限制为 POST 请求，即<code>if request.method == &#39;POST&#39;</code>必须有，就请读者思考一下原因吧。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章新增了删除博客文章的功能，并且使用了弹窗组件优化了用户体验。</p><p>另一个重要的知识点就是CSRF攻击的防范。记住一条，凡是重要的数据操作，都应该考虑带有 csrf 令牌的 POST 请求；或者更简单的方法，数据查询用 GET，数据更改用 POST。</p><p>注意这个删除文章的功能并没有对用户身份进行验证。别急，等到讲完用户管理之后再来处理。</p><p>下一章将学习如何更新文章，准备好继续作战吧。</p><ul><li>有疑问请在<a href="http://www.dusaiphoto.com/">杜赛的个人网站</a>留言，我会尽快回复。</li><li>或Email私信我：<a href="mailto:&#x64;&#x75;&#115;&#x61;&#105;&#x70;&#x68;&#111;&#x74;&#x6f;&#64;&#102;&#111;&#x78;&#109;&#97;&#x69;&#108;&#46;&#99;&#x6f;&#x6d;">&#x64;&#x75;&#115;&#x61;&#105;&#x70;&#x68;&#111;&#x74;&#x6f;&#64;&#102;&#111;&#x78;&#109;&#97;&#x69;&#108;&#46;&#99;&#x6f;&#x6d;</a></li><li>项目完整代码：<a href="https://github.com/stacklens/django_blog_tutorial">Django_blog_tutorial</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--45.html学习1</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/45.html-xue-xi-1/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/45.html-xue-xi-1/</url>
      
        <content type="html"><![CDATA[<p>#HTTML学习1</p><h2 id="lang-”en”"><a href="#lang-”en”" class="headerlink" title="lang=”en”"></a>lang=”en”</h2><p>这是一个W3C的标准；<br>lang代表语言，en是英语；改成zh-cn指简体中文<br>xml:lang就是xml的语言<br>##meta标签<br>###charset<br>代表编码格式，一般有utf-8,gbk-2312等<br>###viewport<br>一般用于移动端布局</p><pre><code>content属性值详解：width：可视区域的宽度，值可为数字或关键词device-widthheight：同widthinitial-scale：页面首次被显示是可视区域的缩放级别，取值1.0则页面按实际尺寸显示，无任何缩放user-scalable:是否可对页面进行缩放，0禁止缩放maximum-scale=1.0, minimum-scale=1.0;可视区域的缩放级别，maximum-scale用户可将页面放大的程序，1.0将禁止用户放大到实际尺寸之上。</code></pre><p>###Keywords<br>在早年，keywords标签在关键词排名中起到非常大的作用，但是后来被很多的SEOER用来作弊，最终导致搜索引擎大大降低了此标签的重要性，</p><p>所以才有我们现在经常看到的很多大型网站的关键词排名很好，但是却没有书写keywords标签.</p><p>所以说现在写不写keywords标签真的无所谓了，但是如果你还是放不下这个标签你也可以写上，但千万不能有故意堆砌关键词的嫌疑了！<br>###description<br>description要用简短的文字描述网站或网页的主要内容，有利于各大搜索引擎的抓取收录你的网站或网页。</p><p>当你设置了description网站描述文字，才会显示在搜索引擎的结果页中，而每个网页的description也是同样的道理，简短又准确的网页描述文字，可以帮助用户在搜索引擎中更方便的找到你的网站和网页！<br>content属性值是网页描述文字，尽量用简洁的文字描述该网页的主要内容，一般控制在60字以内</p><p>meta标签必须写在头部head标签之内，而description的meta标签务必要写在keywords的meta标签之后<br>###书签图标</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% static <span class="token punctuation">'</span>tag.icon<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 一般为这种格式，显示在网页顶部，当有人收藏你的网站时也会显示</p><p>##js和min.js区别<br>   相同的是，他们的内容是一样的，包含的函数数量相同，同版本中的函数表达也是一样。</p><p>   不同点，单单从名字可以看出，一个占的空间大些，一个占的空间小。</p><p>   .min.js文件是将正常的.js文件空格都去掉，函数名尽量简写，使文件空间尽量小，加入项目，可以尽量减少项目的总的大小。</p><p>   而.js文件便于查看和学习，函数都有很好的排版。</p><p>  综合来说。jquery.min.js是用于项目引用。</p><p>##站长推送代码</p><pre><code> &lt;script&gt;    　(function()&#123;    　var bp = document.createElement(&#39;script&#39;);    　var curProtocol = window.location.protocol.split(&#39;:&#39;)[0];      　if (curProtocol === &#39;https&#39;)&#123;            bp.src = &#39;https://zz.bdstatic.com/linksubmit/push.js&#39;;      　&#125;        else&#123;          bp.src = &#39;http://push.zhanzhang.baidu.com/push.js&#39;;        &#125;        var s = document.getElementsByTagName(&quot;script&quot;)[0];        s.parentNode.insertBefore(bp, s);      &#125;)();  &lt;/script&gt;</code></pre><p>低本钱实现链接自动提交，百度站长平台宣布,站长需要在每个页面的HTML代码中包括以下自动推送JS代码当页面被会见时。</p><p>页面链接会自动推送给百度，有利于新页面更快被百度发现．为了更快速的发现站点天天发生的最新内容。</p>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django博客网站搭建--13.用户的登录和退出</title>
      <link href="/post/django-bo-ke-wang-zhan-da-jian/13.yong-hu-de-deng-lu-he-tui-chu/"/>
      <url>/post/django-bo-ke-wang-zhan-da-jian/13.yong-hu-de-deng-lu-he-tui-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p>用户数据可以说是大部分网站最重要的资产。用户管理就是对用户数据进行增删改查等操作的功能，自然也就非常的重要了。</p><p>本章开始学习用户管理的内容，首先从用户登录开始。</p><p>在Django中用app来区别不同功能的模块，达到代码隔离和复用。<strong>因为用户管理和博客文章的功能不同，因此需要新建一个专门的app。</strong></p><p><strong>进入虚拟环境</strong>，运行<code>startapp</code>指令创建新的app：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python manage<span class="token punctuation">.</span>py startapp userprofile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看项目目录，发现已经新生成了userprofile目录及其中的文件了。</p><h2 id="再遇表单类"><a href="#再遇表单类" class="headerlink" title="再遇表单类"></a>再遇表单类</h2><p>用户登录时，需要填写账户密码等表单数据，因此又要用到Form表单类。</p><p>在<code>userprofile</code>目录中创建表单类的文件<code>forms.py</code>，编写如下代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">/</span>userprofile<span class="token operator">/</span>forms<span class="token punctuation">.</span>py<span class="token comment"># 引入表单类</span><span class="token keyword">from</span> django <span class="token keyword">import</span> forms<span class="token comment"># 引入 User 模型</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token comment"># 登录表单，继承了 forms.Form 类</span><span class="token keyword">class</span> <span class="token class-name">UserLoginForm</span><span class="token punctuation">(</span>forms<span class="token punctuation">.</span>Form<span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> forms<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> forms<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在前面发表文章的模块中，表单类继承了<code>forms.ModelForm</code>，这个父类<strong>适合于需要直接与数据库交互的功能</strong>，比如新建、更新数据库的字段等。如果表单将用于直接添加或编辑Django模型，则可以使用 <code>ModelForm</code>来避免重复书写字段描述。</p><p>而<code>forms.Form</code>则需要手动配置每个字段，<strong>它适用于不与数据库进行直接交互的功能</strong>。用户登录不需要对数据库进行任何改动，因此直接继承<code>forms.Form</code>就可以了。</p><h2 id="编写视图"><a href="#编写视图" class="headerlink" title="编写视图"></a>编写视图</h2><p>用户的登录是比较复杂的功能，好在Django提供了封装好的模块供我们使用。</p><p>首先在<code>userprofile/views.py</code>中写视图函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">/</span>userprofile<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token punctuation">,</span> redirect<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth <span class="token keyword">import</span> authenticate<span class="token punctuation">,</span> login<span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token keyword">from</span> <span class="token punctuation">.</span>forms <span class="token keyword">import</span> UserLoginForm<span class="token comment"># Create your views here.</span><span class="token keyword">def</span> <span class="token function">user_login</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        user_login_form <span class="token operator">=</span> UserLoginForm<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>        <span class="token keyword">if</span> user_login_form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># .cleaned_data 清洗出合法数据</span>            data <span class="token operator">=</span> user_login_form<span class="token punctuation">.</span>cleaned_data            <span class="token comment"># 检验账号、密码是否正确匹配数据库中的某个用户</span>            <span class="token comment"># 如果均匹配则返回这个 user 对象</span>            user <span class="token operator">=</span> authenticate<span class="token punctuation">(</span>username<span class="token operator">=</span>data<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> password<span class="token operator">=</span>data<span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> user<span class="token punctuation">:</span>                <span class="token comment"># 将用户数据保存在 session 中，即实现了登录动作</span>                login<span class="token punctuation">(</span>request<span class="token punctuation">,</span> user<span class="token punctuation">)</span>                <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">"article:article_list"</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"账号或密码输入有误。请重新输入~"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"账号或密码输入不合法"</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">:</span>        user_login_form <span class="token operator">=</span> UserLoginForm<span class="token punctuation">(</span><span class="token punctuation">)</span>        context <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">'form'</span><span class="token punctuation">:</span> user_login_form <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'userprofile/login.html'</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"请使用GET或POST请求数据"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>跟发表文章的表单类类似，Form对象的主要任务就是验证数据。调用<code>is_valid()</code>方法验证并返回指定数据是否有效的布尔值。</p></li><li><p><code>Form</code>不仅负责验证数据，还可以“清洗”它：将其标准化为一致的格式，这个特性使得它允许以各种方式输入特定字段的数据，<strong>并且始终产生一致的输出。</strong>一旦<code>Form</code>使用数据创建了一个实例并对其进行了<strong>验证</strong>，就可以通过<code>cleaned_data</code>属性访问清洗之后的数据。</p></li><li><p><code>authenticate()</code>方法验证用户名称和密码是否匹配，如果是，则将这个用户数据返回。</p></li><li><p><code>login()</code>方法实现用户登录，将用户数据保存在session中。</p></li></ul><p>其他的内容就跟发表文章时的技巧类似了。</p><h3 id="什么是session"><a href="#什么是session" class="headerlink" title="什么是session"></a>什么是session</h3><p>Session在网络应用中，称为<strong>“会话控制”</strong>，它存储特定用户会话所需的属性及配置信息。</p><p>当用户在 Web 页之间跳转时，存储在 Session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。</p><p>Session 最常见的用法就是存储用户的登录数据。</p><p>详情看这里：<a href="https://baike.baidu.com/item/Session/479100">Session百度百科</a></p><h2 id="登录的模板"><a href="#登录的模板" class="headerlink" title="登录的模板"></a>登录的模板</h2><p>接着写模板文件。</p><p>创建<code>/templates/userprofile/login.html</code>模板：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">/templates/userprofile/login.html&#123;% extends "base.html" %&#125; &#123;% load staticfiles %&#125;&#123;% block title %&#125; 登录 &#123;% endblock title %&#125;&#123;% block content %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                &#123;% csrf_token %&#125;                <span class="token comment">&lt;!-- 账号 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>账号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- 密码 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- 提交按钮 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>&#123;% endblock content %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内容与<a href="https://www.dusaiphoto.com/article/article-detail/22/">使用Form表单类发表新文章</a>非常类似。唯一新知识是输入密码表单的<code>type=&quot;password&quot;</code>，可以让输入密码的时候显示小圆点，避免有人偷窥。</p><p>然后我们改写一下<code>tempalates/header.html</code>，把登录的按钮加进去：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">/tempalates/header.html...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar-nav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    ...        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-link<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>article:article_list<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文章<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- Django的 if 模板语句 --></span>    &#123;% if user.is_authenticated %&#125;        <span class="token comment">&lt;!-- 如果用户已经登录，则显示用户名下拉框 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-item dropdown<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-link dropdown-toggle<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbarDropdown<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">data-toggle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dropdown<span class="token punctuation">"</span></span> <span class="token attr-name">aria-haspopup</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">aria-expanded</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              &#123;&#123; user.username &#125;&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dropdown-menu<span class="token punctuation">"</span></span> <span class="token attr-name">aria-labelledby</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbarDropdown<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dropdown-item<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>退出登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 如果用户未登录，则显示 “登录” --></span>    &#123;% else %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-link<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;% url <span class="token punctuation">'</span>userprofile:login<span class="token punctuation">'</span> %&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                        <span class="token comment">&lt;!-- if 语句在这里结束 --></span>    &#123;% endif %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里使用了新的模板语法：<code>&#123;% if ... %&#125;</code>，用来判断用户是否已经登录：</p><ul><li>如果用户已经登录，则显示一个名字为用户名称的下拉框，就像通常的社交网站一样。</li><li>如果用户未登录，则显示“登录”两个字提醒用户可以点击登录。</li></ul><p><code>is_authenticated</code>是<code>models.User</code>类的属性，用于判断用户是否已通过身份验证。</p><h2 id="url及其他设置"><a href="#url及其他设置" class="headerlink" title="url及其他设置"></a>url及其他设置</h2><p>最后的步骤就是将app配置到项目中去。</p><p>创建<code>userprofile/urls.py</code>文件：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">/</span>userprofile<span class="token operator">/</span>urls<span class="token punctuation">.</span>py<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> viewsapp_name <span class="token operator">=</span> <span class="token string">'userprofile'</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token comment"># 用户登录</span>    path<span class="token punctuation">(</span><span class="token string">'login/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>user_login<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置根路由<code>my_blog/urls.py</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">/</span>my_blog<span class="token operator">/</span>urls<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token comment"># 用户管理</span>    path<span class="token punctuation">(</span><span class="token string">'userprofile/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'userprofile.urls'</span><span class="token punctuation">,</span> namespace<span class="token operator">=</span><span class="token string">'userprofile'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置<code>my_blog/settings.py</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">my_blog<span class="token operator">/</span>settings<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token string">'userprofile'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为<code>userprofile</code>这个app并没有改动model，因此不用迁移数据。</p><p>OK了，运行服务器，在admin后台中退出登录（找找页面右上角），返回到文章列表页：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20181029/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE66.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20181029/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE66.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>点击登录按钮，输入账号和密码（可以故意输错试试会出现什么）：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20181029/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE68.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20181029/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE68.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>点击提交，将自动回到文章列表页面：</p><p><img src="https://www.dusaiphoto.com/media/image/image_source/20181029/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE69.jpg" class="lazyload placeholder" data-srcset="https://www.dusaiphoto.com/media/image/image_source/20181029/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE69.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>大功告成。</p><h2 id="用户的退出"><a href="#用户的退出" class="headerlink" title="用户的退出"></a>用户的退出</h2><p>有了用户登录的知识后，用户退出就很简单了。这里就直接给出代码，相信你一定能看懂。</p><p>还是先添加用户退出的视图：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">/</span>userprofile<span class="token operator">/</span>views<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 引入logout模块</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth <span class="token keyword">import</span> authenticate<span class="token punctuation">,</span> login<span class="token punctuation">,</span> logout<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 用户退出</span><span class="token keyword">def</span> <span class="token function">user_logout</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    logout<span class="token punctuation">(</span>request<span class="token punctuation">)</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">"article:article_list"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后配置<code>/userprofile/urls.py</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">/</span>userprofile<span class="token operator">/</span>urls<span class="token punctuation">.</span>py<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'login/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>user_login<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment"># 用户退出</span>    path<span class="token punctuation">(</span><span class="token string">'logout/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>user_logout<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'logout'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在写登录的代码时，已经给用户退出留好了接口，因此只需要改动<code>/templates/header.html</code>：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">/templates/header.html...# 改动 href 中的链接指向<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dropdown-item<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>&#123;% url <span class="token punctuation">"</span>userprofile:logout<span class="token punctuation">"</span> %&#125;<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>退出登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存后刷新页面，点击下拉框中“退出登录”选项，用户就顺利退出了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章用到了表单类、if模板语句、用户验证等知识完成了用户管理的登录和退出。</p><p>接下来学习如何实现注册和删除。</p><ul><li>有疑问请在<a href="http://www.dusaiphoto.com/">杜赛的个人网站</a>留言，我会尽快回复。</li><li>或Email私信我：<a href="mailto:&#x64;&#x75;&#x73;&#x61;&#x69;&#x70;&#x68;&#111;&#116;&#111;&#64;&#x66;&#x6f;&#120;&#x6d;&#x61;&#x69;&#108;&#x2e;&#99;&#111;&#109;">&#x64;&#x75;&#x73;&#x61;&#x69;&#x70;&#x68;&#111;&#116;&#111;&#64;&#x66;&#x6f;&#120;&#x6d;&#x61;&#x69;&#108;&#x2e;&#99;&#111;&#109;</a></li><li>项目完整代码：<a href="https://github.com/stacklens/django_blog_tutorial">Django_blog_tutorial</a></li></ul><blockquote><p>转载请告知作者并注明出处。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Django博客网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
